
CodeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c04  08005c04  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08005c04  08005c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c0c  08005c0c  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c0c  08005c0c  00015c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c10  08005c10  00015c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08005c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000144  08005d58  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08005d58  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134fe  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000255d  00000000  00000000  00033672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00035bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  00036d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c77  00000000  00000000  00037d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2e4  00000000  00000000  0005b9df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000debef  00000000  00000000  00069cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001488b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a58  00000000  00000000  00148930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000144 	.word	0x20000144
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a1c 	.word	0x08005a1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000148 	.word	0x20000148
 80001d4:	08005a1c 	.word	0x08005a1c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b972 	b.w	8000cc0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	4688      	mov	r8, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14b      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4615      	mov	r5, r2
 8000a06:	d967      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0720 	rsb	r7, r2, #32
 8000a12:	fa01 f302 	lsl.w	r3, r1, r2
 8000a16:	fa20 f707 	lsr.w	r7, r0, r7
 8000a1a:	4095      	lsls	r5, r2
 8000a1c:	ea47 0803 	orr.w	r8, r7, r3
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a2c:	fa1f fc85 	uxth.w	ip, r5
 8000a30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a38:	fb07 f10c 	mul.w	r1, r7, ip
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18eb      	adds	r3, r5, r3
 8000a42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a46:	f080 811b 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8118 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a50:	3f02      	subs	r7, #2
 8000a52:	442b      	add	r3, r5
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a68:	45a4      	cmp	ip, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	192c      	adds	r4, r5, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a72:	f080 8107 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	f240 8104 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	442c      	add	r4, r5
 8000a80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a84:	eba4 040c 	sub.w	r4, r4, ip
 8000a88:	2700      	movs	r7, #0
 8000a8a:	b11e      	cbz	r6, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c6 4300 	strd	r4, r3, [r6]
 8000a94:	4639      	mov	r1, r7
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0xbe>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80eb 	beq.w	8000c7a <__udivmoddi4+0x286>
 8000aa4:	2700      	movs	r7, #0
 8000aa6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aaa:	4638      	mov	r0, r7
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	fab3 f783 	clz	r7, r3
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d147      	bne.n	8000b4a <__udivmoddi4+0x156>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xd0>
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	f200 80fa 	bhi.w	8000cb8 <__udivmoddi4+0x2c4>
 8000ac4:	1a84      	subs	r4, r0, r2
 8000ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	4698      	mov	r8, r3
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d0e0      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000ad2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ad6:	e7dd      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xe8>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	f040 808f 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae6:	1b49      	subs	r1, r1, r5
 8000ae8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aec:	fa1f f885 	uxth.w	r8, r5
 8000af0:	2701      	movs	r7, #1
 8000af2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b00:	fb08 f10c 	mul.w	r1, r8, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x14c>
 8000b30:	192c      	adds	r4, r5, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x14a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80b6 	bhi.w	8000caa <__udivmoddi4+0x2b6>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e79f      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b4e:	40bb      	lsls	r3, r7
 8000b50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b58:	fa01 f407 	lsl.w	r4, r1, r7
 8000b5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b68:	4325      	orrs	r5, r4
 8000b6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b6e:	0c2c      	lsrs	r4, r5, #16
 8000b70:	fb08 3319 	mls	r3, r8, r9, r3
 8000b74:	fa1f fa8e 	uxth.w	sl, lr
 8000b78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b80:	429c      	cmp	r4, r3
 8000b82:	fa02 f207 	lsl.w	r2, r2, r7
 8000b86:	fa00 f107 	lsl.w	r1, r0, r7
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b94:	f080 8087 	bcs.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	f240 8084 	bls.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ba2:	4473      	add	r3, lr
 8000ba4:	1b1b      	subs	r3, r3, r4
 8000ba6:	b2ad      	uxth	r5, r5
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bb8:	45a2      	cmp	sl, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	d26b      	bcs.n	8000c9e <__udivmoddi4+0x2aa>
 8000bc6:	45a2      	cmp	sl, r4
 8000bc8:	d969      	bls.n	8000c9e <__udivmoddi4+0x2aa>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4474      	add	r4, lr
 8000bce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd6:	eba4 040a 	sub.w	r4, r4, sl
 8000bda:	454c      	cmp	r4, r9
 8000bdc:	46c2      	mov	sl, r8
 8000bde:	464b      	mov	r3, r9
 8000be0:	d354      	bcc.n	8000c8c <__udivmoddi4+0x298>
 8000be2:	d051      	beq.n	8000c88 <__udivmoddi4+0x294>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d069      	beq.n	8000cbc <__udivmoddi4+0x2c8>
 8000be8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bec:	eb64 0403 	sbc.w	r4, r4, r3
 8000bf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bf4:	40fd      	lsrs	r5, r7
 8000bf6:	40fc      	lsrs	r4, r7
 8000bf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000c00:	2700      	movs	r7, #0
 8000c02:	e747      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c04:	f1c2 0320 	rsb	r3, r2, #32
 8000c08:	fa20 f703 	lsr.w	r7, r0, r3
 8000c0c:	4095      	lsls	r5, r2
 8000c0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c12:	fa21 f303 	lsr.w	r3, r1, r3
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	4338      	orrs	r0, r7
 8000c1c:	0c01      	lsrs	r1, r0, #16
 8000c1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c22:	fa1f f885 	uxth.w	r8, r5
 8000c26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb07 f308 	mul.w	r3, r7, r8
 8000c32:	428b      	cmp	r3, r1
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x256>
 8000c3a:	1869      	adds	r1, r5, r1
 8000c3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c40:	d22f      	bcs.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d92d      	bls.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c46:	3f02      	subs	r7, #2
 8000c48:	4429      	add	r1, r5
 8000c4a:	1acb      	subs	r3, r1, r3
 8000c4c:	b281      	uxth	r1, r0
 8000c4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5a:	fb00 f308 	mul.w	r3, r0, r8
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x27e>
 8000c62:	1869      	adds	r1, r5, r1
 8000c64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c68:	d217      	bcs.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d915      	bls.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6e:	3802      	subs	r0, #2
 8000c70:	4429      	add	r1, r5
 8000c72:	1ac9      	subs	r1, r1, r3
 8000c74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c78:	e73b      	b.n	8000af2 <__udivmoddi4+0xfe>
 8000c7a:	4637      	mov	r7, r6
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e709      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c80:	4607      	mov	r7, r0
 8000c82:	e6e7      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c84:	4618      	mov	r0, r3
 8000c86:	e6fb      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c88:	4541      	cmp	r1, r8
 8000c8a:	d2ab      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c90:	eb69 020e 	sbc.w	r2, r9, lr
 8000c94:	3801      	subs	r0, #1
 8000c96:	4613      	mov	r3, r2
 8000c98:	e7a4      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	e7e9      	b.n	8000c72 <__udivmoddi4+0x27e>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e795      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca2:	4667      	mov	r7, ip
 8000ca4:	e7d1      	b.n	8000c4a <__udivmoddi4+0x256>
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	e77c      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000caa:	3802      	subs	r0, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	e747      	b.n	8000b40 <__udivmoddi4+0x14c>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	442b      	add	r3, r5
 8000cb6:	e72f      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb8:	4638      	mov	r0, r7
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xda>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0xa0>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <Sim_PWON>:


uint8_t serverText1[] = "gui thanh cong ban tin len server\r\n";
uint8_t serverText2[] = "gui khong thanh cong ban tin len server\r\n";

void Sim_PWON(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <Sim_PWON+0x14>)
 8000cce:	f001 fd0d 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	48000400 	.word	0x48000400

08000cdc <Sim_PWOFF>:

void Sim_PWOFF(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <Sim_PWOFF+0x14>)
 8000ce6:	f001 fd01 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <Pow_ON_OFF>:

void Pow_ON_OFF(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <Pow_ON_OFF+0x2c>)
 8000cfe:	f001 fcf5 	bl	80026ec <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f001 fa03 	bl	8002110 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <Pow_ON_OFF+0x2c>)
 8000d10:	f001 fcec 	bl	80026ec <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d18:	f001 f9fa 	bl	8002110 <HAL_Delay>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	48000400 	.word	0x48000400

08000d24 <GSM_Init>:

void GSM_Init(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  Pow_ON_OFF();;
 8000d28:	f7ff ffe4 	bl	8000cf4 <Pow_ON_OFF>
	  Sim_PWON();
 8000d2c:	f7ff ffca 	bl	8000cc4 <Sim_PWON>
	  HAL_Delay(2000);
 8000d30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d34:	f001 f9ec 	bl	8002110 <HAL_Delay>
	  Sim_PWOFF();
 8000d38:	f7ff ffd0 	bl	8000cdc <Sim_PWOFF>
	  HAL_Delay(25000);
 8000d3c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000d40:	f001 f9e6 	bl	8002110 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <GSM_Init+0x3c>)
 8000d46:	f7ff fa47 	bl	80001d8 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	4903      	ldr	r1, [pc, #12]	; (8000d60 <GSM_Init+0x3c>)
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <GSM_Init+0x40>)
 8000d56:	f003 fe9d 	bl	8004a94 <HAL_UART_Transmit>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200004e0 	.word	0x200004e0
 8000d64:	20000460 	.word	0x20000460

08000d68 <fnParseOKPacket>:

uint8_t fnParseOKPacket(char* arrRes) { 	//kiem tra Sim
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\nOK", 4)) {
 8000d70:	2204      	movs	r2, #4
 8000d72:	4907      	ldr	r1, [pc, #28]	; (8000d90 <fnParseOKPacket+0x28>)
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f004 fe07 	bl	8005988 <memcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <fnParseOKPacket+0x1c>
    return 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <fnParseOKPacket+0x1e>
  }
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	08005a34 	.word	0x08005a34

08000d94 <fnParseCPINPacket>:

uint8_t fnParseCPINPacket(char* arrRes) {	// kiem tra trang thai cua Sim
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CPIN: READY", 14)) {
 8000d9c:	220e      	movs	r2, #14
 8000d9e:	4907      	ldr	r1, [pc, #28]	; (8000dbc <fnParseCPINPacket+0x28>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f004 fdf1 	bl	8005988 <memcmp>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <fnParseCPINPacket+0x1c>
    return 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <fnParseCPINPacket+0x1e>
  }
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08005a3c 	.word	0x08005a3c

08000dc0 <fnParseCSQPacket>:

uint8_t fnParseCSQPacket(char* arrRes) {	// kiem tra cuong do song
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CSQ:", 7)) {
 8000dc8:	2207      	movs	r2, #7
 8000dca:	4907      	ldr	r1, [pc, #28]	; (8000de8 <fnParseCSQPacket+0x28>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f004 fddb 	bl	8005988 <memcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <fnParseCSQPacket+0x1c>
    return 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <fnParseCSQPacket+0x1e>
  }
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08005a4c 	.word	0x08005a4c

08000dec <fnParseCGREGPacket>:

uint8_t fnParseCGREGPacket(char* arrRes) {	// dang ki mạng
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CGREG:", 9)) {
 8000df4:	2209      	movs	r2, #9
 8000df6:	4907      	ldr	r1, [pc, #28]	; (8000e14 <fnParseCGREGPacket+0x28>)
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f004 fdc5 	bl	8005988 <memcmp>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <fnParseCGREGPacket+0x1c>
    return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <fnParseCGREGPacket+0x1e>
  }
  return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08005a54 	.word	0x08005a54

08000e18 <fnParseCREGPacket>:

uint8_t fnParseCREGPacket(char* arrRes) {	// dang ki mang
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CREG:", 8)) {
 8000e20:	2208      	movs	r2, #8
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <fnParseCREGPacket+0x28>)
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f004 fdaf 	bl	8005988 <memcmp>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <fnParseCREGPacket+0x1c>
    return 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <fnParseCREGPacket+0x1e>
  }
  return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08005a60 	.word	0x08005a60

08000e44 <fnParseCGATTPacket>:

uint8_t fnParseCGATTPacket(char* arrRes) { // kiem tra trang thai GPRS
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CGATT:", 9)) {
 8000e4c:	2209      	movs	r2, #9
 8000e4e:	4907      	ldr	r1, [pc, #28]	; (8000e6c <fnParseCGATTPacket+0x28>)
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f004 fd99 	bl	8005988 <memcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <fnParseCGATTPacket+0x1c>
    return 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <fnParseCGATTPacket+0x1e>
  }
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005a6c 	.word	0x08005a6c

08000e70 <fnParseIPADDRPacket>:

uint8_t fnParseIPADDRPacket(char* arrRes) {	// nhan dia chi IP
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+IPADDR:", 10)) {
 8000e78:	220a      	movs	r2, #10
 8000e7a:	4907      	ldr	r1, [pc, #28]	; (8000e98 <fnParseIPADDRPacket+0x28>)
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f004 fd83 	bl	8005988 <memcmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <fnParseIPADDRPacket+0x1c>
    return 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <fnParseIPADDRPacket+0x1e>
  }
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08005a78 	.word	0x08005a78

08000e9c <fnParseCIPOPQUERYPacket>:

uint8_t fnParseCIPOPQUERYPacket(char* arrRes) {	// quet link ket noi
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CIPOPQUERY:0", 15)) {
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <fnParseCIPOPQUERYPacket+0x28>)
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f004 fd6d 	bl	8005988 <memcmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <fnParseCIPOPQUERYPacket+0x1c>
    return 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <fnParseCIPOPQUERYPacket+0x1e>
  }
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	08005a84 	.word	0x08005a84

08000ec8 <fnParseSendSVPacket>:

uint8_t fnParseSendSVPacket(char* arrRes) {	// kiem tra phan hoi gui
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n>", 3)) {
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <fnParseSendSVPacket+0x28>)
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f004 fd57 	bl	8005988 <memcmp>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <fnParseSendSVPacket+0x1c>
    return 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <fnParseSendSVPacket+0x1e>
  }
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08005a94 	.word	0x08005a94

08000ef4 <fnCheckSendSVPacket>:

uint8_t fnCheckSendSVPacket(char* arrRes) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = strstr(arrRes, "CIPSEND:SUCCESS");
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <fnCheckSendSVPacket+0x28>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f004 fd71 	bl	80059e6 <strstr>
 8000f04:	60f8      	str	r0, [r7, #12]
	if(ptr != 0){
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <fnCheckSendSVPacket+0x1c>
		return 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <fnCheckSendSVPacket+0x1e>
	}
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08005a98 	.word	0x08005a98

08000f20 <fnParseReceiveSVPacket>:


uint8_t fnParseReceiveSVPacket(char* arrRes) {	// kiem tra phan hoi nhan
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = strstr(arrRes, "CIPRXGET:SUCCESS");
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <fnParseReceiveSVPacket+0x28>)
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f004 fd5b 	bl	80059e6 <strstr>
 8000f30:	60f8      	str	r0, [r7, #12]
	if(ptr != 0){
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <fnParseReceiveSVPacket+0x1c>
		return 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <fnParseReceiveSVPacket+0x1e>
	}
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	08005aa8 	.word	0x08005aa8

08000f4c <fnCheckPacket>:

uint8_t fnCheckPacket(uint8_t* packet, uint16_t len, fncProcess fnParse) { // ham gui du lieu co kiem tra phan hoi
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	460b      	mov	r3, r1
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	817b      	strh	r3, [r7, #10]
	 indexBuffer = 0;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <fnCheckPacket+0x7c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
	 memset(buffer, '\0', 256);
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	2100      	movs	r1, #0
 8000f66:	4819      	ldr	r0, [pc, #100]	; (8000fcc <fnCheckPacket+0x80>)
 8000f68:	f004 fd28 	bl	80059bc <memset>
	 HAL_UART_Transmit(&huart3, packet, len, 1000);
 8000f6c:	897a      	ldrh	r2, [r7, #10]
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	68f9      	ldr	r1, [r7, #12]
 8000f74:	4816      	ldr	r0, [pc, #88]	; (8000fd0 <fnCheckPacket+0x84>)
 8000f76:	f003 fd8d 	bl	8004a94 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1, packet, len, 1000);
 8000f7a:	897a      	ldrh	r2, [r7, #10]
 8000f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <fnCheckPacket+0x88>)
 8000f84:	f003 fd86 	bl	8004a94 <HAL_UART_Transmit>
	 HAL_Delay(300);
 8000f88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f8c:	f001 f8c0 	bl	8002110 <HAL_Delay>
	 if (fnParse) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <fnCheckPacket+0x58>
	 	  answer = fnParse(buffer);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <fnCheckPacket+0x80>)
 8000f9a:	4798      	blx	r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <fnCheckPacket+0x8c>)
 8000fa2:	601a      	str	r2, [r3, #0]
	   }
	 HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <fnCheckPacket+0x80>)
 8000fa6:	f7ff f917 	bl	80001d8 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	4906      	ldr	r1, [pc, #24]	; (8000fcc <fnCheckPacket+0x80>)
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <fnCheckPacket+0x88>)
 8000fb6:	f003 fd6d 	bl	8004a94 <HAL_UART_Transmit>
	 return answer;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <fnCheckPacket+0x8c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000161 	.word	0x20000161
 8000fcc:	200004e0 	.word	0x200004e0
 8000fd0:	200003a4 	.word	0x200003a4
 8000fd4:	20000460 	.word	0x20000460
 8000fd8:	200002a0 	.word	0x200002a0

08000fdc <fncSend_CommandAT>:
	 HAL_UART_Transmit(&huart1, cmd, len, 1000);
	 HAL_Delay(300);
	 HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
}

void fncSend_CommandAT(uint8_t curr_cmd, uint8_t next_cmd){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
		result = fnCheckPacket(arrInitialSim[curr_cmd].strSend.packetAt, arrInitialSim[curr_cmd].strSend.length, arrInitialSim[curr_cmd].fncType);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <fncSend_CommandAT+0x70>)
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <fncSend_CommandAT+0x70>)
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	3308      	adds	r3, #8
 8001002:	8819      	ldrh	r1, [r3, #0]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <fncSend_CommandAT+0x70>)
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	4413      	add	r3, r2
 800100c:	330c      	adds	r3, #12
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	f7ff ff9b 	bl	8000f4c <fnCheckPacket>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <fncSend_CommandAT+0x74>)
 800101c:	601a      	str	r2, [r3, #0]
		if(result != 0){
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <fncSend_CommandAT+0x74>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d004      	beq.n	8001030 <fncSend_CommandAT+0x54>
			gsm_state = next_cmd;
 8001026:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <fncSend_CommandAT+0x78>)
 800102c:	701a      	strb	r2, [r3, #0]
		else
			if(CHECK_CMD_CIPOPQUERY == curr_cmd)
				wait_to_reinitialTCP(10);
			else
				wait_to_reinitial(10);
}
 800102e:	e009      	b.n	8001044 <fncSend_CommandAT+0x68>
			if(CHECK_CMD_CIPOPQUERY == curr_cmd)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	d103      	bne.n	800103e <fncSend_CommandAT+0x62>
				wait_to_reinitialTCP(10);
 8001036:	200a      	movs	r0, #10
 8001038:	f000 fe22 	bl	8001c80 <wait_to_reinitialTCP>
}
 800103c:	e002      	b.n	8001044 <fncSend_CommandAT+0x68>
				wait_to_reinitial(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f000 fdfe 	bl	8001c40 <wait_to_reinitial>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000058 	.word	0x20000058
 8001050:	20000608 	.word	0x20000608
 8001054:	20000054 	.word	0x20000054

08001058 <fncSend_DataServer>:

uint8_t fncSend_DataServer(uint8_t curr_cmd, uint8_t *arrSend, uint32_t len){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	73fb      	strb	r3, [r7, #15]
		result = fnCheckPacket(arrInitialSim[curr_cmd].strSend.packetAt,arrInitialSim[curr_cmd].strSend.length, arrInitialSim[curr_cmd].fncType);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4a28      	ldr	r2, [pc, #160]	; (800110c <fncSend_DataServer+0xb4>)
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	3304      	adds	r3, #4
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4a25      	ldr	r2, [pc, #148]	; (800110c <fncSend_DataServer+0xb4>)
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	3308      	adds	r3, #8
 800107c:	8819      	ldrh	r1, [r3, #0]
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <fncSend_DataServer+0xb4>)
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	4413      	add	r3, r2
 8001086:	330c      	adds	r3, #12
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	f7ff ff5e 	bl	8000f4c <fnCheckPacket>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <fncSend_DataServer+0xb8>)
 8001096:	601a      	str	r2, [r3, #0]
		if(result != 0){
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <fncSend_DataServer+0xb8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02d      	beq.n	80010fc <fncSend_DataServer+0xa4>
	 		num ++;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <fncSend_DataServer+0xbc>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <fncSend_DataServer+0xbc>)
 80010aa:	801a      	strh	r2, [r3, #0]
	 		result = fnCheckPacket(arrSend, len, fnCheckSendSVPacket);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4a19      	ldr	r2, [pc, #100]	; (8001118 <fncSend_DataServer+0xc0>)
 80010b2:	4619      	mov	r1, r3
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f7ff ff49 	bl	8000f4c <fnCheckPacket>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <fncSend_DataServer+0xb8>)
 80010c0:	601a      	str	r2, [r3, #0]
	 			if(result != 0){
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <fncSend_DataServer+0xb8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <fncSend_DataServer+0x8a>
	 				HAL_UART_Transmit(&huart1,serverText1, strlen((char*)serverText1), 1000);
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <fncSend_DataServer+0xc4>)
 80010cc:	f7ff f884 	bl	80001d8 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d8:	4910      	ldr	r1, [pc, #64]	; (800111c <fncSend_DataServer+0xc4>)
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <fncSend_DataServer+0xc8>)
 80010dc:	f003 fcda 	bl	8004a94 <HAL_UART_Transmit>
 80010e0:	e00a      	b.n	80010f8 <fncSend_DataServer+0xa0>
	 				}
	 			else
	 				HAL_UART_Transmit(&huart1,serverText2, strlen((char*)serverText2), 1000);
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <fncSend_DataServer+0xcc>)
 80010e4:	f7ff f878 	bl	80001d8 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <fncSend_DataServer+0xcc>)
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <fncSend_DataServer+0xc8>)
 80010f4:	f003 fcce 	bl	8004a94 <HAL_UART_Transmit>
	 	return 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e003      	b.n	8001104 <fncSend_DataServer+0xac>
	 	}
	 	else{
	 		wait_to_reinitialTCP(3);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fdbf 	bl	8001c80 <wait_to_reinitialTCP>
	 		return 0;
 8001102:	2300      	movs	r3, #0
	 	}

}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000058 	.word	0x20000058
 8001110:	20000608 	.word	0x20000608
 8001114:	2000026a 	.word	0x2000026a
 8001118:	08000ef5 	.word	0x08000ef5
 800111c:	20000000 	.word	0x20000000
 8001120:	20000460 	.word	0x20000460
 8001124:	20000024 	.word	0x20000024

08001128 <fncReceive_DataServer>:

void  fncReceive_DataServer(uint8_t curr_cmd){
 8001128:	b580      	push	{r7, lr}
 800112a:	b0c2      	sub	sp, #264	; 0x108
 800112c:	af00      	add	r7, sp, #0
 800112e:	4602      	mov	r2, r0
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	701a      	strb	r2, [r3, #0]
	 char revRtc[256];
	 result = fnCheckPacket(arrInitialSim[curr_cmd].strSend.packetAt,arrInitialSim[curr_cmd].strSend.length, arrInitialSim[curr_cmd].fncType);
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <fncReceive_DataServer+0x8c>)
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	3304      	adds	r3, #4
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <fncReceive_DataServer+0x8c>)
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	3308      	adds	r3, #8
 800114e:	8819      	ldrh	r1, [r3, #0]
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <fncReceive_DataServer+0x8c>)
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	330c      	adds	r3, #12
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	f7ff fef4 	bl	8000f4c <fnCheckPacket>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <fncReceive_DataServer+0x90>)
 800116a:	601a      	str	r2, [r3, #0]
	 if(result == 1){
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <fncReceive_DataServer+0x90>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d11a      	bne.n	80011aa <fncReceive_DataServer+0x82>
	 	memcpy(revRtc, buffer, sizeof(buffer));
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <fncReceive_DataServer+0x94>)
 800117a:	4618      	mov	r0, r3
 800117c:	4611      	mov	r1, r2
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	461a      	mov	r2, r3
 8001184:	f004 fc0f 	bl	80059a6 <memcpy>
	 	processChar(revRtc, '\n', arrRevProcess);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <fncReceive_DataServer+0x98>)
 800118e:	210a      	movs	r1, #10
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fd95 	bl	8001cc0 <processChar>
	 	vr_test = strlen(arrRevProcess);
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <fncReceive_DataServer+0x98>)
 8001198:	f7ff f81e 	bl	80001d8 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <fncReceive_DataServer+0x9c>)
 80011a2:	701a      	strb	r2, [r3, #0]
	 	//HAL_UART_Transmit(&huart1, &vr_test, 1, 1000);
	 	result = 0;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <fncReceive_DataServer+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	 	}
}
 80011aa:	bf00      	nop
 80011ac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000058 	.word	0x20000058
 80011b8:	20000608 	.word	0x20000608
 80011bc:	200004e0 	.word	0x200004e0
 80011c0:	20000168 	.word	0x20000168
 80011c4:	2000026c 	.word	0x2000026c

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b598      	push	{r3, r4, r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011cc:	f000 ff2b 	bl	8002026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d0:	f000 f956 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d4:	f000 fad2 	bl	800177c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011d8:	f000 fa70 	bl	80016bc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80011dc:	f000 fa20 	bl	8001620 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80011e0:	f000 fa9c 	bl	800171c <MX_USART3_UART_Init>
  MX_RTC_Init();
 80011e4:	f000 f9c0 	bl	8001568 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &data, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	498f      	ldr	r1, [pc, #572]	; (8001428 <main+0x260>)
 80011ec:	488f      	ldr	r0, [pc, #572]	; (800142c <main+0x264>)
 80011ee:	f003 fce5 	bl	8004bbc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &dataTest, 1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	498e      	ldr	r1, [pc, #568]	; (8001430 <main+0x268>)
 80011f6:	488f      	ldr	r0, [pc, #572]	; (8001434 <main+0x26c>)
 80011f8:	f003 fce0 	bl	8004bbc <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 80011fc:	488e      	ldr	r0, [pc, #568]	; (8001438 <main+0x270>)
 80011fe:	f003 f80b 	bl	8004218 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  switch (gsm_state){
 8001202:	4b8e      	ldr	r3, [pc, #568]	; (800143c <main+0x274>)
 8001204:	f993 3000 	ldrsb.w	r3, [r3]
 8001208:	3301      	adds	r3, #1
 800120a:	2b10      	cmp	r3, #16
 800120c:	d8f9      	bhi.n	8001202 <main+0x3a>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <main+0x4c>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001259 	.word	0x08001259
 8001218:	08001265 	.word	0x08001265
 800121c:	0800126f 	.word	0x0800126f
 8001220:	08001279 	.word	0x08001279
 8001224:	08001283 	.word	0x08001283
 8001228:	0800128d 	.word	0x0800128d
 800122c:	08001297 	.word	0x08001297
 8001230:	080012a1 	.word	0x080012a1
 8001234:	080012ab 	.word	0x080012ab
 8001238:	080012b5 	.word	0x080012b5
 800123c:	080012bf 	.word	0x080012bf
 8001240:	080012c9 	.word	0x080012c9
 8001244:	080012d3 	.word	0x080012d3
 8001248:	080012dd 	.word	0x080012dd
 800124c:	08001311 	.word	0x08001311
 8001250:	0800132f 	.word	0x0800132f
 8001254:	080013f3 	.word	0x080013f3
  	 case CMD_PWNON:
  		  GSM_Init();
 8001258:	f7ff fd64 	bl	8000d24 <GSM_Init>
  		  gsm_state = CHECK_CMD_AT;
 800125c:	4b77      	ldr	r3, [pc, #476]	; (800143c <main+0x274>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
  		  break;
 8001262:	e0da      	b.n	800141a <main+0x252>
  	 case CHECK_CMD_AT:
  		  fncSend_CommandAT(CHECK_CMD_AT, CHECK_STATUS_SIM);
 8001264:	2101      	movs	r1, #1
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff feb8 	bl	8000fdc <fncSend_CommandAT>
  		  break;
 800126c:	e0d5      	b.n	800141a <main+0x252>
  	 case CHECK_STATUS_SIM:
  		  fncSend_CommandAT(CHECK_STATUS_SIM, CHECK_CMD_CSQ);
 800126e:	2102      	movs	r1, #2
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff feb3 	bl	8000fdc <fncSend_CommandAT>
  		  break;
 8001276:	e0d0      	b.n	800141a <main+0x252>
  	 case CHECK_CMD_CSQ:
  		  fncSend_CommandAT(CHECK_CMD_CSQ, CHECK_STATUS_NETWORK);
 8001278:	2103      	movs	r1, #3
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff feae 	bl	8000fdc <fncSend_CommandAT>
  		  break;
 8001280:	e0cb      	b.n	800141a <main+0x252>
  	 case CHECK_STATUS_NETWORK:
  		  fncSend_CommandAT(CHECK_STATUS_NETWORK, CMD_REPORT_NETWORK);
 8001282:	2104      	movs	r1, #4
 8001284:	2003      	movs	r0, #3
 8001286:	f7ff fea9 	bl	8000fdc <fncSend_CommandAT>
   		  break;
 800128a:	e0c6      	b.n	800141a <main+0x252>
  	 case CMD_REPORT_NETWORK:
  		  fncSend_CommandAT(CMD_REPORT_NETWORK, CHECK_ATTACHED_STATUS);
 800128c:	2105      	movs	r1, #5
 800128e:	2004      	movs	r0, #4
 8001290:	f7ff fea4 	bl	8000fdc <fncSend_CommandAT>
    	  break;
 8001294:	e0c1      	b.n	800141a <main+0x252>
  	 case CHECK_ATTACHED_STATUS:
  		  fncSend_CommandAT(CHECK_ATTACHED_STATUS, CMD_CIPTIMEOUT);
 8001296:	2106      	movs	r1, #6
 8001298:	2005      	movs	r0, #5
 800129a:	f7ff fe9f 	bl	8000fdc <fncSend_CommandAT>
     	  break;
 800129e:	e0bc      	b.n	800141a <main+0x252>
  	 case CMD_CIPTIMEOUT:
  		  fncSend_CommandAT(CMD_CIPTIMEOUT, CHECK_MODE_TCP);
 80012a0:	2107      	movs	r1, #7
 80012a2:	2006      	movs	r0, #6
 80012a4:	f7ff fe9a 	bl	8000fdc <fncSend_CommandAT>
      	  break;
 80012a8:	e0b7      	b.n	800141a <main+0x252>
  	 case CHECK_MODE_TCP:
  		  fncSend_CommandAT(CHECK_MODE_TCP, CHECK_CMD_NETOPEN);
 80012aa:	2108      	movs	r1, #8
 80012ac:	2007      	movs	r0, #7
 80012ae:	f7ff fe95 	bl	8000fdc <fncSend_CommandAT>
       	  break;
 80012b2:	e0b2      	b.n	800141a <main+0x252>
 	 case CHECK_CMD_NETOPEN:
 		  fncSend_CommandAT(CHECK_CMD_NETOPEN, CMD_GET_IPADDR);
 80012b4:	2109      	movs	r1, #9
 80012b6:	2008      	movs	r0, #8
 80012b8:	f7ff fe90 	bl	8000fdc <fncSend_CommandAT>
          break;
 80012bc:	e0ad      	b.n	800141a <main+0x252>
 	 case CMD_GET_IPADDR:
 		  fncSend_CommandAT(CMD_GET_IPADDR, CMD_CREATE_TCP);
 80012be:	210a      	movs	r1, #10
 80012c0:	2009      	movs	r0, #9
 80012c2:	f7ff fe8b 	bl	8000fdc <fncSend_CommandAT>
          break;
 80012c6:	e0a8      	b.n	800141a <main+0x252>
 	 case CMD_CREATE_TCP:
 		  fncSend_CommandAT(CMD_CREATE_TCP, CHECK_CMD_CIPOPQUERY);
 80012c8:	210b      	movs	r1, #11
 80012ca:	200a      	movs	r0, #10
 80012cc:	f7ff fe86 	bl	8000fdc <fncSend_CommandAT>
          break;
 80012d0:	e0a3      	b.n	800141a <main+0x252>
 	 case CHECK_CMD_CIPOPQUERY:
 		  fncSend_CommandAT(CHECK_CMD_CIPOPQUERY, CMD_SEND_DATA);
 80012d2:	210c      	movs	r1, #12
 80012d4:	200b      	movs	r0, #11
 80012d6:	f7ff fe81 	bl	8000fdc <fncSend_CommandAT>
          break;
 80012da:	e09e      	b.n	800141a <main+0x252>
 	 case CMD_SEND_DATA:
 		 if(1 == sTimer_10s.flag_timer){
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <main+0x278>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d110      	bne.n	8001308 <main+0x140>
 			result = fncSend_DataServer(CMD_SEND_DATA, arr, 24);
 80012e6:	2218      	movs	r2, #24
 80012e8:	4956      	ldr	r1, [pc, #344]	; (8001444 <main+0x27c>)
 80012ea:	200c      	movs	r0, #12
 80012ec:	f7ff feb4 	bl	8001058 <fncSend_DataServer>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b54      	ldr	r3, [pc, #336]	; (8001448 <main+0x280>)
 80012f6:	601a      	str	r2, [r3, #0]
 			if(0 == result){
 80012f8:	4b53      	ldr	r3, [pc, #332]	; (8001448 <main+0x280>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 808b 	beq.w	8001418 <main+0x250>
 				break;
 			}
 			sTimer_10s.flag_timer = 0;
 8001302:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <main+0x278>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
 		 }
 		 	gsm_state = CMD_RECEIVE_DATA;
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <main+0x274>)
 800130a:	220d      	movs	r2, #13
 800130c:	701a      	strb	r2, [r3, #0]
 		 break;
 800130e:	e084      	b.n	800141a <main+0x252>

 	 case CMD_RECEIVE_DATA:
 		if(1 == sTimer_1000ms.flag_timer){
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <main+0x284>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d102      	bne.n	8001320 <main+0x158>
 			sTimer_1000ms.flag_timer = 0;
 800131a:	4b4c      	ldr	r3, [pc, #304]	; (800144c <main+0x284>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
 		}
 			fncReceive_DataServer(CMD_RECEIVE_DATA);
 8001320:	200d      	movs	r0, #13
 8001322:	f7ff ff01 	bl	8001128 <fncReceive_DataServer>
 			gsm_state = CMD_REVPROCESS;
 8001326:	4b45      	ldr	r3, [pc, #276]	; (800143c <main+0x274>)
 8001328:	220e      	movs	r2, #14
 800132a:	701a      	strb	r2, [r3, #0]
 		break;
 800132c:	e075      	b.n	800141a <main+0x252>

 	 case CMD_REVPROCESS:
 		 if(1 == sTimer_500ms.flag_timer){
 800132e:	4b48      	ldr	r3, [pc, #288]	; (8001450 <main+0x288>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d158      	bne.n	80013ea <main+0x222>
 			if(arrRevProcess[vr_test-1] == 1){
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <main+0x28c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	3b01      	subs	r3, #1
 800133e:	4a46      	ldr	r2, [pc, #280]	; (8001458 <main+0x290>)
 8001340:	5cd3      	ldrb	r3, [r2, r3]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d112      	bne.n	800136c <main+0x1a4>
 				takeTime((uint8_t*)arrRevProcess);
 8001346:	4844      	ldr	r0, [pc, #272]	; (8001458 <main+0x290>)
 8001348:	f000 fcf6 	bl	8001d38 <takeTime>
 				HAL_RTC_SetTime(&hrtc, &sTime2, RTC_FORMAT_BCD);
 800134c:	2201      	movs	r2, #1
 800134e:	4943      	ldr	r1, [pc, #268]	; (800145c <main+0x294>)
 8001350:	4843      	ldr	r0, [pc, #268]	; (8001460 <main+0x298>)
 8001352:	f002 fc6a 	bl	8003c2a <HAL_RTC_SetTime>
 				HAL_RTC_SetDate(&hrtc, &sDate2, RTC_FORMAT_BCD);
 8001356:	2201      	movs	r2, #1
 8001358:	4942      	ldr	r1, [pc, #264]	; (8001464 <main+0x29c>)
 800135a:	4841      	ldr	r0, [pc, #260]	; (8001460 <main+0x298>)
 800135c:	f002 fd5e 	bl	8003e1c <HAL_RTC_SetDate>
 				memset(arrRevProcess, '\0', 256);
 8001360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001364:	2100      	movs	r1, #0
 8001366:	483c      	ldr	r0, [pc, #240]	; (8001458 <main+0x290>)
 8001368:	f004 fb28 	bl	80059bc <memset>
 			}
 			if(arrRevProcess[vr_test-1] == 2){
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <main+0x28c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a39      	ldr	r2, [pc, #228]	; (8001458 <main+0x290>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d124      	bne.n	80013c4 <main+0x1fc>
 				time_conv = convertTimeSendSV(arrRevProcess[vr_test-2]);
 800137a:	4b36      	ldr	r3, [pc, #216]	; (8001454 <main+0x28c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	3b02      	subs	r3, #2
 8001380:	4a35      	ldr	r2, [pc, #212]	; (8001458 <main+0x290>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fe09 	bl	8001f9c <convertTimeSendSV>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <main+0x2a0>)
 8001390:	601a      	str	r2, [r3, #0]
 				time_sendServer = time_conv / 0.001;
 8001392:	4b35      	ldr	r3, [pc, #212]	; (8001468 <main+0x2a0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f868 	bl	800046c <__aeabi_ui2d>
 800139c:	a320      	add	r3, pc, #128	; (adr r3, 8001420 <main+0x258>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff fa07 	bl	80007b4 <__aeabi_ddiv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	4618      	mov	r0, r3
 80013ac:	4621      	mov	r1, r4
 80013ae:	f7ff fae9 	bl	8000984 <__aeabi_d2uiz>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <main+0x2a4>)
 80013b6:	601a      	str	r2, [r3, #0]
 				memset(arrRevProcess, '\0', 256);
 80013b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013bc:	2100      	movs	r1, #0
 80013be:	4826      	ldr	r0, [pc, #152]	; (8001458 <main+0x290>)
 80013c0:	f004 fafc 	bl	80059bc <memset>
 			}
 				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80013c4:	2201      	movs	r2, #1
 80013c6:	492a      	ldr	r1, [pc, #168]	; (8001470 <main+0x2a8>)
 80013c8:	4825      	ldr	r0, [pc, #148]	; (8001460 <main+0x298>)
 80013ca:	f002 fccb 	bl	8003d64 <HAL_RTC_GetTime>
 				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <main+0x2ac>)
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <main+0x298>)
 80013d4:	f002 fda9 	bl	8003f2a <HAL_RTC_GetDate>
 				convertTime(arr, num);
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <main+0x2b0>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	4819      	ldr	r0, [pc, #100]	; (8001444 <main+0x27c>)
 80013e0:	f000 fcd0 	bl	8001d84 <convertTime>
 				sTimer_500ms.flag_timer = 0;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <main+0x288>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
 		}
 		gsm_state = CMD_TRANSRTC;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <main+0x274>)
 80013ec:	220f      	movs	r2, #15
 80013ee:	701a      	strb	r2, [r3, #0]
 		break;
 80013f0:	e013      	b.n	800141a <main+0x252>

 	 case CMD_TRANSRTC:
 			 if(1 == sTimer_7000ms.flag_timer){
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <main+0x2b4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d109      	bne.n	8001410 <main+0x248>
 				  HAL_UART_Transmit(&huart1, arr, 17, 1000);
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	2211      	movs	r2, #17
 8001402:	4910      	ldr	r1, [pc, #64]	; (8001444 <main+0x27c>)
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <main+0x26c>)
 8001406:	f003 fb45 	bl	8004a94 <HAL_UART_Transmit>
 				 sTimer_7000ms.flag_timer = 0;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <main+0x2b4>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 			 }
 		gsm_state = CMD_SEND_DATA;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <main+0x274>)
 8001412:	220c      	movs	r2, #12
 8001414:	701a      	strb	r2, [r3, #0]
 		break;
 8001416:	e000      	b.n	800141a <main+0x252>
 				break;
 8001418:	bf00      	nop
  switch (gsm_state){
 800141a:	e6f2      	b.n	8001202 <main+0x3a>
 800141c:	f3af 8000 	nop.w
 8001420:	d2f1a9fc 	.word	0xd2f1a9fc
 8001424:	3f50624d 	.word	0x3f50624d
 8001428:	20000160 	.word	0x20000160
 800142c:	200003a4 	.word	0x200003a4
 8001430:	200005e0 	.word	0x200005e0
 8001434:	20000460 	.word	0x20000460
 8001438:	20000614 	.word	0x20000614
 800143c:	20000054 	.word	0x20000054
 8001440:	20000458 	.word	0x20000458
 8001444:	200002a4 	.word	0x200002a4
 8001448:	20000608 	.word	0x20000608
 800144c:	20000660 	.word	0x20000660
 8001450:	2000060c 	.word	0x2000060c
 8001454:	2000026c 	.word	0x2000026c
 8001458:	20000168 	.word	0x20000168
 800145c:	20000288 	.word	0x20000288
 8001460:	200005e4 	.word	0x200005e4
 8001464:	2000029c 	.word	0x2000029c
 8001468:	20000164 	.word	0x20000164
 800146c:	20000050 	.word	0x20000050
 8001470:	20000270 	.word	0x20000270
 8001474:	20000284 	.word	0x20000284
 8001478:	2000026a 	.word	0x2000026a
 800147c:	20000668 	.word	0x20000668

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0b0      	sub	sp, #192	; 0xc0
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800148a:	2244      	movs	r2, #68	; 0x44
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fa94 	bl	80059bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2268      	movs	r2, #104	; 0x68
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fa86 	bl	80059bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014b0:	f001 f94e 	bl	8002750 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <SystemClock_Config+0xe0>)
 80014b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <SystemClock_Config+0xe0>)
 80014bc:	f023 0318 	bic.w	r3, r3, #24
 80014c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80014c4:	2306      	movs	r3, #6
 80014c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d6:	2340      	movs	r3, #64	; 0x40
 80014d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f9a6 	bl	8002838 <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80014f2:	f000 fa31 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014fa:	2301      	movs	r3, #1
 80014fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800150a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fdb1 	bl	8003078 <HAL_RCC_ClockConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800151c:	f000 fa1c 	bl	8001958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <SystemClock_Config+0xe4>)
 8001522:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800152c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001530:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4618      	mov	r0, r3
 8001536:	f001 ffa3 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001540:	f000 fa0a 	bl	8001958 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001544:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001548:	f001 f920 	bl	800278c <HAL_PWREx_ControlVoltageScaling>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001552:	f000 fa01 	bl	8001958 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	37c0      	adds	r7, #192	; 0xc0
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	00020005 	.word	0x00020005

08001568 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800157c:	2300      	movs	r3, #0
 800157e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <MX_RTC_Init+0xb0>)
 8001582:	4a26      	ldr	r2, [pc, #152]	; (800161c <MX_RTC_Init+0xb4>)
 8001584:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <MX_RTC_Init+0xb0>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MX_RTC_Init+0xb0>)
 800158e:	227f      	movs	r2, #127	; 0x7f
 8001590:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_RTC_Init+0xb0>)
 8001594:	22ff      	movs	r2, #255	; 0xff
 8001596:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_RTC_Init+0xb0>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_RTC_Init+0xb0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_RTC_Init+0xb0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_RTC_Init+0xb0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b0:	4819      	ldr	r0, [pc, #100]	; (8001618 <MX_RTC_Init+0xb0>)
 80015b2:	f002 fabf 	bl	8003b34 <HAL_RTC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f9cc 	bl	8001958 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2201      	movs	r2, #1
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <MX_RTC_Init+0xb0>)
 80015dc:	f002 fb25 	bl	8003c2a <HAL_RTC_SetTime>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80015e6:	f000 f9b7 	bl	8001958 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015ea:	2301      	movs	r3, #1
 80015ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80015ee:	2301      	movs	r3, #1
 80015f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_RTC_Init+0xb0>)
 8001602:	f002 fc0b 	bl	8003e1c <HAL_RTC_SetDate>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800160c:	f000 f9a4 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200005e4 	.word	0x200005e4
 800161c:	40002800 	.word	0x40002800

08001620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <MX_TIM2_Init+0x98>)
 8001640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_TIM2_Init+0x98>)
 8001648:	220f      	movs	r2, #15
 800164a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM2_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_TIM2_Init+0x98>)
 8001654:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_TIM2_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_TIM2_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MX_TIM2_Init+0x98>)
 8001668:	f002 fd7e 	bl	8004168 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001672:	f000 f971 	bl	8001958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_TIM2_Init+0x98>)
 8001684:	f002 ff43 	bl	800450e <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800168e:	f000 f963 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <MX_TIM2_Init+0x98>)
 80016a0:	f003 f91e 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016aa:	f000 f955 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000614 	.word	0x20000614

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <MX_USART1_UART_Init+0x5c>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART1_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_USART1_UART_Init+0x58>)
 8001700:	f003 f97a 	bl	80049f8 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800170a:	f000 f925 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000460 	.word	0x20000460
 8001718:	40013800 	.word	0x40013800

0800171c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <MX_USART3_UART_Init+0x5c>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USART3_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USART3_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USART3_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USART3_UART_Init+0x58>)
 8001760:	f003 f94a 	bl	80049f8 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800176a:	f000 f8f5 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200003a4 	.word	0x200003a4
 8001778:	40004800 	.word	0x40004800

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_GPIO_Init+0xb4>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_GPIO_Init+0xb4>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a20      	ldr	r2, [pc, #128]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_GPIO_Init+0xb4>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2108      	movs	r1, #8
 80017de:	4815      	ldr	r0, [pc, #84]	; (8001834 <MX_GPIO_Init+0xb8>)
 80017e0:	f000 ff84 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2109      	movs	r1, #9
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <MX_GPIO_Init+0xbc>)
 80017ea:	f000 ff7f 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ee:	2308      	movs	r3, #8
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <MX_GPIO_Init+0xb8>)
 8001806:	f000 fdf7 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800180a:	2309      	movs	r3, #9
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_GPIO_Init+0xbc>)
 8001822:	f000 fde9 	bl	80023f8 <HAL_GPIO_Init>

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	48000800 	.word	0x48000800
 8001838:	48000400 	.word	0x48000400

0800183c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d145      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x9e>
	{
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 800184e:	2108      	movs	r1, #8
 8001850:	4824      	ldr	r0, [pc, #144]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001852:	f000 ff63 	bl	800271c <HAL_GPIO_TogglePin>
		  sTimer_10s.vr_count ++;
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800185e:	6053      	str	r3, [r2, #4]
		  sTimer_1000ms.vr_count ++;
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	3301      	adds	r3, #1
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001868:	6053      	str	r3, [r2, #4]
		  sTimer_500ms.vr_count ++;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001872:	6053      	str	r3, [r2, #4]
		  sTimer_7000ms.vr_count ++;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	3301      	adds	r3, #1
 800187a:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800187c:	6053      	str	r3, [r2, #4]

		  if(sTimer_10s.vr_count == time_sendServer){
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d105      	bne.n	8001896 <HAL_TIM_PeriodElapsedCallback+0x5a>
			  sTimer_10s.flag_timer = 1; // timer du 10s thi gui du lieu len server
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
			  sTimer_10s.vr_count = 0;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
		  }
		  if(1000 == sTimer_1000ms.vr_count){
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189e:	d105      	bne.n	80018ac <HAL_TIM_PeriodElapsedCallback+0x70>
			  sTimer_1000ms.flag_timer = 1; // timer du 1000ms
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
			  sTimer_1000ms.vr_count = 0;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
		  }
		  if(500 == sTimer_500ms.vr_count){
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018b4:	d105      	bne.n	80018c2 <HAL_TIM_PeriodElapsedCallback+0x86>
			  sTimer_500ms.flag_timer = 1; // timer du 500ms
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
			  sTimer_500ms.vr_count = 0;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
		  }
		  if(7000 ==  sTimer_7000ms.vr_count){ // timer du 7s
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d105      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x9e>
			  sTimer_7000ms.flag_timer = 1;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
			  sTimer_7000ms.vr_count = 0;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
		  }
	}
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	48000800 	.word	0x48000800
 80018e8:	20000458 	.word	0x20000458
 80018ec:	20000660 	.word	0x20000660
 80018f0:	2000060c 	.word	0x2000060c
 80018f4:	20000668 	.word	0x20000668
 80018f8:	20000050 	.word	0x20000050

080018fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_UART_RxCpltCallback+0x48>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d115      	bne.n	800193a <HAL_UART_RxCpltCallback+0x3e>
	{
		if(data != 0){
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_UART_RxCpltCallback+0x4c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d011      	beq.n	800193a <HAL_UART_RxCpltCallback+0x3e>
		buffer[indexBuffer] = data;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_UART_RxCpltCallback+0x50>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_UART_RxCpltCallback+0x4c>)
 800191e:	7819      	ldrb	r1, [r3, #0]
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_UART_RxCpltCallback+0x54>)
 8001922:	5499      	strb	r1, [r3, r2]
		indexBuffer++;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_UART_RxCpltCallback+0x50>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_UART_RxCpltCallback+0x50>)
 800192e:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&huart1, (uint8_t *)&Data, 1);
		HAL_UART_Receive_IT(&huart3, &data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4905      	ldr	r1, [pc, #20]	; (8001948 <HAL_UART_RxCpltCallback+0x4c>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x58>)
 8001936:	f003 f941 	bl	8004bbc <HAL_UART_Receive_IT>
		}
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40004800 	.word	0x40004800
 8001948:	20000160 	.word	0x20000160
 800194c:	20000161 	.word	0x20000161
 8001950:	200004e0 	.word	0x200004e0
 8001954:	200003a4 	.word	0x200003a4

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x44>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6613      	str	r3, [r2, #96]	; 0x60
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_MspInit+0x44>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_MspInit+0x44>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_MspInit+0x44>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_RTC_MspInit+0x30>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d107      	bne.n	80019d2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_RTC_MspInit+0x34>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_RTC_MspInit+0x34>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40002800 	.word	0x40002800
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f8:	d113      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_TIM_Base_MspInit+0x44>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_TIM_Base_MspInit+0x44>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6593      	str	r3, [r2, #88]	; 0x58
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_TIM_Base_MspInit+0x44>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	201c      	movs	r0, #28
 8001a18:	f000 fc77 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f000 fc90 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <HAL_UART_MspInit+0xfc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d132      	bne.n	8001ab8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a36      	ldr	r2, [pc, #216]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a94:	2307      	movs	r3, #7
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 031c 	add.w	r3, r7, #28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f000 fca9 	bl	80023f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2025      	movs	r0, #37	; 0x25
 8001aac:	f000 fc2d 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab0:	2025      	movs	r0, #37	; 0x25
 8001ab2:	f000 fc46 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab6:	e035      	b.n	8001b24 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_UART_MspInit+0x104>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d130      	bne.n	8001b24 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001af2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b04:	2307      	movs	r3, #7
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480a      	ldr	r0, [pc, #40]	; (8001b38 <HAL_UART_MspInit+0x108>)
 8001b10:	f000 fc72 	bl	80023f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2027      	movs	r0, #39	; 0x27
 8001b1a:	f000 fbf6 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b1e:	2027      	movs	r0, #39	; 0x27
 8001b20:	f000 fc0f 	bl	8002342 <HAL_NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	; 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40004800 	.word	0x40004800
 8001b38:	48000400 	.word	0x48000400

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b90:	f000 fa9e 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM2_IRQHandler+0x10>)
 8001b9e:	f002 fb97 	bl	80042d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000614 	.word	0x20000614

08001bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <USART1_IRQHandler+0x10>)
 8001bb2:	f003 f8a5 	bl	8004d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000460 	.word	0x20000460

08001bc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <USART3_IRQHandler+0x10>)
 8001bc6:	f003 f89b 	bl	8004d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003a4 	.word	0x200003a4

08001bd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <SystemInit+0x64>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <SystemInit+0x64>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <SystemInit+0x68>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <SystemInit+0x68>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <SystemInit+0x68>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <SystemInit+0x68>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <SystemInit+0x68>)
 8001c00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <SystemInit+0x68>)
 8001c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <SystemInit+0x68>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <SystemInit+0x68>)
 8001c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <SystemInit+0x68>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SystemInit+0x64>)
 8001c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00
 8001c3c:	40021000 	.word	0x40021000

08001c40 <wait_to_reinitial>:

extern RTC_TimeTypeDef sTime2;
extern RTC_DateTypeDef sDate2;

// ham cho de khoi tao lai
void wait_to_reinitial(uint8_t time){
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
		count++;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <wait_to_reinitial+0x38>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <wait_to_reinitial+0x38>)
 8001c54:	701a      	strb	r2, [r3, #0]
		 if(count == time){
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <wait_to_reinitial+0x38>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	79fa      	ldrb	r2, [r7, #7]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d105      	bne.n	8001c6c <wait_to_reinitial+0x2c>
		  	gsm_state = CMD_PWNON;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <wait_to_reinitial+0x3c>)
 8001c62:	22ff      	movs	r2, #255	; 0xff
 8001c64:	701a      	strb	r2, [r3, #0]
		  	count = 0;
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <wait_to_reinitial+0x38>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
		  }
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	20000268 	.word	0x20000268
 8001c7c:	20000054 	.word	0x20000054

08001c80 <wait_to_reinitialTCP>:

// ham quay lai khoi tao TCP
void wait_to_reinitialTCP(uint8_t time){
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
		count++;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <wait_to_reinitialTCP+0x38>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <wait_to_reinitialTCP+0x38>)
 8001c94:	701a      	strb	r2, [r3, #0]
		 if(count == time){
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <wait_to_reinitialTCP+0x38>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d105      	bne.n	8001cac <wait_to_reinitialTCP+0x2c>
		  	gsm_state = CMD_CREATE_TCP;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <wait_to_reinitialTCP+0x3c>)
 8001ca2:	220a      	movs	r2, #10
 8001ca4:	701a      	strb	r2, [r3, #0]
		  	count = 0;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <wait_to_reinitialTCP+0x38>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
		  }
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000268 	.word	0x20000268
 8001cbc:	20000054 	.word	0x20000054

08001cc0 <processChar>:

void processChar(char *strInput, uint8_t chr, char strRes[]){		// ham xu ly chuoi nhan ve
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	72fb      	strb	r3, [r7, #11]
	char *ptr1, *ptr2;
	ptr1 = strchr(strInput, chr);
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f003 fe7a 	bl	80059cc <strchr>
 8001cd8:	6178      	str	r0, [r7, #20]
	ptr1 = strchr(ptr1+1,chr);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	7afa      	ldrb	r2, [r7, #11]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fe72 	bl	80059cc <strchr>
 8001ce8:	6178      	str	r0, [r7, #20]
	ptr1 = strchr(ptr1+1,chr);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	7afa      	ldrb	r2, [r7, #11]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fe6a 	bl	80059cc <strchr>
 8001cf8:	6178      	str	r0, [r7, #20]
	ptr1 = strchr(ptr1+1,chr);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	7afa      	ldrb	r2, [r7, #11]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fe62 	bl	80059cc <strchr>
 8001d08:	6178      	str	r0, [r7, #20]
	ptr2 = strchr(ptr1+1,chr);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	7afa      	ldrb	r2, [r7, #11]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f003 fe5a 	bl	80059cc <strchr>
 8001d18:	6138      	str	r0, [r7, #16]
	memcpy(strRes, ptr1+1, ptr2-ptr1-2);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	1c59      	adds	r1, r3, #1
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	3b02      	subs	r3, #2
 8001d26:	461a      	mov	r2, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f003 fe3c 	bl	80059a6 <memcpy>
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <takeTime>:

void takeTime(uint8_t *sv_time){
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	 sTime2.Seconds = *(sv_time+0);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <takeTime+0x44>)
 8001d46:	709a      	strb	r2, [r3, #2]
	 sTime2.Minutes = *(sv_time+1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	785a      	ldrb	r2, [r3, #1]
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <takeTime+0x44>)
 8001d4e:	705a      	strb	r2, [r3, #1]
	 sTime2.Hours = *(sv_time+2);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	789a      	ldrb	r2, [r3, #2]
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <takeTime+0x44>)
 8001d56:	701a      	strb	r2, [r3, #0]
	 sDate2.Date = *(sv_time+3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	78da      	ldrb	r2, [r3, #3]
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <takeTime+0x48>)
 8001d5e:	709a      	strb	r2, [r3, #2]
	 sDate2.Month = *(sv_time+4);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	791a      	ldrb	r2, [r3, #4]
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <takeTime+0x48>)
 8001d66:	705a      	strb	r2, [r3, #1]
	 sDate2.Year = *(sv_time+5);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	795a      	ldrb	r2, [r3, #5]
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <takeTime+0x48>)
 8001d6e:	70da      	strb	r2, [r3, #3]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	20000288 	.word	0x20000288
 8001d80:	2000029c 	.word	0x2000029c

08001d84 <convertTime>:

void convertTime(uint8_t *p_time, uint16_t index){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  		*(p_time+0) = (sTime.Hours/16)+48;
 8001d90:	4b7d      	ldr	r3, [pc, #500]	; (8001f88 <convertTime+0x204>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3330      	adds	r3, #48	; 0x30
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	701a      	strb	r2, [r3, #0]
  		*(p_time+1) = (sTime.Hours%16)+48;
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <convertTime+0x204>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3301      	adds	r3, #1
 8001dae:	3230      	adds	r2, #48	; 0x30
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]
  		*(p_time+2) = '-';
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3302      	adds	r3, #2
 8001db8:	222d      	movs	r2, #45	; 0x2d
 8001dba:	701a      	strb	r2, [r3, #0]
  		*(p_time+3) = (sTime.Minutes/16)+48;
 8001dbc:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <convertTime+0x204>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3303      	adds	r3, #3
 8001dc8:	3230      	adds	r2, #48	; 0x30
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
  		*(p_time+4) = (sTime.Minutes%16)+48;
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <convertTime+0x204>)
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	3230      	adds	r2, #48	; 0x30
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	701a      	strb	r2, [r3, #0]
  		*(p_time+5) = '-';
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3305      	adds	r3, #5
 8001de6:	222d      	movs	r2, #45	; 0x2d
 8001de8:	701a      	strb	r2, [r3, #0]
	  	*(p_time+6) = (sTime.Seconds/16)+48;
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <convertTime+0x204>)
 8001dec:	789b      	ldrb	r3, [r3, #2]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3306      	adds	r3, #6
 8001df6:	3230      	adds	r2, #48	; 0x30
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]
	  	*(p_time+7) = (sTime.Seconds%16)+48;
 8001dfc:	4b62      	ldr	r3, [pc, #392]	; (8001f88 <convertTime+0x204>)
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3307      	adds	r3, #7
 8001e0a:	3230      	adds	r2, #48	; 0x30
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]
	  	*(p_time+8) = ' ';
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3308      	adds	r3, #8
 8001e14:	2220      	movs	r2, #32
 8001e16:	701a      	strb	r2, [r3, #0]
	  	*(p_time+9) = (sDate.Date/16)+48;
 8001e18:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <convertTime+0x208>)
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3309      	adds	r3, #9
 8001e24:	3230      	adds	r2, #48	; 0x30
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]
	  	*(p_time+10) = (sDate.Date%16)+48;
 8001e2a:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <convertTime+0x208>)
 8001e2c:	789b      	ldrb	r3, [r3, #2]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	330a      	adds	r3, #10
 8001e38:	3230      	adds	r2, #48	; 0x30
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
	  	*(p_time+11) = '/';
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	330b      	adds	r3, #11
 8001e42:	222f      	movs	r2, #47	; 0x2f
 8001e44:	701a      	strb	r2, [r3, #0]
	  	*(p_time+12) = (sDate.Month/16)+48;
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <convertTime+0x208>)
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	330c      	adds	r3, #12
 8001e52:	3230      	adds	r2, #48	; 0x30
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
	  	*(p_time+13) = (sDate.Month%16)+48;
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <convertTime+0x208>)
 8001e5a:	785b      	ldrb	r3, [r3, #1]
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	330d      	adds	r3, #13
 8001e66:	3230      	adds	r2, #48	; 0x30
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
	  	*(p_time+14) = '/';
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	330e      	adds	r3, #14
 8001e70:	222f      	movs	r2, #47	; 0x2f
 8001e72:	701a      	strb	r2, [r3, #0]
	  	*(p_time+15) = (sDate.Year/16)+48;
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <convertTime+0x208>)
 8001e76:	78db      	ldrb	r3, [r3, #3]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	330f      	adds	r3, #15
 8001e80:	3230      	adds	r2, #48	; 0x30
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
	  	*(p_time+16) = (sDate.Year%16)+48;
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <convertTime+0x208>)
 8001e88:	78db      	ldrb	r3, [r3, #3]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3310      	adds	r3, #16
 8001e94:	3230      	adds	r2, #48	; 0x30
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
	  	*(p_time+17) = ' ';
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3311      	adds	r3, #17
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	701a      	strb	r2, [r3, #0]
	  	*(p_time+18) = (index/1000)+48;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <convertTime+0x20c>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3312      	adds	r3, #18
 8001eb4:	3230      	adds	r2, #48	; 0x30
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]
		*(p_time+19) = ((index%1000)/100)+48;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	4a34      	ldr	r2, [pc, #208]	; (8001f90 <convertTime+0x20c>)
 8001ebe:	fba2 1203 	umull	r1, r2, r2, r3
 8001ec2:	0992      	lsrs	r2, r2, #6
 8001ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec8:	fb01 f202 	mul.w	r2, r1, r2
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <convertTime+0x210>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3313      	adds	r3, #19
 8001ee0:	3230      	adds	r2, #48	; 0x30
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
		*(p_time+20) = (((index%1000)%100)/10)+48;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <convertTime+0x20c>)
 8001eea:	fba2 1203 	umull	r1, r2, r2, r3
 8001eee:	0992      	lsrs	r2, r2, #6
 8001ef0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ef4:	fb01 f202 	mul.w	r2, r1, r2
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <convertTime+0x210>)
 8001efe:	fba2 1203 	umull	r1, r2, r2, r3
 8001f02:	0952      	lsrs	r2, r2, #5
 8001f04:	2164      	movs	r1, #100	; 0x64
 8001f06:	fb01 f202 	mul.w	r2, r1, r2
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4a22      	ldr	r2, [pc, #136]	; (8001f98 <convertTime+0x214>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3314      	adds	r3, #20
 8001f1e:	3230      	adds	r2, #48	; 0x30
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
		*(p_time+21) = (((index%1000)%100)%10)+48;
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <convertTime+0x20c>)
 8001f28:	fba2 1203 	umull	r1, r2, r2, r3
 8001f2c:	0992      	lsrs	r2, r2, #6
 8001f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f32:	fb01 f202 	mul.w	r2, r1, r2
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <convertTime+0x210>)
 8001f3c:	fba2 1203 	umull	r1, r2, r2, r3
 8001f40:	0952      	lsrs	r2, r2, #5
 8001f42:	2164      	movs	r1, #100	; 0x64
 8001f44:	fb01 f202 	mul.w	r2, r1, r2
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <convertTime+0x214>)
 8001f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8001f52:	08d9      	lsrs	r1, r3, #3
 8001f54:	460b      	mov	r3, r1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3315      	adds	r3, #21
 8001f66:	3230      	adds	r2, #48	; 0x30
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]
	  	*(p_time+22) = '\r';
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3316      	adds	r3, #22
 8001f70:	220d      	movs	r2, #13
 8001f72:	701a      	strb	r2, [r3, #0]
		*(p_time+23) = '\n';
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3317      	adds	r3, #23
 8001f78:	220a      	movs	r2, #10
 8001f7a:	701a      	strb	r2, [r3, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20000270 	.word	0x20000270
 8001f8c:	20000284 	.word	0x20000284
 8001f90:	10624dd3 	.word	0x10624dd3
 8001f94:	51eb851f 	.word	0x51eb851f
 8001f98:	cccccccd 	.word	0xcccccccd

08001f9c <convertTimeSendSV>:

uint8_t convertTimeSendSV(uint8_t vrBCD){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
		uint8_t lowByte = (vrBCD & 0x0F);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	73fb      	strb	r3, [r7, #15]
		uint8_t highByte = ((vrBCD >> 4) & 0x0F);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	73bb      	strb	r3, [r7, #14]
		return 	(10*highByte + lowByte);
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b2db      	uxtb	r3, r3
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff fdfc 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fde:	e003      	b.n	8001fe8 <LoopCopyDataInit>

08001fe0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fe2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fe4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fe6:	3104      	adds	r1, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fe8:	480a      	ldr	r0, [pc, #40]	; (8002014 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ff0:	d3f6      	bcc.n	8001fe0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ff4:	e002      	b.n	8001ffc <LoopFillZerobss>

08001ff6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ff6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ff8:	f842 3b04 	str.w	r3, [r2], #4

08001ffc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <LoopForever+0x16>)
	cmp	r2, r3
 8001ffe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002000:	d3f9      	bcc.n	8001ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f003 fc9d 	bl	8005940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002006:	f7ff f8df 	bl	80011c8 <main>

0800200a <LoopForever>:

LoopForever:
    b LoopForever
 800200a:	e7fe      	b.n	800200a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800200c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002010:	08005c14 	.word	0x08005c14
	ldr	r0, =_sdata
 8002014:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002018:	20000144 	.word	0x20000144
	ldr	r2, =_sbss
 800201c:	20000144 	.word	0x20000144
	ldr	r3, = _ebss
 8002020:	20000674 	.word	0x20000674

08002024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_IRQHandler>

08002026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f95f 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f80e 	bl	8002058 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	e001      	b.n	800204c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002048:	f7ff fc8e 	bl	8001968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204c:	79fb      	ldrb	r3, [r7, #7]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_InitTick+0x6c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d023      	beq.n	80020b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_InitTick+0x70>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_InitTick+0x6c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f96b 	bl	800235e <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b0f      	cmp	r3, #15
 8002092:	d809      	bhi.n	80020a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002094:	2200      	movs	r2, #0
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f000 f935 	bl	800230a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_InitTick+0x74>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e007      	b.n	80020b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e004      	b.n	80020b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e001      	b.n	80020b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000140 	.word	0x20000140
 80020c8:	20000138 	.word	0x20000138
 80020cc:	2000013c 	.word	0x2000013c

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000140 	.word	0x20000140
 80020f4:	20000670 	.word	0x20000670

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000670 	.word	0x20000670

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_Delay+0x40>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffde 	bl	80020f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000140 	.word	0x20000140

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d005      	beq.n	800239a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2204      	movs	r2, #4
 8002392:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e029      	b.n	80023ee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 020e 	bic.w	r2, r2, #14
 80023a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f003 021c 	and.w	r2, r3, #28
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f202 	lsl.w	r2, r1, r2
 80023cc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
    }
  }
  return status;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e154      	b.n	80026b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2101      	movs	r1, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8146 	beq.w	80026ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d00b      	beq.n	8002440 <HAL_GPIO_Init+0x48>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d007      	beq.n	8002440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002434:	2b11      	cmp	r3, #17
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b12      	cmp	r3, #18
 800243e:	d130      	bne.n	80024a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f003 0201 	and.w	r2, r3, #1
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0xea>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	d123      	bne.n	800252a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	6939      	ldr	r1, [r7, #16]
 8002526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0203 	and.w	r2, r3, #3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a0 	beq.w	80026ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256c:	4b58      	ldr	r3, [pc, #352]	; (80026d0 <HAL_GPIO_Init+0x2d8>)
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_GPIO_Init+0x2d8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6613      	str	r3, [r2, #96]	; 0x60
 8002578:	4b55      	ldr	r3, [pc, #340]	; (80026d0 <HAL_GPIO_Init+0x2d8>)
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002584:	4a53      	ldr	r2, [pc, #332]	; (80026d4 <HAL_GPIO_Init+0x2dc>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ae:	d019      	beq.n	80025e4 <HAL_GPIO_Init+0x1ec>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a49      	ldr	r2, [pc, #292]	; (80026d8 <HAL_GPIO_Init+0x2e0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1e8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a48      	ldr	r2, [pc, #288]	; (80026dc <HAL_GPIO_Init+0x2e4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1e4>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <HAL_GPIO_Init+0x2e8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1e0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a46      	ldr	r2, [pc, #280]	; (80026e4 <HAL_GPIO_Init+0x2ec>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1dc>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e008      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025d4:	2307      	movs	r3, #7
 80025d6:	e006      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025d8:	2303      	movs	r3, #3
 80025da:	e004      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025dc:	2302      	movs	r3, #2
 80025de:	e002      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_GPIO_Init+0x1ee>
 80025e4:	2300      	movs	r3, #0
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	f002 0203 	and.w	r2, r2, #3
 80025ec:	0092      	lsls	r2, r2, #2
 80025ee:	4093      	lsls	r3, r2
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025f6:	4937      	ldr	r1, [pc, #220]	; (80026d4 <HAL_GPIO_Init+0x2dc>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002604:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002628:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_GPIO_Init+0x2f0>)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3301      	adds	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	fa22 f303 	lsr.w	r3, r2, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f47f aea3 	bne.w	8002408 <HAL_GPIO_Init+0x10>
  }
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40010000 	.word	0x40010000
 80026d8:	48000400 	.word	0x48000400
 80026dc:	48000800 	.word	0x48000800
 80026e0:	48000c00 	.word	0x48000c00
 80026e4:	48001000 	.word	0x48001000
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002708:	e002      	b.n	8002710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43d9      	mvns	r1, r3
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	400b      	ands	r3, r1
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a04      	ldr	r2, [pc, #16]	; (800276c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40007000 	.word	0x40007000

08002770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_PWREx_GetVoltageRange+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40007000 	.word	0x40007000

0800278c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279a:	d130      	bne.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a8:	d038      	beq.n	800281c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ba:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2232      	movs	r2, #50	; 0x32
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d0:	e002      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e4:	d102      	bne.n	80027ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f2      	bne.n	80027d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	d110      	bne.n	800281c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e00f      	b.n	800281e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d007      	beq.n	800281c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002814:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800281a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000
 8002830:	20000138 	.word	0x20000138
 8002834:	431bde83 	.word	0x431bde83

08002838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f000 bc11 	b.w	800306e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800284c:	4ba0      	ldr	r3, [pc, #640]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002856:	4b9e      	ldr	r3, [pc, #632]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80e4 	beq.w	8002a36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_RCC_OscConfig+0x4c>
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	f040 808b 	bne.w	8002992 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 8087 	bne.w	8002992 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002884:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_OscConfig+0x64>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e3e8      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <HAL_RCC_OscConfig+0x7e>
 80028ac:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	e005      	b.n	80028c2 <HAL_RCC_OscConfig+0x8a>
 80028b6:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d223      	bcs.n	800290e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fd78 	bl	80033c0 <RCC_SetFlashLatencyFromMSIRange>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e3c9      	b.n	800306e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028da:	4b7d      	ldr	r3, [pc, #500]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7c      	ldr	r2, [pc, #496]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4977      	ldr	r1, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f8:	4b75      	ldr	r3, [pc, #468]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	4972      	ldr	r1, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e025      	b.n	800295a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	496a      	ldr	r1, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	4965      	ldr	r1, [pc, #404]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fd38 	bl	80033c0 <RCC_SetFlashLatencyFromMSIRange>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e389      	b.n	800306e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800295a:	f000 fc6f 	bl	800323c <HAL_RCC_GetSysClockFreq>
 800295e:	4601      	mov	r1, r0
 8002960:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <HAL_RCC_OscConfig+0x29c>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	fa21 f303 	lsr.w	r3, r1, r3
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_OscConfig+0x2a0>)
 8002978:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x2a4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fb6a 	bl	8002058 <HAL_InitTick>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d052      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	e36d      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d032      	beq.n	8002a00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800299a:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a4c      	ldr	r2, [pc, #304]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fba7 	bl	80020f8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ae:	f7ff fba3 	bl	80020f8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e356      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c0:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3f      	ldr	r2, [pc, #252]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	493a      	ldr	r1, [pc, #232]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
 80029fe:	e01a      	b.n	8002a36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a32      	ldr	r2, [pc, #200]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fb74 	bl	80020f8 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb70 	bl	80020f8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e323      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1dc>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d073      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x21c>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d10e      	bne.n	8002a6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d063      	beq.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d15f      	bne.n	8002b28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e300      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d106      	bne.n	8002a84 <HAL_RCC_OscConfig+0x24c>
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x288>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x270>
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x288>
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_RCC_OscConfig+0x298>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01b      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fb16 	bl	80020f8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ace:	e010      	b.n	8002af2 <HAL_RCC_OscConfig+0x2ba>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08005bbc 	.word	0x08005bbc
 8002ad8:	20000138 	.word	0x20000138
 8002adc:	2000013c 	.word	0x2000013c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fb0a 	bl	80020f8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e2bd      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af2:	4baf      	ldr	r3, [pc, #700]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x2a8>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7ff fafa 	bl	80020f8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff faf6 	bl	80020f8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e2a9      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1a:	4ba5      	ldr	r3, [pc, #660]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x2d0>
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d060      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_OscConfig+0x310>
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d119      	bne.n	8002b76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d116      	bne.n	8002b76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b48:	4b99      	ldr	r3, [pc, #612]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_OscConfig+0x328>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e286      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b93      	ldr	r3, [pc, #588]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	4990      	ldr	r1, [pc, #576]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b74:	e040      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d023      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7e:	4b8c      	ldr	r3, [pc, #560]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a8b      	ldr	r2, [pc, #556]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7ff fab5 	bl	80020f8 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b92:	f7ff fab1 	bl	80020f8 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e264      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba4:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b7f      	ldr	r3, [pc, #508]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	497c      	ldr	r1, [pc, #496]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
 8002bc4:	e018      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b7a      	ldr	r3, [pc, #488]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a79      	ldr	r2, [pc, #484]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7ff fa91 	bl	80020f8 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bda:	f7ff fa8d 	bl	80020f8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e240      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bec:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d03c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0c:	4b68      	ldr	r3, [pc, #416]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	4a67      	ldr	r2, [pc, #412]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7ff fa6c 	bl	80020f8 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c24:	f7ff fa68 	bl	80020f8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e21b      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c36:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ef      	beq.n	8002c24 <HAL_RCC_OscConfig+0x3ec>
 8002c44:	e01b      	b.n	8002c7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c46:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4c:	4a58      	ldr	r2, [pc, #352]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7ff fa4f 	bl	80020f8 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fa4b 	bl	80020f8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1fe      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ef      	bne.n	8002c5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80a6 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c90:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9c:	4b44      	ldr	r3, [pc, #272]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca0:	4a43      	ldr	r2, [pc, #268]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb8:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_OscConfig+0x57c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d118      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_OscConfig+0x57c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3a      	ldr	r2, [pc, #232]	; (8002db4 <HAL_RCC_OscConfig+0x57c>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd0:	f7ff fa12 	bl	80020f8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7ff fa0e 	bl	80020f8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1c1      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <HAL_RCC_OscConfig+0x57c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d108      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4d8>
 8002cfe:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d0e:	e024      	b.n	8002d5a <HAL_RCC_OscConfig+0x522>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d110      	bne.n	8002d3a <HAL_RCC_OscConfig+0x502>
 8002d18:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d38:	e00f      	b.n	8002d5a <HAL_RCC_OscConfig+0x522>
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7ff f9c9 	bl	80020f8 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7ff f9c5 	bl	80020f8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e176      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x578>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ed      	beq.n	8002d6a <HAL_RCC_OscConfig+0x532>
 8002d8e:	e01a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7ff f9b2 	bl	80020f8 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d96:	e00f      	b.n	8002db8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f7ff f9ae 	bl	80020f8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d906      	bls.n	8002db8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e15f      	b.n	800306e <HAL_RCC_OscConfig+0x836>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db8:	4baa      	ldr	r3, [pc, #680]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e8      	bne.n	8002d98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4ba5      	ldr	r3, [pc, #660]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	4aa4      	ldr	r2, [pc, #656]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d03c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dec:	4b9d      	ldr	r3, [pc, #628]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df2:	4a9c      	ldr	r2, [pc, #624]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7ff f97c 	bl	80020f8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e04:	f7ff f978 	bl	80020f8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e12b      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e16:	4b93      	ldr	r3, [pc, #588]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <HAL_RCC_OscConfig+0x5cc>
 8002e24:	e01b      	b.n	8002e5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e26:	4b8f      	ldr	r3, [pc, #572]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e2c:	4a8d      	ldr	r2, [pc, #564]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7ff f95f 	bl	80020f8 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e3e:	f7ff f95b 	bl	80020f8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e10e      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e50:	4b84      	ldr	r3, [pc, #528]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ef      	bne.n	8002e3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8102 	beq.w	800306c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	f040 80c5 	bne.w	8002ffc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e72:	4b7c      	ldr	r3, [pc, #496]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0203 	and.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d12c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	3b01      	subs	r3, #1
 8002e92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d123      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d113      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d067      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d062      	beq.n	8002fac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ee6:	4b5f      	ldr	r3, [pc, #380]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0bb      	b.n	800306e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5a      	ldr	r2, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f02:	f7ff f8f9 	bl	80020f8 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7ff f8f5 	bl	80020f8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0a8      	b.n	800306e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1c:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f28:	4b4e      	ldr	r3, [pc, #312]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <HAL_RCC_OscConfig+0x830>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f42:	0212      	lsls	r2, r2, #8
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f4a:	0852      	lsrs	r2, r2, #1
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	0552      	lsls	r2, r2, #21
 8002f50:	4311      	orrs	r1, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f56:	0852      	lsrs	r2, r2, #1
 8002f58:	3a01      	subs	r2, #1
 8002f5a:	0652      	lsls	r2, r2, #25
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f62:	06d2      	lsls	r2, r2, #27
 8002f64:	430a      	orrs	r2, r1
 8002f66:	493f      	ldr	r1, [pc, #252]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3c      	ldr	r2, [pc, #240]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f84:	f7ff f8b8 	bl	80020f8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7ff f8b4 	bl	80020f8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e067      	b.n	800306e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002faa:	e05f      	b.n	800306c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e05e      	b.n	800306e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d157      	bne.n	800306c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fd4:	f7ff f890 	bl	80020f8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7ff f88c 	bl	80020f8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03f      	b.n	800306e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x7a4>
 8002ffa:	e037      	b.n	800306c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d02d      	beq.n	800305e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8003008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8003020:	f023 0303 	bic.w	r3, r3, #3
 8003024:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 800302c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7ff f85f 	bl	80020f8 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7ff f85b 	bl	80020f8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e00e      	b.n	800306e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCC_OscConfig+0x82c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x806>
 800305c:	e006      	b.n	800306c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e005      	b.n	800306e <HAL_RCC_OscConfig+0x836>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0c8      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b66      	ldr	r3, [pc, #408]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	4961      	ldr	r1, [pc, #388]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0b0      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d04c      	beq.n	8003162 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d0:	4b56      	ldr	r3, [pc, #344]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d121      	bne.n	8003120 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e09e      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d107      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d115      	bne.n	8003120 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e092      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003100:	4b4a      	ldr	r3, [pc, #296]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e086      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e07e      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003120:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f023 0203 	bic.w	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	493f      	ldr	r1, [pc, #252]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003132:	f7fe ffe1 	bl	80020f8 <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003138:	e00a      	b.n	8003150 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313a:	f7fe ffdd 	bl	80020f8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e066      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 020c 	and.w	r2, r3, #12
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	429a      	cmp	r2, r3
 8003160:	d1eb      	bne.n	800313a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	492c      	ldr	r1, [pc, #176]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d210      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	4924      	ldr	r1, [pc, #144]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x1b0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e036      	b.n	800321e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4918      	ldr	r1, [pc, #96]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4910      	ldr	r1, [pc, #64]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ee:	f000 f825 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031f2:	4601      	mov	r1, r0
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_ClockConfig+0x1b4>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	fa21 f303 	lsr.w	r3, r1, r3
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe ff20 	bl	8002058 <HAL_InitTick>
 8003218:	4603      	mov	r3, r0
 800321a:	72fb      	strb	r3, [r7, #11]

  return status;
 800321c:	7afb      	ldrb	r3, [r7, #11]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40022000 	.word	0x40022000
 800322c:	40021000 	.word	0x40021000
 8003230:	08005bbc 	.word	0x08005bbc
 8003234:	20000138 	.word	0x20000138
 8003238:	2000013c 	.word	0x2000013c

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x34>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d121      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d11e      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 800327e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e005      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <HAL_RCC_GetSysClockFreq+0x108>)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d102      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032b4:	4b24      	ldr	r3, [pc, #144]	; (8003348 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e004      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c0:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_RCC_GetSysClockFreq+0x110>)
 80032c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	2b0c      	cmp	r3, #12
 80032c8:	d133      	bne.n	8003332 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80032de:	e005      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e2:	617b      	str	r3, [r7, #20]
      break;
 80032e4:	e005      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032e6:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCC_GetSysClockFreq+0x110>)
 80032e8:	617b      	str	r3, [r7, #20]
      break;
 80032ea:	e002      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	617b      	str	r3, [r7, #20]
      break;
 80032f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	3301      	adds	r3, #1
 80032fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	fb02 f203 	mul.w	r2, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_GetSysClockFreq+0x104>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0e5b      	lsrs	r3, r3, #25
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003332:	69bb      	ldr	r3, [r7, #24]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3724      	adds	r7, #36	; 0x24
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40021000 	.word	0x40021000
 8003344:	08005bd4 	.word	0x08005bd4
 8003348:	00f42400 	.word	0x00f42400
 800334c:	007a1200 	.word	0x007a1200

08003350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_RCC_GetHCLKFreq+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000138 	.word	0x20000138

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800336c:	f7ff fff0 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003370:	4601      	mov	r1, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	08005bcc 	.word	0x08005bcc

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003398:	f7ff ffda 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0adb      	lsrs	r3, r3, #11
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08005bcc 	.word	0x08005bcc

080033c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033d8:	f7ff f9ca 	bl	8002770 <HAL_PWREx_GetVoltageRange>
 80033dc:	6178      	str	r0, [r7, #20]
 80033de:	e014      	b.n	800340a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	4a24      	ldr	r2, [pc, #144]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6593      	str	r3, [r2, #88]	; 0x58
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033f8:	f7ff f9ba 	bl	8002770 <HAL_PWREx_GetVoltageRange>
 80033fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003410:	d10b      	bne.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b80      	cmp	r3, #128	; 0x80
 8003416:	d919      	bls.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2ba0      	cmp	r3, #160	; 0xa0
 800341c:	d902      	bls.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800341e:	2302      	movs	r3, #2
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e013      	b.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003424:	2301      	movs	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	e010      	b.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d902      	bls.n	8003436 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003430:	2303      	movs	r3, #3
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	e00a      	b.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b80      	cmp	r3, #128	; 0x80
 800343a:	d102      	bne.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800343c:	2302      	movs	r3, #2
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	e004      	b.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b70      	cmp	r3, #112	; 0x70
 8003446:	d101      	bne.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003448:	2301      	movs	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 0207 	bic.w	r2, r3, #7
 8003454:	4909      	ldr	r1, [pc, #36]	; (800347c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	40022000 	.word	0x40022000

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003488:	2300      	movs	r3, #0
 800348a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800348c:	2300      	movs	r3, #0
 800348e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02f      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034a4:	d005      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80034a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034aa:	d015      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80034b0:	e00f      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034b2:	4b5d      	ldr	r3, [pc, #372]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	4a5c      	ldr	r2, [pc, #368]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034be:	e00c      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa44 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	74fb      	strb	r3, [r7, #19]
      break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80034d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e0:	4b51      	ldr	r3, [pc, #324]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	494e      	ldr	r1, [pc, #312]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034f6:	e001      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 809e 	beq.w	8003646 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350e:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800352a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352e:	6593      	str	r3, [r2, #88]	; 0x58
 8003530:	4b3d      	ldr	r3, [pc, #244]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353c:	2301      	movs	r3, #1
 800353e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003540:	4b3a      	ldr	r3, [pc, #232]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a39      	ldr	r2, [pc, #228]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354c:	f7fe fdd4 	bl	80020f8 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fe fdd0 	bl	80020f8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	74fb      	strb	r3, [r7, #19]
        break;
 8003566:	e005      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003568:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d15a      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800357a:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003584:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01e      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	429a      	cmp	r2, r3
 8003594:	d019      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035a2:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035c2:	4a19      	ldr	r2, [pc, #100]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d016      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fd90 	bl	80020f8 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035da:	e00b      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035dc:	f7fe fd8c 	bl	80020f8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d902      	bls.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	74fb      	strb	r3, [r7, #19]
            break;
 80035f2:	e006      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ec      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800361e:	e009      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
 8003624:	e006      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003634:	7c7b      	ldrb	r3, [r7, #17]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a9d      	ldr	r2, [pc, #628]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003652:	4b98      	ldr	r3, [pc, #608]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f023 0203 	bic.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4994      	ldr	r1, [pc, #592]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003674:	4b8f      	ldr	r3, [pc, #572]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f023 020c 	bic.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	498c      	ldr	r1, [pc, #560]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003696:	4b87      	ldr	r3, [pc, #540]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	4983      	ldr	r1, [pc, #524]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	497b      	ldr	r1, [pc, #492]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036da:	4b76      	ldr	r3, [pc, #472]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4972      	ldr	r1, [pc, #456]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fc:	4b6d      	ldr	r3, [pc, #436]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003702:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	496a      	ldr	r1, [pc, #424]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800371e:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	4961      	ldr	r1, [pc, #388]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003740:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	4959      	ldr	r1, [pc, #356]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	4950      	ldr	r1, [pc, #320]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	4948      	ldr	r1, [pc, #288]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ac:	f023 0203 	bic.w	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	493f      	ldr	r1, [pc, #252]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d028      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	4937      	ldr	r1, [pc, #220]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e6:	d106      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e8:	4b32      	ldr	r3, [pc, #200]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a31      	ldr	r2, [pc, #196]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	60d3      	str	r3, [r2, #12]
 80037f4:	e011      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fe:	d10c      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f8a4 	bl	8003954 <RCCEx_PLLSAI1_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d028      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	491f      	ldr	r1, [pc, #124]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003844:	d106      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800384c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003850:	60d3      	str	r3, [r2, #12]
 8003852:	e011      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385c:	d10c      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f875 	bl	8003954 <RCCEx_PLLSAI1_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d02b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	4908      	ldr	r1, [pc, #32]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a2:	d109      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a02      	ldr	r2, [pc, #8]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ae:	60d3      	str	r3, [r2, #12]
 80038b0:	e014      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2101      	movs	r1, #1
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f843 	bl	8003954 <RCCEx_PLLSAI1_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01c      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	4916      	ldr	r1, [pc, #88]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003906:	d10c      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2102      	movs	r1, #2
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f820 	bl	8003954 <RCCEx_PLLSAI1_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003944:	7cbb      	ldrb	r3, [r7, #18]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000

08003954 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0203 	and.w	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d10d      	bne.n	800399a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
       ||
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
       ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d044      	beq.n	8003a24 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e041      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d00c      	beq.n	80039c2 <RCCEx_PLLSAI1_Config+0x6e>
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d013      	beq.n	80039d4 <RCCEx_PLLSAI1_Config+0x80>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d120      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039b0:	4b5f      	ldr	r3, [pc, #380]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11d      	bne.n	80039f8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c0:	e01a      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039c2:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d2:	e013      	b.n	80039fc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039d4:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039e0:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039f0:	e006      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      break;
 80039f6:	e004      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a00:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10d      	bne.n	8003a24 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	4944      	ldr	r1, [pc, #272]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d17c      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a2a:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a36:	f7fe fb5f 	bl	80020f8 <HAL_GetTick>
 8003a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a3c:	e009      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a3e:	f7fe fb5b 	bl	80020f8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d902      	bls.n	8003a52 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a50:	e005      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ef      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d15f      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d110      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6a:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	0211      	lsls	r1, r2, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68d2      	ldr	r2, [r2, #12]
 8003a80:	06d2      	lsls	r2, r2, #27
 8003a82:	430a      	orrs	r2, r1
 8003a84:	492a      	ldr	r1, [pc, #168]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	610b      	str	r3, [r1, #16]
 8003a8a:	e027      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d112      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a92:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	0211      	lsls	r1, r2, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6912      	ldr	r2, [r2, #16]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	0552      	lsls	r2, r2, #21
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	491f      	ldr	r1, [pc, #124]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e011      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6952      	ldr	r2, [r2, #20]
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fe fb06 	bl	80020f8 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af0:	f7fe fb02 	bl	80020f8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
          break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	4904      	ldr	r1, [pc, #16]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd ff28 	bl	80019b0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	22ca      	movs	r2, #202	; 0xca
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2253      	movs	r2, #83	; 0x53
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fa49 	bl	8004010 <RTC_EnterInitMode>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d14b      	bne.n	8003c20 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68d2      	ldr	r2, [r2, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	041a      	lsls	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa4d 	bl	8004078 <RTC_ExitInitMode>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11b      	bne.n	8003c20 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0203 	bic.w	r2, r2, #3
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c2a:	b590      	push	{r4, r7, lr}
 8003c2c:	b087      	sub	sp, #28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_RTC_SetTime+0x1a>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e08b      	b.n	8003d5c <HAL_RTC_SetTime+0x132>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	22ca      	movs	r2, #202	; 0xca
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2253      	movs	r2, #83	; 0x53
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f9d3 	bl	8004010 <RTC_EnterInitMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d163      	bne.n	8003d3c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d126      	bne.n	8003cc8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa2e 	bl	80040f4 <RTC_ByteToBcd2>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fa27 	bl	80040f4 <RTC_ByteToBcd2>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003caa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	789b      	ldrb	r3, [r3, #2]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fa1f 	bl	80040f4 <RTC_ByteToBcd2>
 8003cb6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cb8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	78db      	ldrb	r3, [r3, #3]
 8003cc0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e018      	b.n	8003cfa <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ce8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cee:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	78db      	ldrb	r3, [r3, #3]
 8003cf4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d04:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9a0 	bl	8004078 <RTC_ExitInitMode>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	22ff      	movs	r2, #255	; 0xff
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d103      	bne.n	8003d52 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}

08003d64 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	0d9b      	lsrs	r3, r3, #22
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11a      	bne.n	8003e12 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f9a7 	bl	8004134 <RTC_Bcd2ToByte>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f99e 	bl	8004134 <RTC_Bcd2ToByte>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	789b      	ldrb	r3, [r3, #2]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f995 	bl	8004134 <RTC_Bcd2ToByte>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_RTC_SetDate+0x1a>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e075      	b.n	8003f22 <HAL_RTC_SetDate+0x106>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2202      	movs	r2, #2
 8003e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10e      	bne.n	8003e6a <HAL_RTC_SetDate+0x4e>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	f023 0310 	bic.w	r3, r3, #16
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	330a      	adds	r3, #10
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11c      	bne.n	8003eaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	78db      	ldrb	r3, [r3, #3]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f93d 	bl	80040f4 <RTC_ByteToBcd2>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f936 	bl	80040f4 <RTC_ByteToBcd2>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	789b      	ldrb	r3, [r3, #2]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f92e 	bl	80040f4 <RTC_ByteToBcd2>
 8003e98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e00e      	b.n	8003ec8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	78db      	ldrb	r3, [r3, #3]
 8003eae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003eb6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ebc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	22ca      	movs	r2, #202	; 0xca
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2253      	movs	r2, #83	; 0x53
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f899 	bl	8004010 <RTC_EnterInitMode>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10c      	bne.n	8003f02 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ef6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f8bd 	bl	8004078 <RTC_ExitInitMode>
 8003efe:	4603      	mov	r3, r0
 8003f00:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	22ff      	movs	r2, #255	; 0xff
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003f0a:	7cfb      	ldrb	r3, [r7, #19]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}

08003f2a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	0b5b      	lsrs	r3, r3, #13
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11a      	bne.n	8003fba <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	78db      	ldrb	r3, [r3, #3]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f8d3 	bl	8004134 <RTC_Bcd2ToByte>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f8ca 	bl	8004134 <RTC_Bcd2ToByte>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	789b      	ldrb	r3, [r3, #2]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f8c1 	bl	8004134 <RTC_Bcd2ToByte>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fda:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003fdc:	f7fe f88c 	bl	80020f8 <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fe2:	e009      	b.n	8003ff8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fe4:	f7fe f888 	bl	80020f8 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e007      	b.n	8004008 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ee      	beq.n	8003fe4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d120      	bne.n	800406c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f04f 32ff 	mov.w	r2, #4294967295
 8004032:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004034:	f7fe f860 	bl	80020f8 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800403a:	e00d      	b.n	8004058 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800403c:	f7fe f85c 	bl	80020f8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404a:	d905      	bls.n	8004058 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2203      	movs	r2, #3
 8004054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <RTC_EnterInitMode+0x5c>
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d1e7      	bne.n	800403c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <RTC_ExitInitMode+0x78>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4a19      	ldr	r2, [pc, #100]	; (80040f0 <RTC_ExitInitMode+0x78>)
 800408a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <RTC_ExitInitMode+0x78>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10c      	bne.n	80040b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff91 	bl	8003fc4 <HAL_RTC_WaitForSynchro>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01e      	beq.n	80040e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e017      	b.n	80040e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <RTC_ExitInitMode+0x78>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4a0d      	ldr	r2, [pc, #52]	; (80040f0 <RTC_ExitInitMode+0x78>)
 80040bc:	f023 0320 	bic.w	r3, r3, #32
 80040c0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ff7e 	bl	8003fc4 <HAL_RTC_WaitForSynchro>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <RTC_ExitInitMode+0x78>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <RTC_ExitInitMode+0x78>)
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40002800 	.word	0x40002800

080040f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004106:	e005      	b.n	8004114 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800410e:	7afb      	ldrb	r3, [r7, #11]
 8004110:	3b0a      	subs	r3, #10
 8004112:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	2b09      	cmp	r3, #9
 8004118:	d8f6      	bhi.n	8004108 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	b2da      	uxtb	r2, r3
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	4313      	orrs	r3, r2
 8004126:	b2db      	uxtb	r3, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	b2db      	uxtb	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	4413      	add	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	b2da      	uxtb	r2, r3
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	4413      	add	r3, r2
 800415a:	b2db      	uxtb	r3, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e049      	b.n	800420e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fc2a 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 fa92 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e040      	b.n	80042b2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <HAL_TIM_Base_Start_IT+0xa8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x58>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425a:	d009      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x58>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_TIM_Base_Start_IT+0xac>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x58>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d115      	bne.n	800429c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_TIM_Base_Start_IT+0xb4>)
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d015      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0x96>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004288:	d011      	beq.n	80042ae <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	e008      	b.n	80042ae <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	00010007 	.word	0x00010007

080042d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0202 	mvn.w	r2, #2
 80042fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f9be 	bl	8004694 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9b0 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f9c1 	bl	80046a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0204 	mvn.w	r2, #4
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f994 	bl	8004694 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f986 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f997 	bl	80046a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b08      	cmp	r3, #8
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0208 	mvn.w	r2, #8
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2204      	movs	r2, #4
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f96a 	bl	8004694 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f95c 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f96d 	bl	80046a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0210 	mvn.w	r2, #16
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2208      	movs	r2, #8
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f940 	bl	8004694 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f932 	bl	8004680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f943 	bl	80046a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d10e      	bne.n	8004454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0201 	mvn.w	r2, #1
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd f9f4 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d107      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 faa8 	bl	80049d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448e:	d10e      	bne.n	80044ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d107      	bne.n	80044ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa9b 	bl	80049e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d10e      	bne.n	80044da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d107      	bne.n	80044da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8f1 	bl	80046bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0220 	mvn.w	r2, #32
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fa5b 	bl	80049bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_TIM_ConfigClockSource+0x18>
 8004522:	2302      	movs	r3, #2
 8004524:	e0a8      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x16a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004548:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004550:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d067      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x124>
 8004562:	2b40      	cmp	r3, #64	; 0x40
 8004564:	d80b      	bhi.n	800457e <HAL_TIM_ConfigClockSource+0x70>
 8004566:	2b10      	cmp	r3, #16
 8004568:	d073      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x144>
 800456a:	2b10      	cmp	r3, #16
 800456c:	d802      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x66>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d06f      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004572:	e078      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004574:	2b20      	cmp	r3, #32
 8004576:	d06c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x144>
 8004578:	2b30      	cmp	r3, #48	; 0x30
 800457a:	d06a      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800457c:	e073      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800457e:	2b70      	cmp	r3, #112	; 0x70
 8004580:	d00d      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x90>
 8004582:	2b70      	cmp	r3, #112	; 0x70
 8004584:	d804      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x82>
 8004586:	2b50      	cmp	r3, #80	; 0x50
 8004588:	d033      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xe4>
 800458a:	2b60      	cmp	r3, #96	; 0x60
 800458c:	d041      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800458e:	e06a      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d066      	beq.n	8004664 <HAL_TIM_ConfigClockSource+0x156>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	d017      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800459c:	e063      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f000 f977 	bl	80048a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	609a      	str	r2, [r3, #8]
      break;
 80045ca:	e04c      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6899      	ldr	r1, [r3, #8]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f000 f960 	bl	80048a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e039      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 f8d4 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2150      	movs	r1, #80	; 0x50
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f92d 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 8004610:	e029      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	461a      	mov	r2, r3
 8004620:	f000 f8f3 	bl	800480a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2160      	movs	r1, #96	; 0x60
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f91d 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 8004630:	e019      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f8b4 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f90d 	bl	800486a <TIM_ITRx_SetConfig>
      break;
 8004650:	e009      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f000 f904 	bl	800486a <TIM_ITRx_SetConfig>
        break;
 8004662:	e000      	b.n	8004666 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2e      	ldr	r2, [pc, #184]	; (800479c <TIM_Base_SetConfig+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0x28>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0x28>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <TIM_Base_SetConfig+0xd0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <TIM_Base_SetConfig+0xcc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <TIM_Base_SetConfig+0xd0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <TIM_Base_SetConfig+0xd4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <TIM_Base_SetConfig+0xd8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0c      	ldr	r2, [pc, #48]	; (800479c <TIM_Base_SetConfig+0xcc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0xb0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <TIM_Base_SetConfig+0xd4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0xb0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a0b      	ldr	r2, [pc, #44]	; (80047a8 <TIM_Base_SetConfig+0xd8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d103      	bne.n	8004788 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	615a      	str	r2, [r3, #20]
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400

080047ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 030a 	bic.w	r3, r3, #10
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f023 0210 	bic.w	r2, r3, #16
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	031b      	lsls	r3, r3, #12
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	f043 0307 	orr.w	r3, r3, #7
 800488c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e054      	b.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d108      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d009      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a13      	ldr	r2, [pc, #76]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10c      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4313      	orrs	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40014000 	.word	0x40014000

080049bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e040      	b.n	8004a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd f808 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0201 	bic.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fabe 	bl	8004fb8 <UART_SetConfig>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e022      	b.n	8004a8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fd10 	bl	8005474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fd97 	bl	80055b8 <UART_CheckIdleState>
 8004a8a:	4603      	mov	r3, r0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	f040 8081 	bne.w	8004bb0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_UART_Transmit+0x26>
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e079      	b.n	8004bb2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_UART_Transmit+0x38>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e072      	b.n	8004bb2 <HAL_UART_Transmit+0x11e>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2221      	movs	r2, #33	; 0x21
 8004ade:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fd fb0a 	bl	80020f8 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d108      	bne.n	8004b12 <HAL_UART_Transmit+0x7e>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	e003      	b.n	8004b1a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004b22:	e02d      	b.n	8004b80 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fd87 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e039      	b.n	8004bb2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b50:	b292      	uxth	r2, r2
 8004b52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	3302      	adds	r3, #2
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	e008      	b.n	8004b6e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	b292      	uxth	r2, r2
 8004b66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1cb      	bne.n	8004b24 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fd53 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e005      	b.n	8004bb2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	f040 808a 	bne.w	8004ce8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Receive_IT+0x24>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e082      	b.n	8004cea <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Receive_IT+0x36>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e07b      	b.n	8004cea <HAL_UART_Receive_IT+0x12e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	d10e      	bne.n	8004c3e <HAL_UART_Receive_IT+0x82>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_UART_Receive_IT+0x78>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c32:	e02d      	b.n	8004c90 <HAL_UART_Receive_IT+0xd4>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	22ff      	movs	r2, #255	; 0xff
 8004c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3c:	e028      	b.n	8004c90 <HAL_UART_Receive_IT+0xd4>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <HAL_UART_Receive_IT+0xa6>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_UART_Receive_IT+0x9c>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	22ff      	movs	r2, #255	; 0xff
 8004c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c56:	e01b      	b.n	8004c90 <HAL_UART_Receive_IT+0xd4>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	227f      	movs	r2, #127	; 0x7f
 8004c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c60:	e016      	b.n	8004c90 <HAL_UART_Receive_IT+0xd4>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6a:	d10d      	bne.n	8004c88 <HAL_UART_Receive_IT+0xcc>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_UART_Receive_IT+0xc2>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	227f      	movs	r2, #127	; 0x7f
 8004c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c7c:	e008      	b.n	8004c90 <HAL_UART_Receive_IT+0xd4>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	223f      	movs	r2, #63	; 0x3f
 8004c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c86:	e003      	b.n	8004c90 <HAL_UART_Receive_IT+0xd4>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2222      	movs	r2, #34	; 0x22
 8004c9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d107      	bne.n	8004cc6 <HAL_UART_Receive_IT+0x10a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a0d      	ldr	r2, [pc, #52]	; (8004cf8 <HAL_UART_Receive_IT+0x13c>)
 8004cc2:	661a      	str	r2, [r3, #96]	; 0x60
 8004cc4:	e002      	b.n	8004ccc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <HAL_UART_Receive_IT+0x140>)
 8004cca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004ce2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	08005881 	.word	0x08005881
 8004cfc:	080057d7 	.word	0x080057d7

08004d00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d113      	bne.n	8004d58 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8114 	beq.w	8004f76 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
      }
      return;
 8004d56:	e10e      	b.n	8004f76 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80d6 	beq.w	8004f0c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4b86      	ldr	r3, [pc, #536]	; (8004f88 <HAL_UART_IRQHandler+0x288>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80cb 	beq.w	8004f0c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <HAL_UART_IRQHandler+0x9e>
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00e      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xc6>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2202      	movs	r2, #2
 8004db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <HAL_UART_IRQHandler+0xee>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2204      	movs	r2, #4
 8004de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de6:	f043 0202 	orr.w	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d009      	beq.n	8004e20 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2208      	movs	r2, #8
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e18:	f043 0208 	orr.w	r2, r3, #8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00f      	beq.n	8004e4a <HAL_UART_IRQHandler+0x14a>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e42:	f043 0220 	orr.w	r2, r3, #32
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8093 	beq.w	8004f7a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d004      	beq.n	8004e96 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d031      	beq.n	8004efa <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fc4e 	bl	8005738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d123      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d013      	beq.n	8004eea <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec6:	4a31      	ldr	r2, [pc, #196]	; (8004f8c <HAL_UART_IRQHandler+0x28c>)
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fa51 	bl	8002376 <HAL_DMA_Abort_IT>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	e00e      	b.n	8004f08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f85a 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	e00a      	b.n	8004f08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f856 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	e006      	b.n	8004f08 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f852 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004f06:	e038      	b.n	8004f7a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	bf00      	nop
    return;
 8004f0a:	e036      	b.n	8004f7a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_UART_IRQHandler+0x232>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fcfd 	bl	800592a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f30:	e026      	b.n	8004f80 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d008      	beq.n	8004f58 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d017      	beq.n	8004f7e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
    }
    return;
 8004f56:	e012      	b.n	8004f7e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00e      	beq.n	8004f80 <HAL_UART_IRQHandler+0x280>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fc19 	bl	80057a4 <UART_EndTransmit_IT>
    return;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <HAL_UART_IRQHandler+0x280>
      return;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <HAL_UART_IRQHandler+0x280>
    return;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <HAL_UART_IRQHandler+0x280>
    return;
 8004f7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	04000120 	.word	0x04000120
 8004f8c:	08005779 	.word	0x08005779

08004f90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004fbc:	b088      	sub	sp, #32
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4ba4      	ldr	r3, [pc, #656]	; (8005278 <UART_SetConfig+0x2c0>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	69f9      	ldr	r1, [r7, #28]
 8004fee:	430b      	orrs	r3, r1
 8004ff0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a9a      	ldr	r2, [pc, #616]	; (800527c <UART_SetConfig+0x2c4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a91      	ldr	r2, [pc, #580]	; (8005280 <UART_SetConfig+0x2c8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d121      	bne.n	8005084 <UART_SetConfig+0xcc>
 8005040:	4b90      	ldr	r3, [pc, #576]	; (8005284 <UART_SetConfig+0x2cc>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d816      	bhi.n	800507c <UART_SetConfig+0xc4>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x9c>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005065 	.word	0x08005065
 8005058:	08005071 	.word	0x08005071
 800505c:	0800506b 	.word	0x0800506b
 8005060:	08005077 	.word	0x08005077
 8005064:	2301      	movs	r3, #1
 8005066:	76fb      	strb	r3, [r7, #27]
 8005068:	e0be      	b.n	80051e8 <UART_SetConfig+0x230>
 800506a:	2302      	movs	r3, #2
 800506c:	76fb      	strb	r3, [r7, #27]
 800506e:	e0bb      	b.n	80051e8 <UART_SetConfig+0x230>
 8005070:	2304      	movs	r3, #4
 8005072:	76fb      	strb	r3, [r7, #27]
 8005074:	e0b8      	b.n	80051e8 <UART_SetConfig+0x230>
 8005076:	2308      	movs	r3, #8
 8005078:	76fb      	strb	r3, [r7, #27]
 800507a:	e0b5      	b.n	80051e8 <UART_SetConfig+0x230>
 800507c:	2310      	movs	r3, #16
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	bf00      	nop
 8005082:	e0b1      	b.n	80051e8 <UART_SetConfig+0x230>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a7f      	ldr	r2, [pc, #508]	; (8005288 <UART_SetConfig+0x2d0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d134      	bne.n	80050f8 <UART_SetConfig+0x140>
 800508e:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <UART_SetConfig+0x2cc>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d829      	bhi.n	80050f0 <UART_SetConfig+0x138>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0xec>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080050f1 	.word	0x080050f1
 80050ac:	080050f1 	.word	0x080050f1
 80050b0:	080050f1 	.word	0x080050f1
 80050b4:	080050e5 	.word	0x080050e5
 80050b8:	080050f1 	.word	0x080050f1
 80050bc:	080050f1 	.word	0x080050f1
 80050c0:	080050f1 	.word	0x080050f1
 80050c4:	080050df 	.word	0x080050df
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f1 	.word	0x080050f1
 80050d4:	080050eb 	.word	0x080050eb
 80050d8:	2300      	movs	r3, #0
 80050da:	76fb      	strb	r3, [r7, #27]
 80050dc:	e084      	b.n	80051e8 <UART_SetConfig+0x230>
 80050de:	2302      	movs	r3, #2
 80050e0:	76fb      	strb	r3, [r7, #27]
 80050e2:	e081      	b.n	80051e8 <UART_SetConfig+0x230>
 80050e4:	2304      	movs	r3, #4
 80050e6:	76fb      	strb	r3, [r7, #27]
 80050e8:	e07e      	b.n	80051e8 <UART_SetConfig+0x230>
 80050ea:	2308      	movs	r3, #8
 80050ec:	76fb      	strb	r3, [r7, #27]
 80050ee:	e07b      	b.n	80051e8 <UART_SetConfig+0x230>
 80050f0:	2310      	movs	r3, #16
 80050f2:	76fb      	strb	r3, [r7, #27]
 80050f4:	bf00      	nop
 80050f6:	e077      	b.n	80051e8 <UART_SetConfig+0x230>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a63      	ldr	r2, [pc, #396]	; (800528c <UART_SetConfig+0x2d4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d120      	bne.n	8005144 <UART_SetConfig+0x18c>
 8005102:	4b60      	ldr	r3, [pc, #384]	; (8005284 <UART_SetConfig+0x2cc>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800510c:	2b10      	cmp	r3, #16
 800510e:	d00f      	beq.n	8005130 <UART_SetConfig+0x178>
 8005110:	2b10      	cmp	r3, #16
 8005112:	d802      	bhi.n	800511a <UART_SetConfig+0x162>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <UART_SetConfig+0x16c>
 8005118:	e010      	b.n	800513c <UART_SetConfig+0x184>
 800511a:	2b20      	cmp	r3, #32
 800511c:	d005      	beq.n	800512a <UART_SetConfig+0x172>
 800511e:	2b30      	cmp	r3, #48	; 0x30
 8005120:	d009      	beq.n	8005136 <UART_SetConfig+0x17e>
 8005122:	e00b      	b.n	800513c <UART_SetConfig+0x184>
 8005124:	2300      	movs	r3, #0
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	e05e      	b.n	80051e8 <UART_SetConfig+0x230>
 800512a:	2302      	movs	r3, #2
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e05b      	b.n	80051e8 <UART_SetConfig+0x230>
 8005130:	2304      	movs	r3, #4
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e058      	b.n	80051e8 <UART_SetConfig+0x230>
 8005136:	2308      	movs	r3, #8
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e055      	b.n	80051e8 <UART_SetConfig+0x230>
 800513c:	2310      	movs	r3, #16
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	bf00      	nop
 8005142:	e051      	b.n	80051e8 <UART_SetConfig+0x230>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a51      	ldr	r2, [pc, #324]	; (8005290 <UART_SetConfig+0x2d8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d120      	bne.n	8005190 <UART_SetConfig+0x1d8>
 800514e:	4b4d      	ldr	r3, [pc, #308]	; (8005284 <UART_SetConfig+0x2cc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d00f      	beq.n	800517c <UART_SetConfig+0x1c4>
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d802      	bhi.n	8005166 <UART_SetConfig+0x1ae>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <UART_SetConfig+0x1b8>
 8005164:	e010      	b.n	8005188 <UART_SetConfig+0x1d0>
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d005      	beq.n	8005176 <UART_SetConfig+0x1be>
 800516a:	2bc0      	cmp	r3, #192	; 0xc0
 800516c:	d009      	beq.n	8005182 <UART_SetConfig+0x1ca>
 800516e:	e00b      	b.n	8005188 <UART_SetConfig+0x1d0>
 8005170:	2300      	movs	r3, #0
 8005172:	76fb      	strb	r3, [r7, #27]
 8005174:	e038      	b.n	80051e8 <UART_SetConfig+0x230>
 8005176:	2302      	movs	r3, #2
 8005178:	76fb      	strb	r3, [r7, #27]
 800517a:	e035      	b.n	80051e8 <UART_SetConfig+0x230>
 800517c:	2304      	movs	r3, #4
 800517e:	76fb      	strb	r3, [r7, #27]
 8005180:	e032      	b.n	80051e8 <UART_SetConfig+0x230>
 8005182:	2308      	movs	r3, #8
 8005184:	76fb      	strb	r3, [r7, #27]
 8005186:	e02f      	b.n	80051e8 <UART_SetConfig+0x230>
 8005188:	2310      	movs	r3, #16
 800518a:	76fb      	strb	r3, [r7, #27]
 800518c:	bf00      	nop
 800518e:	e02b      	b.n	80051e8 <UART_SetConfig+0x230>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a39      	ldr	r2, [pc, #228]	; (800527c <UART_SetConfig+0x2c4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d124      	bne.n	80051e4 <UART_SetConfig+0x22c>
 800519a:	4b3a      	ldr	r3, [pc, #232]	; (8005284 <UART_SetConfig+0x2cc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a8:	d012      	beq.n	80051d0 <UART_SetConfig+0x218>
 80051aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ae:	d802      	bhi.n	80051b6 <UART_SetConfig+0x1fe>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <UART_SetConfig+0x20c>
 80051b4:	e012      	b.n	80051dc <UART_SetConfig+0x224>
 80051b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ba:	d006      	beq.n	80051ca <UART_SetConfig+0x212>
 80051bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c0:	d009      	beq.n	80051d6 <UART_SetConfig+0x21e>
 80051c2:	e00b      	b.n	80051dc <UART_SetConfig+0x224>
 80051c4:	2300      	movs	r3, #0
 80051c6:	76fb      	strb	r3, [r7, #27]
 80051c8:	e00e      	b.n	80051e8 <UART_SetConfig+0x230>
 80051ca:	2302      	movs	r3, #2
 80051cc:	76fb      	strb	r3, [r7, #27]
 80051ce:	e00b      	b.n	80051e8 <UART_SetConfig+0x230>
 80051d0:	2304      	movs	r3, #4
 80051d2:	76fb      	strb	r3, [r7, #27]
 80051d4:	e008      	b.n	80051e8 <UART_SetConfig+0x230>
 80051d6:	2308      	movs	r3, #8
 80051d8:	76fb      	strb	r3, [r7, #27]
 80051da:	e005      	b.n	80051e8 <UART_SetConfig+0x230>
 80051dc:	2310      	movs	r3, #16
 80051de:	76fb      	strb	r3, [r7, #27]
 80051e0:	bf00      	nop
 80051e2:	e001      	b.n	80051e8 <UART_SetConfig+0x230>
 80051e4:	2310      	movs	r3, #16
 80051e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a23      	ldr	r2, [pc, #140]	; (800527c <UART_SetConfig+0x2c4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f040 8085 	bne.w	80052fe <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051f4:	7efb      	ldrb	r3, [r7, #27]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d823      	bhi.n	8005242 <UART_SetConfig+0x28a>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <UART_SetConfig+0x248>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005225 	.word	0x08005225
 8005204:	08005243 	.word	0x08005243
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005243 	.word	0x08005243
 8005210:	08005233 	.word	0x08005233
 8005214:	08005243 	.word	0x08005243
 8005218:	08005243 	.word	0x08005243
 800521c:	08005243 	.word	0x08005243
 8005220:	0800523b 	.word	0x0800523b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005224:	f7fe f8a0 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8005228:	6178      	str	r0, [r7, #20]
        break;
 800522a:	e00f      	b.n	800524c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <UART_SetConfig+0x2dc>)
 800522e:	617b      	str	r3, [r7, #20]
        break;
 8005230:	e00c      	b.n	800524c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005232:	f7fe f803 	bl	800323c <HAL_RCC_GetSysClockFreq>
 8005236:	6178      	str	r0, [r7, #20]
        break;
 8005238:	e008      	b.n	800524c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523e:	617b      	str	r3, [r7, #20]
        break;
 8005240:	e004      	b.n	800524c <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	76bb      	strb	r3, [r7, #26]
        break;
 800524a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8102 	beq.w	8005458 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d305      	bcc.n	8005270 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d913      	bls.n	8005298 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	76bb      	strb	r3, [r7, #26]
 8005274:	e0f0      	b.n	8005458 <UART_SetConfig+0x4a0>
 8005276:	bf00      	nop
 8005278:	efff69f3 	.word	0xefff69f3
 800527c:	40008000 	.word	0x40008000
 8005280:	40013800 	.word	0x40013800
 8005284:	40021000 	.word	0x40021000
 8005288:	40004400 	.word	0x40004400
 800528c:	40004800 	.word	0x40004800
 8005290:	40004c00 	.word	0x40004c00
 8005294:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4619      	mov	r1, r3
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	f04f 0400 	mov.w	r4, #0
 80052a8:	0214      	lsls	r4, r2, #8
 80052aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80052ae:	020b      	lsls	r3, r1, #8
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6852      	ldr	r2, [r2, #4]
 80052b4:	0852      	lsrs	r2, r2, #1
 80052b6:	4611      	mov	r1, r2
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	eb13 0b01 	adds.w	fp, r3, r1
 80052c0:	eb44 0c02 	adc.w	ip, r4, r2
 80052c4:	4658      	mov	r0, fp
 80052c6:	4661      	mov	r1, ip
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f04f 0400 	mov.w	r4, #0
 80052d0:	461a      	mov	r2, r3
 80052d2:	4623      	mov	r3, r4
 80052d4:	f7fb fb76 	bl	80009c4 <__aeabi_uldivmod>
 80052d8:	4603      	mov	r3, r0
 80052da:	460c      	mov	r4, r1
 80052dc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e4:	d308      	bcc.n	80052f8 <UART_SetConfig+0x340>
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ec:	d204      	bcs.n	80052f8 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	e0af      	b.n	8005458 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	76bb      	strb	r3, [r7, #26]
 80052fc:	e0ac      	b.n	8005458 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005306:	d15b      	bne.n	80053c0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005308:	7efb      	ldrb	r3, [r7, #27]
 800530a:	2b08      	cmp	r3, #8
 800530c:	d827      	bhi.n	800535e <UART_SetConfig+0x3a6>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0x35c>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005339 	.word	0x08005339
 8005318:	08005341 	.word	0x08005341
 800531c:	08005349 	.word	0x08005349
 8005320:	0800535f 	.word	0x0800535f
 8005324:	0800534f 	.word	0x0800534f
 8005328:	0800535f 	.word	0x0800535f
 800532c:	0800535f 	.word	0x0800535f
 8005330:	0800535f 	.word	0x0800535f
 8005334:	08005357 	.word	0x08005357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005338:	f7fe f816 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 800533c:	6178      	str	r0, [r7, #20]
        break;
 800533e:	e013      	b.n	8005368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe f828 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8005344:	6178      	str	r0, [r7, #20]
        break;
 8005346:	e00f      	b.n	8005368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005348:	4b49      	ldr	r3, [pc, #292]	; (8005470 <UART_SetConfig+0x4b8>)
 800534a:	617b      	str	r3, [r7, #20]
        break;
 800534c:	e00c      	b.n	8005368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534e:	f7fd ff75 	bl	800323c <HAL_RCC_GetSysClockFreq>
 8005352:	6178      	str	r0, [r7, #20]
        break;
 8005354:	e008      	b.n	8005368 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535a:	617b      	str	r3, [r7, #20]
        break;
 800535c:	e004      	b.n	8005368 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	76bb      	strb	r3, [r7, #26]
        break;
 8005366:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d074      	beq.n	8005458 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	005a      	lsls	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	b29b      	uxth	r3, r3
 8005384:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d916      	bls.n	80053ba <UART_SetConfig+0x402>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d212      	bcs.n	80053ba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f023 030f 	bic.w	r3, r3, #15
 800539c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	89fb      	ldrh	r3, [r7, #14]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	89fa      	ldrh	r2, [r7, #14]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	e04e      	b.n	8005458 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	76bb      	strb	r3, [r7, #26]
 80053be:	e04b      	b.n	8005458 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c0:	7efb      	ldrb	r3, [r7, #27]
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d827      	bhi.n	8005416 <UART_SetConfig+0x45e>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x414>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005417 	.word	0x08005417
 80053dc:	08005407 	.word	0x08005407
 80053e0:	08005417 	.word	0x08005417
 80053e4:	08005417 	.word	0x08005417
 80053e8:	08005417 	.word	0x08005417
 80053ec:	0800540f 	.word	0x0800540f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7fd ffba 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80053f4:	6178      	str	r0, [r7, #20]
        break;
 80053f6:	e013      	b.n	8005420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f8:	f7fd ffcc 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80053fc:	6178      	str	r0, [r7, #20]
        break;
 80053fe:	e00f      	b.n	8005420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005400:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <UART_SetConfig+0x4b8>)
 8005402:	617b      	str	r3, [r7, #20]
        break;
 8005404:	e00c      	b.n	8005420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fd ff19 	bl	800323c <HAL_RCC_GetSysClockFreq>
 800540a:	6178      	str	r0, [r7, #20]
        break;
 800540c:	e008      	b.n	8005420 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005412:	617b      	str	r3, [r7, #20]
        break;
 8005414:	e004      	b.n	8005420 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	76bb      	strb	r3, [r7, #26]
        break;
 800541e:	bf00      	nop
    }

    if (pclk != 0U)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d018      	beq.n	8005458 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	085a      	lsrs	r2, r3, #1
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	441a      	add	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	b29b      	uxth	r3, r3
 800543a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	d908      	bls.n	8005454 <UART_SetConfig+0x49c>
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d204      	bcs.n	8005454 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	e001      	b.n	8005458 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005464:	7ebb      	ldrb	r3, [r7, #26]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005470:	00f42400 	.word	0x00f42400

08005474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01a      	beq.n	800558a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005572:	d10a      	bne.n	800558a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055c6:	f7fc fd97 	bl	80020f8 <HAL_GetTick>
 80055ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d10e      	bne.n	80055f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f82a 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e020      	b.n	800563a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d10e      	bne.n	8005624 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005606:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f814 	bl	8005642 <UART_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e00a      	b.n	800563a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005652:	e05d      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d059      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fc fd4c 	bl	80020f8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <UART_WaitOnFlagUntilTimeout+0x30>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11b      	bne.n	80056aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005680:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e042      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d02b      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c6:	d123      	bne.n	8005710 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e00f      	b.n	8005730 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4013      	ands	r3, r2
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	429a      	cmp	r2, r3
 800572c:	d092      	beq.n	8005654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800574e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff fc04 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fbe1 	bl	8004f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057e4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ea:	2b22      	cmp	r3, #34	; 0x22
 80057ec:	d13a      	bne.n	8005864 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057f4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057f6:	89bb      	ldrh	r3, [r7, #12]
 80057f8:	b2d9      	uxtb	r1, r3
 80057fa:	89fb      	ldrh	r3, [r7, #14]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	400a      	ands	r2, r1
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d123      	bne.n	8005878 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800583e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7fc f84d 	bl	80018fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005862:	e009      	b.n	8005878 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	8b1b      	ldrh	r3, [r3, #24]
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0208 	orr.w	r2, r2, #8
 8005874:	b292      	uxth	r2, r2
 8005876:	831a      	strh	r2, [r3, #24]
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800588e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005894:	2b22      	cmp	r3, #34	; 0x22
 8005896:	d13a      	bne.n	800590e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800589e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80058a6:	89ba      	ldrh	r2, [r7, #12]
 80058a8:	89fb      	ldrh	r3, [r7, #14]
 80058aa:	4013      	ands	r3, r2
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	1c9a      	adds	r2, r3, #2
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d123      	bne.n	8005922 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fff8 	bl	80018fc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800590c:	e009      	b.n	8005922 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	8b1b      	ldrh	r3, [r3, #24]
 8005914:	b29a      	uxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	b292      	uxth	r2, r2
 8005920:	831a      	strh	r2, [r3, #24]
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <__libc_init_array>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	4e0d      	ldr	r6, [pc, #52]	; (8005978 <__libc_init_array+0x38>)
 8005944:	4c0d      	ldr	r4, [pc, #52]	; (800597c <__libc_init_array+0x3c>)
 8005946:	1ba4      	subs	r4, r4, r6
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	2500      	movs	r5, #0
 800594c:	42a5      	cmp	r5, r4
 800594e:	d109      	bne.n	8005964 <__libc_init_array+0x24>
 8005950:	4e0b      	ldr	r6, [pc, #44]	; (8005980 <__libc_init_array+0x40>)
 8005952:	4c0c      	ldr	r4, [pc, #48]	; (8005984 <__libc_init_array+0x44>)
 8005954:	f000 f862 	bl	8005a1c <_init>
 8005958:	1ba4      	subs	r4, r4, r6
 800595a:	10a4      	asrs	r4, r4, #2
 800595c:	2500      	movs	r5, #0
 800595e:	42a5      	cmp	r5, r4
 8005960:	d105      	bne.n	800596e <__libc_init_array+0x2e>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005968:	4798      	blx	r3
 800596a:	3501      	adds	r5, #1
 800596c:	e7ee      	b.n	800594c <__libc_init_array+0xc>
 800596e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005972:	4798      	blx	r3
 8005974:	3501      	adds	r5, #1
 8005976:	e7f2      	b.n	800595e <__libc_init_array+0x1e>
 8005978:	08005c0c 	.word	0x08005c0c
 800597c:	08005c0c 	.word	0x08005c0c
 8005980:	08005c0c 	.word	0x08005c0c
 8005984:	08005c10 	.word	0x08005c10

08005988 <memcmp>:
 8005988:	b530      	push	{r4, r5, lr}
 800598a:	2400      	movs	r4, #0
 800598c:	42a2      	cmp	r2, r4
 800598e:	d101      	bne.n	8005994 <memcmp+0xc>
 8005990:	2000      	movs	r0, #0
 8005992:	e007      	b.n	80059a4 <memcmp+0x1c>
 8005994:	5d03      	ldrb	r3, [r0, r4]
 8005996:	3401      	adds	r4, #1
 8005998:	190d      	adds	r5, r1, r4
 800599a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800599e:	42ab      	cmp	r3, r5
 80059a0:	d0f4      	beq.n	800598c <memcmp+0x4>
 80059a2:	1b58      	subs	r0, r3, r5
 80059a4:	bd30      	pop	{r4, r5, pc}

080059a6 <memcpy>:
 80059a6:	b510      	push	{r4, lr}
 80059a8:	1e43      	subs	r3, r0, #1
 80059aa:	440a      	add	r2, r1
 80059ac:	4291      	cmp	r1, r2
 80059ae:	d100      	bne.n	80059b2 <memcpy+0xc>
 80059b0:	bd10      	pop	{r4, pc}
 80059b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ba:	e7f7      	b.n	80059ac <memcpy+0x6>

080059bc <memset>:
 80059bc:	4402      	add	r2, r0
 80059be:	4603      	mov	r3, r0
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d100      	bne.n	80059c6 <memset+0xa>
 80059c4:	4770      	bx	lr
 80059c6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ca:	e7f9      	b.n	80059c0 <memset+0x4>

080059cc <strchr>:
 80059cc:	b2c9      	uxtb	r1, r1
 80059ce:	4603      	mov	r3, r0
 80059d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059d4:	b11a      	cbz	r2, 80059de <strchr+0x12>
 80059d6:	428a      	cmp	r2, r1
 80059d8:	d1f9      	bne.n	80059ce <strchr+0x2>
 80059da:	4618      	mov	r0, r3
 80059dc:	4770      	bx	lr
 80059de:	2900      	cmp	r1, #0
 80059e0:	bf18      	it	ne
 80059e2:	2300      	movne	r3, #0
 80059e4:	e7f9      	b.n	80059da <strchr+0xe>

080059e6 <strstr>:
 80059e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e8:	7803      	ldrb	r3, [r0, #0]
 80059ea:	b17b      	cbz	r3, 8005a0c <strstr+0x26>
 80059ec:	4604      	mov	r4, r0
 80059ee:	7823      	ldrb	r3, [r4, #0]
 80059f0:	4620      	mov	r0, r4
 80059f2:	1c66      	adds	r6, r4, #1
 80059f4:	b17b      	cbz	r3, 8005a16 <strstr+0x30>
 80059f6:	1e4a      	subs	r2, r1, #1
 80059f8:	1e63      	subs	r3, r4, #1
 80059fa:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80059fe:	b14d      	cbz	r5, 8005a14 <strstr+0x2e>
 8005a00:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005a04:	42af      	cmp	r7, r5
 8005a06:	4634      	mov	r4, r6
 8005a08:	d0f7      	beq.n	80059fa <strstr+0x14>
 8005a0a:	e7f0      	b.n	80059ee <strstr+0x8>
 8005a0c:	780b      	ldrb	r3, [r1, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf18      	it	ne
 8005a12:	2000      	movne	r0, #0
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	4618      	mov	r0, r3
 8005a18:	e7fc      	b.n	8005a14 <strstr+0x2e>
	...

08005a1c <_init>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr

08005a28 <_fini>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr
