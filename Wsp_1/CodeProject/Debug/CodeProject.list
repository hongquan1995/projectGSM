
CodeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005924  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d5c  08005d5c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d64  08005d64  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000014  08005d80  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08005d80  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013249  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002535  00000000  00000000  0003328d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  000357c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00036910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c60  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2ac  00000000  00000000  0005b580  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000deb45  00000000  00000000  0006982c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004994  00000000  00000000  001483ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005aa4 	.word	0x08005aa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005aa4 	.word	0x08005aa4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b972 	b.w	8000cc0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	4688      	mov	r8, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14b      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4615      	mov	r5, r2
 8000a06:	d967      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0720 	rsb	r7, r2, #32
 8000a12:	fa01 f302 	lsl.w	r3, r1, r2
 8000a16:	fa20 f707 	lsr.w	r7, r0, r7
 8000a1a:	4095      	lsls	r5, r2
 8000a1c:	ea47 0803 	orr.w	r8, r7, r3
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a2c:	fa1f fc85 	uxth.w	ip, r5
 8000a30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a38:	fb07 f10c 	mul.w	r1, r7, ip
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18eb      	adds	r3, r5, r3
 8000a42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a46:	f080 811b 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8118 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a50:	3f02      	subs	r7, #2
 8000a52:	442b      	add	r3, r5
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a68:	45a4      	cmp	ip, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	192c      	adds	r4, r5, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a72:	f080 8107 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	f240 8104 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	442c      	add	r4, r5
 8000a80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a84:	eba4 040c 	sub.w	r4, r4, ip
 8000a88:	2700      	movs	r7, #0
 8000a8a:	b11e      	cbz	r6, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c6 4300 	strd	r4, r3, [r6]
 8000a94:	4639      	mov	r1, r7
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0xbe>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80eb 	beq.w	8000c7a <__udivmoddi4+0x286>
 8000aa4:	2700      	movs	r7, #0
 8000aa6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aaa:	4638      	mov	r0, r7
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	fab3 f783 	clz	r7, r3
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d147      	bne.n	8000b4a <__udivmoddi4+0x156>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xd0>
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	f200 80fa 	bhi.w	8000cb8 <__udivmoddi4+0x2c4>
 8000ac4:	1a84      	subs	r4, r0, r2
 8000ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	4698      	mov	r8, r3
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d0e0      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000ad2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ad6:	e7dd      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xe8>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	f040 808f 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae6:	1b49      	subs	r1, r1, r5
 8000ae8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aec:	fa1f f885 	uxth.w	r8, r5
 8000af0:	2701      	movs	r7, #1
 8000af2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b00:	fb08 f10c 	mul.w	r1, r8, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x14c>
 8000b30:	192c      	adds	r4, r5, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x14a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80b6 	bhi.w	8000caa <__udivmoddi4+0x2b6>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e79f      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b4e:	40bb      	lsls	r3, r7
 8000b50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b58:	fa01 f407 	lsl.w	r4, r1, r7
 8000b5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b68:	4325      	orrs	r5, r4
 8000b6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b6e:	0c2c      	lsrs	r4, r5, #16
 8000b70:	fb08 3319 	mls	r3, r8, r9, r3
 8000b74:	fa1f fa8e 	uxth.w	sl, lr
 8000b78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b80:	429c      	cmp	r4, r3
 8000b82:	fa02 f207 	lsl.w	r2, r2, r7
 8000b86:	fa00 f107 	lsl.w	r1, r0, r7
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b94:	f080 8087 	bcs.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	f240 8084 	bls.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ba2:	4473      	add	r3, lr
 8000ba4:	1b1b      	subs	r3, r3, r4
 8000ba6:	b2ad      	uxth	r5, r5
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bb8:	45a2      	cmp	sl, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	d26b      	bcs.n	8000c9e <__udivmoddi4+0x2aa>
 8000bc6:	45a2      	cmp	sl, r4
 8000bc8:	d969      	bls.n	8000c9e <__udivmoddi4+0x2aa>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4474      	add	r4, lr
 8000bce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd6:	eba4 040a 	sub.w	r4, r4, sl
 8000bda:	454c      	cmp	r4, r9
 8000bdc:	46c2      	mov	sl, r8
 8000bde:	464b      	mov	r3, r9
 8000be0:	d354      	bcc.n	8000c8c <__udivmoddi4+0x298>
 8000be2:	d051      	beq.n	8000c88 <__udivmoddi4+0x294>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d069      	beq.n	8000cbc <__udivmoddi4+0x2c8>
 8000be8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bec:	eb64 0403 	sbc.w	r4, r4, r3
 8000bf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bf4:	40fd      	lsrs	r5, r7
 8000bf6:	40fc      	lsrs	r4, r7
 8000bf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000c00:	2700      	movs	r7, #0
 8000c02:	e747      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c04:	f1c2 0320 	rsb	r3, r2, #32
 8000c08:	fa20 f703 	lsr.w	r7, r0, r3
 8000c0c:	4095      	lsls	r5, r2
 8000c0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c12:	fa21 f303 	lsr.w	r3, r1, r3
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	4338      	orrs	r0, r7
 8000c1c:	0c01      	lsrs	r1, r0, #16
 8000c1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c22:	fa1f f885 	uxth.w	r8, r5
 8000c26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb07 f308 	mul.w	r3, r7, r8
 8000c32:	428b      	cmp	r3, r1
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x256>
 8000c3a:	1869      	adds	r1, r5, r1
 8000c3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c40:	d22f      	bcs.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d92d      	bls.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c46:	3f02      	subs	r7, #2
 8000c48:	4429      	add	r1, r5
 8000c4a:	1acb      	subs	r3, r1, r3
 8000c4c:	b281      	uxth	r1, r0
 8000c4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5a:	fb00 f308 	mul.w	r3, r0, r8
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x27e>
 8000c62:	1869      	adds	r1, r5, r1
 8000c64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c68:	d217      	bcs.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d915      	bls.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6e:	3802      	subs	r0, #2
 8000c70:	4429      	add	r1, r5
 8000c72:	1ac9      	subs	r1, r1, r3
 8000c74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c78:	e73b      	b.n	8000af2 <__udivmoddi4+0xfe>
 8000c7a:	4637      	mov	r7, r6
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e709      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c80:	4607      	mov	r7, r0
 8000c82:	e6e7      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c84:	4618      	mov	r0, r3
 8000c86:	e6fb      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c88:	4541      	cmp	r1, r8
 8000c8a:	d2ab      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c90:	eb69 020e 	sbc.w	r2, r9, lr
 8000c94:	3801      	subs	r0, #1
 8000c96:	4613      	mov	r3, r2
 8000c98:	e7a4      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	e7e9      	b.n	8000c72 <__udivmoddi4+0x27e>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e795      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca2:	4667      	mov	r7, ip
 8000ca4:	e7d1      	b.n	8000c4a <__udivmoddi4+0x256>
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	e77c      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000caa:	3802      	subs	r0, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	e747      	b.n	8000b40 <__udivmoddi4+0x14c>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	442b      	add	r3, r5
 8000cb6:	e72f      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb8:	4638      	mov	r0, r7
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xda>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0xa0>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <Sim_PWON>:
extern uint8_t indexBuffer;

int answer;

extern uint8_t buffer[256];
void Sim_PWON(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <Sim_PWON+0x14>)
 8000cce:	f001 fd6b 	bl	80027a8 <HAL_GPIO_WritePin>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	48000400 	.word	0x48000400

08000cdc <Sim_PWOFF>:

void Sim_PWOFF(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <Sim_PWOFF+0x14>)
 8000ce6:	f001 fd5f 	bl	80027a8 <HAL_GPIO_WritePin>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <Pow_ON_OFF>:

void Pow_ON_OFF(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <Pow_ON_OFF+0x2c>)
 8000cfe:	f001 fd53 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f001 fa61 	bl	80021cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <Pow_ON_OFF+0x2c>)
 8000d10:	f001 fd4a 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d18:	f001 fa58 	bl	80021cc <HAL_Delay>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	48000400 	.word	0x48000400

08000d24 <GSM_Init>:

void GSM_Init(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  Pow_ON_OFF();;
 8000d28:	f7ff ffe4 	bl	8000cf4 <Pow_ON_OFF>
	  Sim_PWON();
 8000d2c:	f7ff ffca 	bl	8000cc4 <Sim_PWON>
	  HAL_Delay(2000);
 8000d30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d34:	f001 fa4a 	bl	80021cc <HAL_Delay>
	  Sim_PWOFF();
 8000d38:	f7ff ffd0 	bl	8000cdc <Sim_PWOFF>
	  HAL_Delay(25000);
 8000d3c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000d40:	f001 fa44 	bl	80021cc <HAL_Delay>
	  HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <GSM_Init+0x3c>)
 8000d46:	f7ff fa47 	bl	80001d8 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	4903      	ldr	r1, [pc, #12]	; (8000d60 <GSM_Init+0x3c>)
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <GSM_Init+0x40>)
 8000d56:	f003 fefb 	bl	8004b50 <HAL_UART_Transmit>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200003bc 	.word	0x200003bc
 8000d64:	2000033c 	.word	0x2000033c

08000d68 <fnParseOKPacket>:

uint8_t fnParseOKPacket(char* arrRes) { 	//kiem tra Sim
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\nOK", 4)) {
 8000d70:	2204      	movs	r2, #4
 8000d72:	4907      	ldr	r1, [pc, #28]	; (8000d90 <fnParseOKPacket+0x28>)
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f004 fe65 	bl	8005a44 <memcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <fnParseOKPacket+0x1c>
    return 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <fnParseOKPacket+0x1e>
  }
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	08005abc 	.word	0x08005abc

08000d94 <fnParseCPINPacket>:

uint8_t fnParseCPINPacket(char* arrRes) {	// kiem tra trang thai cua Sim
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CPIN: READY", 14)) {
 8000d9c:	220e      	movs	r2, #14
 8000d9e:	4907      	ldr	r1, [pc, #28]	; (8000dbc <fnParseCPINPacket+0x28>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f004 fe4f 	bl	8005a44 <memcmp>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <fnParseCPINPacket+0x1c>
    return 1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <fnParseCPINPacket+0x1e>
  }
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08005ac4 	.word	0x08005ac4

08000dc0 <fnParseCSQPacket>:

uint8_t fnParseCSQPacket(char* arrRes) {	// kiem tra cuong do song
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CSQ:", 7)) {
 8000dc8:	2207      	movs	r2, #7
 8000dca:	4907      	ldr	r1, [pc, #28]	; (8000de8 <fnParseCSQPacket+0x28>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f004 fe39 	bl	8005a44 <memcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <fnParseCSQPacket+0x1c>
    return 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <fnParseCSQPacket+0x1e>
  }
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08005ad4 	.word	0x08005ad4

08000dec <fnParseCGREGPacket>:

uint8_t fnParseCGREGPacket(char* arrRes) {	// dang ki mạng
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CGREG:", 9)) {
 8000df4:	2209      	movs	r2, #9
 8000df6:	4907      	ldr	r1, [pc, #28]	; (8000e14 <fnParseCGREGPacket+0x28>)
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f004 fe23 	bl	8005a44 <memcmp>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <fnParseCGREGPacket+0x1c>
    return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <fnParseCGREGPacket+0x1e>
  }
  return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08005adc 	.word	0x08005adc

08000e18 <fnParseCREGPacket>:

uint8_t fnParseCREGPacket(char* arrRes) {	// dang ki mang
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CREG:", 8)) {
 8000e20:	2208      	movs	r2, #8
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <fnParseCREGPacket+0x28>)
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f004 fe0d 	bl	8005a44 <memcmp>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <fnParseCREGPacket+0x1c>
    return 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <fnParseCREGPacket+0x1e>
  }
  return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08005ae8 	.word	0x08005ae8

08000e44 <fnParseCGATTPacket>:

uint8_t fnParseCGATTPacket(char* arrRes) { // kiem tra trang thai GPRS
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CGATT:", 9)) {
 8000e4c:	2209      	movs	r2, #9
 8000e4e:	4907      	ldr	r1, [pc, #28]	; (8000e6c <fnParseCGATTPacket+0x28>)
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f004 fdf7 	bl	8005a44 <memcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <fnParseCGATTPacket+0x1c>
    return 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <fnParseCGATTPacket+0x1e>
  }
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08005af4 	.word	0x08005af4

08000e70 <fnParseIPADDRPacket>:

uint8_t fnParseIPADDRPacket(char* arrRes) {	// nhan dia chi IP
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+IPADDR:", 10)) {
 8000e78:	220a      	movs	r2, #10
 8000e7a:	4907      	ldr	r1, [pc, #28]	; (8000e98 <fnParseIPADDRPacket+0x28>)
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f004 fde1 	bl	8005a44 <memcmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <fnParseIPADDRPacket+0x1c>
    return 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <fnParseIPADDRPacket+0x1e>
  }
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08005b00 	.word	0x08005b00

08000e9c <fnParseCIPOPQUERYPacket>:

uint8_t fnParseCIPOPQUERYPacket(char* arrRes) {	// quet link ket noi
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n+CIPOPQUERY:0", 15)) {
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <fnParseCIPOPQUERYPacket+0x28>)
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f004 fdcb 	bl	8005a44 <memcmp>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <fnParseCIPOPQUERYPacket+0x1c>
    return 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <fnParseCIPOPQUERYPacket+0x1e>
  }
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	08005b0c 	.word	0x08005b0c

08000ec8 <fnParseSendSVPacket>:

uint8_t fnParseSendSVPacket(char* arrRes) {	// kiem tra phan hoi gui
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\n>", 3)) {
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <fnParseSendSVPacket+0x28>)
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f004 fdb5 	bl	8005a44 <memcmp>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <fnParseSendSVPacket+0x1c>
    return 1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <fnParseSendSVPacket+0x1e>
  }
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08005b1c 	.word	0x08005b1c

08000ef4 <fnParseReceiveSVPacket>:

uint8_t fnParseReceiveSVPacket(char* arrRes) {	// kiem tra phan hoi nhan
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if (!memcmp(arrRes, "\r\nOK\r\n\r\n+CIPRXGET:", 18)) {
 8000efc:	2212      	movs	r2, #18
 8000efe:	4907      	ldr	r1, [pc, #28]	; (8000f1c <fnParseReceiveSVPacket+0x28>)
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f004 fd9f 	bl	8005a44 <memcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <fnParseReceiveSVPacket+0x1c>
    return 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e000      	b.n	8000f12 <fnParseReceiveSVPacket+0x1e>
  }
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08005b20 	.word	0x08005b20

08000f20 <fnCheckPacket>:

uint8_t fnCheckPacket(uint8_t* packet, uint16_t len, fncProcess fnParse) { // ham gui du lieu co kiem tra phan hoi
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	817b      	strh	r3, [r7, #10]
	 indexBuffer = 0;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <fnCheckPacket+0x7c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
	 memset(buffer, '\0', 256);
 8000f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4819      	ldr	r0, [pc, #100]	; (8000fa0 <fnCheckPacket+0x80>)
 8000f3c:	f004 fd9c 	bl	8005a78 <memset>
	 HAL_UART_Transmit(&huart3, packet, len, 1000);
 8000f40:	897a      	ldrh	r2, [r7, #10]
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	68f9      	ldr	r1, [r7, #12]
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <fnCheckPacket+0x84>)
 8000f4a:	f003 fe01 	bl	8004b50 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1, packet, len, 1000);
 8000f4e:	897a      	ldrh	r2, [r7, #10]
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	68f9      	ldr	r1, [r7, #12]
 8000f56:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <fnCheckPacket+0x88>)
 8000f58:	f003 fdfa 	bl	8004b50 <HAL_UART_Transmit>
	 HAL_Delay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f60:	f001 f934 	bl	80021cc <HAL_Delay>
	 if (fnParse) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <fnCheckPacket+0x58>
	 	  answer = fnParse(buffer);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <fnCheckPacket+0x80>)
 8000f6e:	4798      	blx	r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <fnCheckPacket+0x8c>)
 8000f76:	601a      	str	r2, [r3, #0]
	   }
	 HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
 8000f78:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <fnCheckPacket+0x80>)
 8000f7a:	f7ff f92d 	bl	80001d8 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <fnCheckPacket+0x80>)
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <fnCheckPacket+0x88>)
 8000f8a:	f003 fde1 	bl	8004b50 <HAL_UART_Transmit>
	 return answer;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <fnCheckPacket+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000031 	.word	0x20000031
 8000fa0:	200003bc 	.word	0x200003bc
 8000fa4:	20000288 	.word	0x20000288
 8000fa8:	2000033c 	.word	0x2000033c
 8000fac:	20000184 	.word	0x20000184

08000fb0 <GPRS_Ask>:

void GPRS_Ask(uint8_t cmd[], uint8_t len){		// ham gui du lieu
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	 indexBuffer = 0;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <GPRS_Ask+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	 memset(buffer, '\0', 256);
 8000fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4813      	ldr	r0, [pc, #76]	; (8001018 <GPRS_Ask+0x68>)
 8000fca:	f004 fd55 	bl	8005a78 <memset>
	 HAL_UART_Transmit(&huart3, cmd, len, 1000);
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <GPRS_Ask+0x6c>)
 8000fda:	f003 fdb9 	bl	8004b50 <HAL_UART_Transmit>
	 HAL_UART_Transmit(&huart1, cmd, len, 1000);
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <GPRS_Ask+0x70>)
 8000fea:	f003 fdb1 	bl	8004b50 <HAL_UART_Transmit>
	 HAL_Delay(500);
 8000fee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff2:	f001 f8eb 	bl	80021cc <HAL_Delay>
	 HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
 8000ff6:	4808      	ldr	r0, [pc, #32]	; (8001018 <GPRS_Ask+0x68>)
 8000ff8:	f7ff f8ee 	bl	80001d8 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	4904      	ldr	r1, [pc, #16]	; (8001018 <GPRS_Ask+0x68>)
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <GPRS_Ask+0x70>)
 8001008:	f003 fda2 	bl	8004b50 <HAL_UART_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000031 	.word	0x20000031
 8001018:	200003bc 	.word	0x200003bc
 800101c:	20000288 	.word	0x20000288
 8001020:	2000033c 	.word	0x2000033c

08001024 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d144      	bne.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8001036:	2108      	movs	r1, #8
 8001038:	4823      	ldr	r0, [pc, #140]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800103a:	f001 fbcd 	bl	80027d8 <HAL_GPIO_TogglePin>
		  vr_count_10s ++;
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001046:	6013      	str	r3, [r2, #0]
		  vr_count_1000ms ++;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001050:	6013      	str	r3, [r2, #0]
		  vr_count_500ms ++;
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800105a:	6013      	str	r3, [r2, #0]
		  vr_count_2000ms ++;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001064:	6013      	str	r3, [r2, #0]

		  if(vr_count_10s == time_sendServer){
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d105      	bne.n	800107e <HAL_TIM_PeriodElapsedCallback+0x5a>
			  flag_timer_10s = 1; // timer du 10s thi gui du lieu len server
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
			  vr_count_10s = 0;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
		  }
		  if(vr_count_1000ms == 1000){
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001086:	d105      	bne.n	8001094 <HAL_TIM_PeriodElapsedCallback+0x70>
			  flag_timer_1000ms = 1; // timer du 200ms
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
			  vr_count_1000ms = 0;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
		  }
		  if(vr_count_500ms == 500){
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800109c:	d105      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x86>
			  flag_timer_500ms = 1; // timer du 500ms
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
			  vr_count_500ms = 0;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
		  }
		  if(vr_count_2000ms == 2000){ // timer du 2s
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010b2:	d105      	bne.n	80010c0 <HAL_TIM_PeriodElapsedCallback+0x9c>
			  flag_timer_2000ms = 1;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
			  vr_count_2000ms = 0;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
		  }
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	48000800 	.word	0x48000800
 80010cc:	20000038 	.word	0x20000038
 80010d0:	2000003c 	.word	0x2000003c
 80010d4:	20000040 	.word	0x20000040
 80010d8:	20000044 	.word	0x20000044
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000032 	.word	0x20000032
 80010e4:	20000033 	.word	0x20000033
 80010e8:	20000034 	.word	0x20000034
 80010ec:	20000035 	.word	0x20000035

080010f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_UART_RxCpltCallback+0x48>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d115      	bne.n	800112e <HAL_UART_RxCpltCallback+0x3e>
	{
		if(data != 0){
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_UART_RxCpltCallback+0x4c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d011      	beq.n	800112e <HAL_UART_RxCpltCallback+0x3e>
		buffer[indexBuffer] = data;
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_UART_RxCpltCallback+0x50>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_UART_RxCpltCallback+0x4c>)
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_UART_RxCpltCallback+0x54>)
 8001116:	5499      	strb	r1, [r3, r2]
		indexBuffer++;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_UART_RxCpltCallback+0x50>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_UART_RxCpltCallback+0x50>)
 8001122:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(&huart1, (uint8_t *)&Data, 1);
		HAL_UART_Receive_IT(&huart3, &data, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	4905      	ldr	r1, [pc, #20]	; (800113c <HAL_UART_RxCpltCallback+0x4c>)
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <HAL_UART_RxCpltCallback+0x58>)
 800112a:	f003 fda5 	bl	8004c78 <HAL_UART_Receive_IT>
		}
	}
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004800 	.word	0x40004800
 800113c:	20000030 	.word	0x20000030
 8001140:	20000031 	.word	0x20000031
 8001144:	200003bc 	.word	0x200003bc
 8001148:	20000288 	.word	0x20000288
 800114c:	00000000 	.word	0x00000000

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b0b9      	sub	sp, #228	; 0xe4
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	t_uartAt arrInitialSim[]={{CMD_AT, 				{(uint8_t*)"AT\r\n",4},												fnParseOKPacket},
 8001156:	4ab5      	ldr	r2, [pc, #724]	; (800142c <main+0x2dc>)
 8001158:	463b      	mov	r3, r7
 800115a:	4611      	mov	r1, r2
 800115c:	22e0      	movs	r2, #224	; 0xe0
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fc7f 	bl	8005a62 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f000 ffbd 	bl	80020e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 fa76 	bl	8001658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 fbf2 	bl	8001954 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001170:	f000 fb90 	bl	8001894 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001174:	f000 fb40 	bl	80017f8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001178:	f000 fbbc 	bl	80018f4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 800117c:	f000 fae0 	bl	8001740 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &data, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	49ab      	ldr	r1, [pc, #684]	; (8001430 <main+0x2e0>)
 8001184:	48ab      	ldr	r0, [pc, #684]	; (8001434 <main+0x2e4>)
 8001186:	f003 fd77 	bl	8004c78 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &dataTest, 1);
 800118a:	2201      	movs	r2, #1
 800118c:	49aa      	ldr	r1, [pc, #680]	; (8001438 <main+0x2e8>)
 800118e:	48ab      	ldr	r0, [pc, #684]	; (800143c <main+0x2ec>)
 8001190:	f003 fd72 	bl	8004c78 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001194:	48aa      	ldr	r0, [pc, #680]	; (8001440 <main+0x2f0>)
 8001196:	f003 f89d 	bl	80042d4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  switch (gsm_state){
 800119a:	4baa      	ldr	r3, [pc, #680]	; (8001444 <main+0x2f4>)
 800119c:	f993 3000 	ldrsb.w	r3, [r3]
 80011a0:	3301      	adds	r3, #1
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d8f9      	bhi.n	800119a <main+0x4a>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <main+0x5c>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011f1 	.word	0x080011f1
 80011b0:	080011fd 	.word	0x080011fd
 80011b4:	08001229 	.word	0x08001229
 80011b8:	08001255 	.word	0x08001255
 80011bc:	08001281 	.word	0x08001281
 80011c0:	080012ad 	.word	0x080012ad
 80011c4:	080012db 	.word	0x080012db
 80011c8:	08001309 	.word	0x08001309
 80011cc:	08001337 	.word	0x08001337
 80011d0:	08001365 	.word	0x08001365
 80011d4:	08001397 	.word	0x08001397
 80011d8:	080013c9 	.word	0x080013c9
 80011dc:	080013fb 	.word	0x080013fb
 80011e0:	0800144d 	.word	0x0800144d
 80011e4:	080014a5 	.word	0x080014a5
 80011e8:	0800150f 	.word	0x0800150f
 80011ec:	080015d3 	.word	0x080015d3
  	 case -1:
  		GSM_Init();
 80011f0:	f7ff fd98 	bl	8000d24 <GSM_Init>
  			gsm_state = CMD_AT;
 80011f4:	4b93      	ldr	r3, [pc, #588]	; (8001444 <main+0x2f4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  			break;
 80011fa:	e1fd      	b.n	80015f8 <main+0x4a8>
  	 case CMD_AT:
  		result = fnCheckPacket(arrInitialSim[CMD_AT].strSend.packetAt, arrInitialSim[CMD_AT].strSend.length, arrInitialSim[CMD_AT].fncType);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8939      	ldrh	r1, [r7, #8]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fe8c 	bl	8000f20 <fnCheckPacket>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b8e      	ldr	r3, [pc, #568]	; (8001448 <main+0x2f8>)
 800120e:	601a      	str	r2, [r3, #0]
  		if(result != 0){
 8001210:	4b8d      	ldr	r3, [pc, #564]	; (8001448 <main+0x2f8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <main+0xd0>
  			gsm_state = CMD_CPIN;
 8001218:	4b8a      	ldr	r3, [pc, #552]	; (8001444 <main+0x2f4>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
  			break;
 800121e:	e1eb      	b.n	80015f8 <main+0x4a8>
  		}
  		else
  			wait_to_reinitial(10);
 8001220:	200a      	movs	r0, #10
 8001222:	f000 fd6b 	bl	8001cfc <wait_to_reinitial>
  		break;
 8001226:	e1e7      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CPIN:
  		result = fnCheckPacket(arrInitialSim[CMD_CPIN].strSend.packetAt, arrInitialSim[CMD_CPIN].strSend.length, arrInitialSim[CMD_CPIN].fncType);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	8b39      	ldrh	r1, [r7, #24]
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe76 	bl	8000f20 <fnCheckPacket>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b83      	ldr	r3, [pc, #524]	; (8001448 <main+0x2f8>)
 800123a:	601a      	str	r2, [r3, #0]
  		if(result != 0){
 800123c:	4b82      	ldr	r3, [pc, #520]	; (8001448 <main+0x2f8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <main+0xfc>
  		  	gsm_state = CMD_CSQ;
 8001244:	4b7f      	ldr	r3, [pc, #508]	; (8001444 <main+0x2f4>)
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]
  		  	break;
 800124a:	e1d5      	b.n	80015f8 <main+0x4a8>
  		}
  		else
  			wait_to_reinitial(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f000 fd55 	bl	8001cfc <wait_to_reinitial>
  		break;
 8001252:	e1d1      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CSQ:
  		result = fnCheckPacket(arrInitialSim[CMD_CSQ].strSend.packetAt, arrInitialSim[CMD_CSQ].strSend.length, arrInitialSim[CMD_CSQ].fncType);
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe60 	bl	8000f20 <fnCheckPacket>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b78      	ldr	r3, [pc, #480]	; (8001448 <main+0x2f8>)
 8001266:	601a      	str	r2, [r3, #0]
  		if(result != 0){
 8001268:	4b77      	ldr	r3, [pc, #476]	; (8001448 <main+0x2f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <main+0x128>
  			gsm_state = CMD_CGREG;
 8001270:	4b74      	ldr	r3, [pc, #464]	; (8001444 <main+0x2f4>)
 8001272:	2203      	movs	r2, #3
 8001274:	701a      	strb	r2, [r3, #0]
  			break;
 8001276:	e1bf      	b.n	80015f8 <main+0x4a8>
  		}
  		else
  		  	wait_to_reinitial(10);
 8001278:	200a      	movs	r0, #10
 800127a:	f000 fd3f 	bl	8001cfc <wait_to_reinitial>
  		break;
 800127e:	e1bb      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CGREG:
  		result = fnCheckPacket(arrInitialSim[CMD_CGREG].strSend.packetAt, arrInitialSim[CMD_CGREG].strSend.length, arrInitialSim[CMD_CGREG].fncType);
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fe4a 	bl	8000f20 <fnCheckPacket>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <main+0x2f8>)
 8001292:	601a      	str	r2, [r3, #0]
   		if(result != 0){
 8001294:	4b6c      	ldr	r3, [pc, #432]	; (8001448 <main+0x2f8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <main+0x154>
   			gsm_state = CMD_CREG;
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <main+0x2f4>)
 800129e:	2204      	movs	r2, #4
 80012a0:	701a      	strb	r2, [r3, #0]
   			break;
 80012a2:	e1a9      	b.n	80015f8 <main+0x4a8>
   		}
   		else
   			wait_to_reinitial(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f000 fd29 	bl	8001cfc <wait_to_reinitial>
   		break;
 80012aa:	e1a5      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CREG:
  		result = fnCheckPacket(arrInitialSim[CMD_CREG].strSend.packetAt, arrInitialSim[CMD_CREG].strSend.length, arrInitialSim[CMD_CREG].fncType);
 80012ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ae:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80012b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe33 	bl	8000f20 <fnCheckPacket>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <main+0x2f8>)
 80012c0:	601a      	str	r2, [r3, #0]
    	if(result != 0){
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <main+0x2f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <main+0x182>
    		gsm_state = CMD_CGATT;
 80012ca:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <main+0x2f4>)
 80012cc:	2205      	movs	r2, #5
 80012ce:	701a      	strb	r2, [r3, #0]
    		break;
 80012d0:	e192      	b.n	80015f8 <main+0x4a8>
    	}
    	else
    		wait_to_reinitial(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f000 fd12 	bl	8001cfc <wait_to_reinitial>
    	break;
 80012d8:	e18e      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CGATT:
  		result = fnCheckPacket(arrInitialSim[CMD_CGATT].strSend.packetAt, arrInitialSim[CMD_CGATT].strSend.length, arrInitialSim[CMD_CGATT].fncType);
 80012da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012dc:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80012e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fe1c 	bl	8000f20 <fnCheckPacket>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b56      	ldr	r3, [pc, #344]	; (8001448 <main+0x2f8>)
 80012ee:	601a      	str	r2, [r3, #0]
     	if(result != 0){
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <main+0x2f8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <main+0x1b0>
     		gsm_state = CMD_CIPTIMEOUT;
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <main+0x2f4>)
 80012fa:	2206      	movs	r2, #6
 80012fc:	701a      	strb	r2, [r3, #0]
     		break;
 80012fe:	e17b      	b.n	80015f8 <main+0x4a8>
     	}
     	else
     		wait_to_reinitial(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 fcfb 	bl	8001cfc <wait_to_reinitial>
     	break;
 8001306:	e177      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CIPTIMEOUT:
  		result = fnCheckPacket(arrInitialSim[CMD_CIPTIMEOUT].strSend.packetAt, arrInitialSim[CMD_CIPTIMEOUT].strSend.length, arrInitialSim[CMD_CIPTIMEOUT].fncType);
 8001308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800130a:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 800130e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe05 	bl	8000f20 <fnCheckPacket>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <main+0x2f8>)
 800131c:	601a      	str	r2, [r3, #0]
      	if(result != 0){
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <main+0x2f8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <main+0x1de>
      		gsm_state = CMD_CIPMODE;
 8001326:	4b47      	ldr	r3, [pc, #284]	; (8001444 <main+0x2f4>)
 8001328:	2207      	movs	r2, #7
 800132a:	701a      	strb	r2, [r3, #0]
      		break;
 800132c:	e164      	b.n	80015f8 <main+0x4a8>
      	}
      	else
      		wait_to_reinitial(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f000 fce4 	bl	8001cfc <wait_to_reinitial>
      	break;
 8001334:	e160      	b.n	80015f8 <main+0x4a8>

  	 case CMD_CIPMODE:
  		result = fnCheckPacket(arrInitialSim[CMD_CIPMODE].strSend.packetAt, arrInitialSim[CMD_CIPMODE].strSend.length, arrInitialSim[CMD_CIPMODE].fncType);
 8001336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001338:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800133c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fdee 	bl	8000f20 <fnCheckPacket>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <main+0x2f8>)
 800134a:	601a      	str	r2, [r3, #0]
       	if(result != 0){
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <main+0x2f8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <main+0x20c>
       		gsm_state = CMD_NETOPEN;
 8001354:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <main+0x2f4>)
 8001356:	2208      	movs	r2, #8
 8001358:	701a      	strb	r2, [r3, #0]
       		break;
 800135a:	e14d      	b.n	80015f8 <main+0x4a8>
       	}
       	else
       		wait_to_reinitial(10);
 800135c:	200a      	movs	r0, #10
 800135e:	f000 fccd 	bl	8001cfc <wait_to_reinitial>
       	break;
 8001362:	e149      	b.n	80015f8 <main+0x4a8>

 	 case CMD_NETOPEN:
 		result = fnCheckPacket(arrInitialSim[CMD_NETOPEN].strSend.packetAt, arrInitialSim[CMD_NETOPEN].strSend.length, arrInitialSim[CMD_NETOPEN].fncType);
 8001364:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001368:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 800136c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fdd5 	bl	8000f20 <fnCheckPacket>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <main+0x2f8>)
 800137c:	601a      	str	r2, [r3, #0]
        if(result != 0){
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <main+0x2f8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <main+0x23e>
        	gsm_state = CMD_IPADDR;
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <main+0x2f4>)
 8001388:	2209      	movs	r2, #9
 800138a:	701a      	strb	r2, [r3, #0]
        	break;
 800138c:	e134      	b.n	80015f8 <main+0x4a8>
        }
        else
        	wait_to_reinitial(10);
 800138e:	200a      	movs	r0, #10
 8001390:	f000 fcb4 	bl	8001cfc <wait_to_reinitial>
        break;
 8001394:	e130      	b.n	80015f8 <main+0x4a8>

 	 case CMD_IPADDR:
 		result = fnCheckPacket(arrInitialSim[CMD_IPADDR].strSend.packetAt, arrInitialSim[CMD_IPADDR].strSend.length, arrInitialSim[CMD_IPADDR].fncType);
 8001396:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800139a:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 800139e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fdbc 	bl	8000f20 <fnCheckPacket>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <main+0x2f8>)
 80013ae:	601a      	str	r2, [r3, #0]
         if(result != 0){
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <main+0x2f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <main+0x270>
         	gsm_state = CMD_CIPOPEN;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <main+0x2f4>)
 80013ba:	220a      	movs	r2, #10
 80013bc:	701a      	strb	r2, [r3, #0]
         	break;
 80013be:	e11b      	b.n	80015f8 <main+0x4a8>
         }
         else
        	wait_to_reinitial(10);
 80013c0:	200a      	movs	r0, #10
 80013c2:	f000 fc9b 	bl	8001cfc <wait_to_reinitial>
         break;
 80013c6:	e117      	b.n	80015f8 <main+0x4a8>

 	 case CMD_CIPOPEN:
 		result = fnCheckPacket(arrInitialSim[CMD_CIPOPEN].strSend.packetAt, arrInitialSim[CMD_CIPOPEN].strSend.length, arrInitialSim[CMD_CIPOPEN].fncType);
 80013c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013cc:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80013d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fda3 	bl	8000f20 <fnCheckPacket>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <main+0x2f8>)
 80013e0:	601a      	str	r2, [r3, #0]
         if(result != 0){
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <main+0x2f8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <main+0x2a2>
         	gsm_state = CMD_CIPOPQUERY;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <main+0x2f4>)
 80013ec:	220b      	movs	r2, #11
 80013ee:	701a      	strb	r2, [r3, #0]
         	break;
 80013f0:	e102      	b.n	80015f8 <main+0x4a8>
         }
         else
        	wait_to_reinitial(10);
 80013f2:	200a      	movs	r0, #10
 80013f4:	f000 fc82 	bl	8001cfc <wait_to_reinitial>
         break;
 80013f8:	e0fe      	b.n	80015f8 <main+0x4a8>

 	 case CMD_CIPOPQUERY:
 		result = fnCheckPacket(arrInitialSim[CMD_CIPOPQUERY].strSend.packetAt, arrInitialSim[CMD_CIPOPQUERY].strSend.length, arrInitialSim[CMD_CIPOPQUERY].fncType);
 80013fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013fe:	f8b7 10b8 	ldrh.w	r1, [r7, #184]	; 0xb8
 8001402:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fd8a 	bl	8000f20 <fnCheckPacket>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <main+0x2f8>)
 8001412:	601a      	str	r2, [r3, #0]
         if(result != 0){
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <main+0x2f8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <main+0x2d4>
         	gsm_state = CMD_CIPSEND;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <main+0x2f4>)
 800141e:	220c      	movs	r2, #12
 8001420:	701a      	strb	r2, [r3, #0]
         	break;
 8001422:	e0e9      	b.n	80015f8 <main+0x4a8>
         }
         else
        	 wait_to_reinitialTCP(10);
 8001424:	200a      	movs	r0, #10
 8001426:	f000 fc89 	bl	8001d3c <wait_to_reinitialTCP>
         break;
 800142a:	e0e5      	b.n	80015f8 <main+0x4a8>
 800142c:	08005c34 	.word	0x08005c34
 8001430:	20000030 	.word	0x20000030
 8001434:	20000288 	.word	0x20000288
 8001438:	200004bc 	.word	0x200004bc
 800143c:	2000033c 	.word	0x2000033c
 8001440:	200004e8 	.word	0x200004e8
 8001444:	20000004 	.word	0x20000004
 8001448:	200004e4 	.word	0x200004e4

 	 case CMD_CIPSEND:
 		 if(flag_timer_10s == 1){
 800144c:	4b6e      	ldr	r3, [pc, #440]	; (8001608 <main+0x4b8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d122      	bne.n	800149c <main+0x34c>
 			 result = fnCheckPacket(arrInitialSim[CMD_CIPSEND].strSend.packetAt,arrInitialSim[CMD_CIPSEND].strSend.length, arrInitialSim[CMD_CIPSEND].fncType);
 8001456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800145a:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800145e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fd5c 	bl	8000f20 <fnCheckPacket>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	4b67      	ldr	r3, [pc, #412]	; (800160c <main+0x4bc>)
 800146e:	601a      	str	r2, [r3, #0]
 			 if(result != 0){
 8001470:	4b66      	ldr	r3, [pc, #408]	; (800160c <main+0x4bc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00d      	beq.n	8001494 <main+0x344>
 				//GPRS_Ask(txTest, strlen(txTest)); // gui du lieu len server
 				num ++;
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <main+0x4c0>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b63      	ldr	r3, [pc, #396]	; (8001610 <main+0x4c0>)
 8001482:	801a      	strh	r2, [r3, #0]
 				GPRS_Ask(arr, 24);
 8001484:	2118      	movs	r1, #24
 8001486:	4863      	ldr	r0, [pc, #396]	; (8001614 <main+0x4c4>)
 8001488:	f7ff fd92 	bl	8000fb0 <GPRS_Ask>
 			 else{
 				 wait_to_reinitialTCP(3);
 				 break;
 			 }

 			flag_timer_10s = 0;
 800148c:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <main+0x4b8>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e003      	b.n	800149c <main+0x34c>
 				 wait_to_reinitialTCP(3);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 fc51 	bl	8001d3c <wait_to_reinitialTCP>
 				 break;
 800149a:	e0ad      	b.n	80015f8 <main+0x4a8>
 		 }
 		 	 gsm_state = CMD_CIPRXGET;
 800149c:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <main+0x4c8>)
 800149e:	220d      	movs	r2, #13
 80014a0:	701a      	strb	r2, [r3, #0]
 		 break;
 80014a2:	e0a9      	b.n	80015f8 <main+0x4a8>

 	 case CMD_CIPRXGET:
 		if(flag_timer_1000ms == 1){
 80014a4:	4b5d      	ldr	r3, [pc, #372]	; (800161c <main+0x4cc>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d12b      	bne.n	8001506 <main+0x3b6>
 			 flag_timer_1000ms = 0;
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <main+0x4cc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
 			 result = fnCheckPacket(arrInitialSim[CMD_CIPRXGET].strSend.packetAt,arrInitialSim[CMD_CIPRXGET].strSend.length, arrInitialSim[CMD_CIPRXGET].fncType);
 80014b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014b8:	f8b7 10d8 	ldrh.w	r1, [r7, #216]	; 0xd8
 80014bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fd2d 	bl	8000f20 <fnCheckPacket>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b50      	ldr	r3, [pc, #320]	; (800160c <main+0x4bc>)
 80014cc:	601a      	str	r2, [r3, #0]
 			 if(result == 1){
 80014ce:	4b4f      	ldr	r3, [pc, #316]	; (800160c <main+0x4bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d117      	bne.n	8001506 <main+0x3b6>
 				memcpy(revRtc, buffer, sizeof(buffer));
 80014d6:	4a52      	ldr	r2, [pc, #328]	; (8001620 <main+0x4d0>)
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <main+0x4d4>)
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	461a      	mov	r2, r3
 80014e4:	f004 fabd 	bl	8005a62 <memcpy>
 				processChar(revRtc, '\n', arrRevProcess);
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <main+0x4d8>)
 80014ea:	210a      	movs	r1, #10
 80014ec:	484c      	ldr	r0, [pc, #304]	; (8001620 <main+0x4d0>)
 80014ee:	f000 fc45 	bl	8001d7c <processChar>
 				vr_test = strlen(arrRevProcess);
 80014f2:	484d      	ldr	r0, [pc, #308]	; (8001628 <main+0x4d8>)
 80014f4:	f7fe fe70 	bl	80001d8 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <main+0x4dc>)
 80014fe:	701a      	strb	r2, [r3, #0]
 				//HAL_UART_Transmit(&huart1, &vr_test, 1, 1000);
 				result = 0;
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <main+0x4bc>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 				}
 			}
 			gsm_state = CMD_REVPROCESS;
 8001506:	4b44      	ldr	r3, [pc, #272]	; (8001618 <main+0x4c8>)
 8001508:	220e      	movs	r2, #14
 800150a:	701a      	strb	r2, [r3, #0]
 		break;
 800150c:	e074      	b.n	80015f8 <main+0x4a8>

 	 case CMD_REVPROCESS:
 		 if(flag_timer_500ms == 1){
 800150e:	4b48      	ldr	r3, [pc, #288]	; (8001630 <main+0x4e0>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d158      	bne.n	80015ca <main+0x47a>
 			if(arrRevProcess[vr_test-1] == 1){
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <main+0x4dc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	4a42      	ldr	r2, [pc, #264]	; (8001628 <main+0x4d8>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d112      	bne.n	800154c <main+0x3fc>
// 			 if(arrRevProcess[0] != 0){
 				takeTime((uint8_t*)arrRevProcess);
 8001526:	4840      	ldr	r0, [pc, #256]	; (8001628 <main+0x4d8>)
 8001528:	f000 fc64 	bl	8001df4 <takeTime>
 				HAL_RTC_SetTime(&hrtc, &sTime2, RTC_FORMAT_BCD);
 800152c:	2201      	movs	r2, #1
 800152e:	4941      	ldr	r1, [pc, #260]	; (8001634 <main+0x4e4>)
 8001530:	4841      	ldr	r0, [pc, #260]	; (8001638 <main+0x4e8>)
 8001532:	f002 fbd8 	bl	8003ce6 <HAL_RTC_SetTime>
 				HAL_RTC_SetDate(&hrtc, &sDate2, RTC_FORMAT_BCD);
 8001536:	2201      	movs	r2, #1
 8001538:	4940      	ldr	r1, [pc, #256]	; (800163c <main+0x4ec>)
 800153a:	483f      	ldr	r0, [pc, #252]	; (8001638 <main+0x4e8>)
 800153c:	f002 fccc 	bl	8003ed8 <HAL_RTC_SetDate>
 				memset(arrRevProcess, '\0', 256);
 8001540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001544:	2100      	movs	r1, #0
 8001546:	4838      	ldr	r0, [pc, #224]	; (8001628 <main+0x4d8>)
 8001548:	f004 fa96 	bl	8005a78 <memset>
 			}
 			if(arrRevProcess[vr_test-1] == 2){
 800154c:	4b37      	ldr	r3, [pc, #220]	; (800162c <main+0x4dc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	4a35      	ldr	r2, [pc, #212]	; (8001628 <main+0x4d8>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d124      	bne.n	80015a4 <main+0x454>
 				time_conv = convertTimeSendSV(arrRevProcess[vr_test-2]);
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <main+0x4dc>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3b02      	subs	r3, #2
 8001560:	4a31      	ldr	r2, [pc, #196]	; (8001628 <main+0x4d8>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fd77 	bl	8002058 <convertTimeSendSV>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <main+0x4f0>)
 8001570:	601a      	str	r2, [r3, #0]
 				time_sendServer = time_conv / 0.001;
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <main+0x4f0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff78 	bl	800046c <__aeabi_ui2d>
 800157c:	a320      	add	r3, pc, #128	; (adr r3, 8001600 <main+0x4b0>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff f917 	bl	80007b4 <__aeabi_ddiv>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	f7ff f9f9 	bl	8000984 <__aeabi_d2uiz>
 8001592:	4602      	mov	r2, r0
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <main+0x4f4>)
 8001596:	601a      	str	r2, [r3, #0]
 				memset(arrRevProcess, '\0', 256);
 8001598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159c:	2100      	movs	r1, #0
 800159e:	4822      	ldr	r0, [pc, #136]	; (8001628 <main+0x4d8>)
 80015a0:	f004 fa6a 	bl	8005a78 <memset>
 			}
 				HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80015a4:	2201      	movs	r2, #1
 80015a6:	4928      	ldr	r1, [pc, #160]	; (8001648 <main+0x4f8>)
 80015a8:	4823      	ldr	r0, [pc, #140]	; (8001638 <main+0x4e8>)
 80015aa:	f002 fc39 	bl	8003e20 <HAL_RTC_GetTime>
 				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80015ae:	2201      	movs	r2, #1
 80015b0:	4926      	ldr	r1, [pc, #152]	; (800164c <main+0x4fc>)
 80015b2:	4821      	ldr	r0, [pc, #132]	; (8001638 <main+0x4e8>)
 80015b4:	f002 fd17 	bl	8003fe6 <HAL_RTC_GetDate>
 				convertTime(arr, num);
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <main+0x4c0>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4815      	ldr	r0, [pc, #84]	; (8001614 <main+0x4c4>)
 80015c0:	f000 fc3e 	bl	8001e40 <convertTime>
 				flag_timer_500ms = 0;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <main+0x4e0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
 		}
 		gsm_state = CMD_TRANSRTC;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <main+0x4c8>)
 80015cc:	220f      	movs	r2, #15
 80015ce:	701a      	strb	r2, [r3, #0]
 		break;
 80015d0:	e012      	b.n	80015f8 <main+0x4a8>

 	 case CMD_TRANSRTC:
 			 if(flag_timer_2000ms == 1){
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <main+0x500>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d109      	bne.n	80015f0 <main+0x4a0>
 				  HAL_UART_Transmit(&huart1, arr, 17, 1000);
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	2211      	movs	r2, #17
 80015e2:	490c      	ldr	r1, [pc, #48]	; (8001614 <main+0x4c4>)
 80015e4:	481b      	ldr	r0, [pc, #108]	; (8001654 <main+0x504>)
 80015e6:	f003 fab3 	bl	8004b50 <HAL_UART_Transmit>
 				  flag_timer_2000ms = 0;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <main+0x500>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
 			 }
 		gsm_state = CMD_CIPSEND;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <main+0x4c8>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	701a      	strb	r2, [r3, #0]
 		break;
 80015f6:	bf00      	nop
  switch (gsm_state){
 80015f8:	e5cf      	b.n	800119a <main+0x4a>
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	d2f1a9fc 	.word	0xd2f1a9fc
 8001604:	3f50624d 	.word	0x3f50624d
 8001608:	20000032 	.word	0x20000032
 800160c:	200004e4 	.word	0x200004e4
 8001610:	2000014e 	.word	0x2000014e
 8001614:	20000188 	.word	0x20000188
 8001618:	20000004 	.word	0x20000004
 800161c:	20000033 	.word	0x20000033
 8001620:	20000534 	.word	0x20000534
 8001624:	200003bc 	.word	0x200003bc
 8001628:	2000004c 	.word	0x2000004c
 800162c:	20000150 	.word	0x20000150
 8001630:	20000034 	.word	0x20000034
 8001634:	2000016c 	.word	0x2000016c
 8001638:	200004c0 	.word	0x200004c0
 800163c:	20000180 	.word	0x20000180
 8001640:	20000048 	.word	0x20000048
 8001644:	20000000 	.word	0x20000000
 8001648:	20000154 	.word	0x20000154
 800164c:	20000168 	.word	0x20000168
 8001650:	20000035 	.word	0x20000035
 8001654:	2000033c 	.word	0x2000033c

08001658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0b0      	sub	sp, #192	; 0xc0
 800165c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001662:	2244      	movs	r2, #68	; 0x44
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f004 fa06 	bl	8005a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2268      	movs	r2, #104	; 0x68
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f004 f9f8 	bl	8005a78 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001688:	f001 f8c0 	bl	800280c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SystemClock_Config+0xe0>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <SystemClock_Config+0xe0>)
 8001694:	f023 0318 	bic.w	r3, r3, #24
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800169c:	2306      	movs	r3, #6
 800169e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 f918 	bl	80028f4 <HAL_RCC_OscConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x76>
  {
    Error_Handler();
 80016ca:	f000 f9a3 	bl	8001a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ce:	230f      	movs	r3, #15
 80016d0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d2:	2301      	movs	r3, #1
 80016d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fd23 	bl	8003134 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016f4:	f000 f98e 	bl	8001a14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <SystemClock_Config+0xe4>)
 80016fa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001708:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	4618      	mov	r0, r3
 800170e:	f001 ff15 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001718:	f000 f97c 	bl	8001a14 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800171c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001720:	f001 f892 	bl	8002848 <HAL_PWREx_ControlVoltageScaling>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800172a:	f000 f973 	bl	8001a14 <Error_Handler>
  }
}
 800172e:	bf00      	nop
 8001730:	37c0      	adds	r7, #192	; 0xc0
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	00020005 	.word	0x00020005

08001740 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001754:	2300      	movs	r3, #0
 8001756:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_RTC_Init+0xb0>)
 800175a:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <MX_RTC_Init+0xb4>)
 800175c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MX_RTC_Init+0xb0>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_RTC_Init+0xb0>)
 8001766:	227f      	movs	r2, #127	; 0x7f
 8001768:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_RTC_Init+0xb0>)
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_RTC_Init+0xb0>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_RTC_Init+0xb0>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_RTC_Init+0xb0>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_RTC_Init+0xb0>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001788:	4819      	ldr	r0, [pc, #100]	; (80017f0 <MX_RTC_Init+0xb0>)
 800178a:	f002 fa31 	bl	8003bf0 <HAL_RTC_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001794:	f000 f93e 	bl	8001a14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001798:	2300      	movs	r3, #0
 800179a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800179c:	2300      	movs	r3, #0
 800179e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2201      	movs	r2, #1
 80017b0:	4619      	mov	r1, r3
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <MX_RTC_Init+0xb0>)
 80017b4:	f002 fa97 	bl	8003ce6 <HAL_RTC_SetTime>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80017be:	f000 f929 	bl	8001a14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017c2:	2301      	movs	r3, #1
 80017c4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017c6:	2301      	movs	r3, #1
 80017c8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80017ca:	2301      	movs	r3, #1
 80017cc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	2201      	movs	r2, #1
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_RTC_Init+0xb0>)
 80017da:	f002 fb7d 	bl	8003ed8 <HAL_RTC_SetDate>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80017e4:	f000 f916 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200004c0 	.word	0x200004c0
 80017f4:	40002800 	.word	0x40002800

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <MX_TIM2_Init+0x98>)
 8001818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_TIM2_Init+0x98>)
 8001820:	2210      	movs	r2, #16
 8001822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM2_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <MX_TIM2_Init+0x98>)
 800182c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_TIM2_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_TIM2_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800183e:	4814      	ldr	r0, [pc, #80]	; (8001890 <MX_TIM2_Init+0x98>)
 8001840:	f002 fcf0 	bl	8004224 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800184a:	f000 f8e3 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <MX_TIM2_Init+0x98>)
 800185c:	f002 feb5 	bl	80045ca <HAL_TIM_ConfigClockSource>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001866:	f000 f8d5 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_TIM2_Init+0x98>)
 8001878:	f003 f890 	bl	800499c <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001882:	f000 f8c7 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200004e8 	.word	0x200004e8

08001894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_USART1_UART_Init+0x58>)
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MX_USART1_UART_Init+0x5c>)
 800189c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART1_UART_Init+0x58>)
 80018d8:	f003 f8ec 	bl	8004ab4 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018e2:	f000 f897 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000033c 	.word	0x2000033c
 80018f0:	40013800 	.word	0x40013800

080018f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_USART3_UART_Init+0x58>)
 80018fa:	4a15      	ldr	r2, [pc, #84]	; (8001950 <MX_USART3_UART_Init+0x5c>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_USART3_UART_Init+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART3_UART_Init+0x58>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART3_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART3_UART_Init+0x58>)
 8001938:	f003 f8bc 	bl	8004ab4 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001942:	f000 f867 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000288 	.word	0x20000288
 8001950:	40004800 	.word	0x40004800

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <MX_GPIO_Init+0xb4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <MX_GPIO_Init+0xb4>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_GPIO_Init+0xb4>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_GPIO_Init+0xb4>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <MX_GPIO_Init+0xb4>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <MX_GPIO_Init+0xb4>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_GPIO_Init+0xb4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <MX_GPIO_Init+0xb4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_GPIO_Init+0xb4>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2108      	movs	r1, #8
 80019b6:	4815      	ldr	r0, [pc, #84]	; (8001a0c <MX_GPIO_Init+0xb8>)
 80019b8:	f000 fef6 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	2109      	movs	r1, #9
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_GPIO_Init+0xbc>)
 80019c2:	f000 fef1 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c6:	2308      	movs	r3, #8
 80019c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	480b      	ldr	r0, [pc, #44]	; (8001a0c <MX_GPIO_Init+0xb8>)
 80019de:	f000 fd69 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80019e2:	2309      	movs	r3, #9
 80019e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_GPIO_Init+0xbc>)
 80019fa:	f000 fd5b 	bl	80024b4 <HAL_GPIO_Init>

}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	48000800 	.word	0x48000800
 8001a10:	48000400 	.word	0x48000400

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x44>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_MspInit+0x44>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6613      	str	r3, [r2, #96]	; 0x60
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_MspInit+0x44>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_MspInit+0x44>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_MspInit+0x44>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_MspInit+0x44>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_RTC_MspInit+0x30>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d107      	bne.n	8001a8e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_RTC_MspInit+0x34>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_RTC_MspInit+0x34>)
 8001a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40002800 	.word	0x40002800
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d113      	bne.n	8001ade <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_TIM_Base_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_TIM_Base_MspInit+0x44>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	201c      	movs	r0, #28
 8001ad4:	f000 fc77 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad8:	201c      	movs	r0, #28
 8001ada:	f000 fc90 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a37      	ldr	r2, [pc, #220]	; (8001be8 <HAL_UART_MspInit+0xfc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d132      	bne.n	8001b74 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a30      	ldr	r2, [pc, #192]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b50:	2307      	movs	r3, #7
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f000 fca9 	bl	80024b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2025      	movs	r0, #37	; 0x25
 8001b68:	f000 fc2d 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b6c:	2025      	movs	r0, #37	; 0x25
 8001b6e:	f000 fc46 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b72:	e035      	b.n	8001be0 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_UART_MspInit+0x104>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d130      	bne.n	8001be0 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_MspInit+0x100>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480a      	ldr	r0, [pc, #40]	; (8001bf4 <HAL_UART_MspInit+0x108>)
 8001bcc:	f000 fc72 	bl	80024b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2027      	movs	r0, #39	; 0x27
 8001bd6:	f000 fbf6 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bda:	2027      	movs	r0, #39	; 0x27
 8001bdc:	f000 fc0f 	bl	80023fe <HAL_NVIC_EnableIRQ>
}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	; 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40013800 	.word	0x40013800
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40004800 	.word	0x40004800
 8001bf4:	48000400 	.word	0x48000400

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 fa9e 	bl	800218c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM2_IRQHandler+0x10>)
 8001c5a:	f002 fb97 	bl	800438c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200004e8 	.word	0x200004e8

08001c68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <USART1_IRQHandler+0x10>)
 8001c6e:	f003 f8a5 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000033c 	.word	0x2000033c

08001c7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <USART3_IRQHandler+0x10>)
 8001c82:	f003 f89b 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000288 	.word	0x20000288

08001c90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <SystemInit+0x64>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <SystemInit+0x64>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <SystemInit+0x68>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <SystemInit+0x68>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <SystemInit+0x68>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <SystemInit+0x68>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a0f      	ldr	r2, [pc, #60]	; (8001cf8 <SystemInit+0x68>)
 8001cbc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001cc0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <SystemInit+0x68>)
 8001cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ccc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <SystemInit+0x68>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <SystemInit+0x68>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <SystemInit+0x68>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x64>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	40021000 	.word	0x40021000

08001cfc <wait_to_reinitial>:

extern RTC_TimeTypeDef sTime2;
extern RTC_DateTypeDef sDate2;

// ham cho de khoi tao lai
void wait_to_reinitial(uint8_t time){
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
		count++;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <wait_to_reinitial+0x38>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <wait_to_reinitial+0x38>)
 8001d10:	701a      	strb	r2, [r3, #0]
		 if(count == time){
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <wait_to_reinitial+0x38>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d105      	bne.n	8001d28 <wait_to_reinitial+0x2c>
		  	gsm_state = -1;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <wait_to_reinitial+0x3c>)
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	701a      	strb	r2, [r3, #0]
		  	count = 0;
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <wait_to_reinitial+0x38>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
		  }
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	2000014c 	.word	0x2000014c
 8001d38:	20000004 	.word	0x20000004

08001d3c <wait_to_reinitialTCP>:

// ham quay lai khoi tao TCP
void wait_to_reinitialTCP(uint8_t time){
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
		count++;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <wait_to_reinitialTCP+0x38>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <wait_to_reinitialTCP+0x38>)
 8001d50:	701a      	strb	r2, [r3, #0]
		 if(count == time){
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <wait_to_reinitialTCP+0x38>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d105      	bne.n	8001d68 <wait_to_reinitialTCP+0x2c>
		  	gsm_state = CMD_CIPOPEN;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <wait_to_reinitialTCP+0x3c>)
 8001d5e:	220a      	movs	r2, #10
 8001d60:	701a      	strb	r2, [r3, #0]
		  	count = 0;
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <wait_to_reinitialTCP+0x38>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
		  }
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	2000014c 	.word	0x2000014c
 8001d78:	20000004 	.word	0x20000004

08001d7c <processChar>:

void processChar(char *strInput, uint8_t chr, char strRes[]){		// ham xu ly chuoi nhan ve
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	460b      	mov	r3, r1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	72fb      	strb	r3, [r7, #11]
	char *ptr1, *ptr2;
	ptr1 = strchr(strInput, chr);
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f003 fe7a 	bl	8005a88 <strchr>
 8001d94:	6178      	str	r0, [r7, #20]
	ptr1 = strchr(ptr1+1,chr);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	7afa      	ldrb	r2, [r7, #11]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fe72 	bl	8005a88 <strchr>
 8001da4:	6178      	str	r0, [r7, #20]
	ptr1 = strchr(ptr1+1,chr);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	7afa      	ldrb	r2, [r7, #11]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fe6a 	bl	8005a88 <strchr>
 8001db4:	6178      	str	r0, [r7, #20]
	ptr1 = strchr(ptr1+1,chr);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	7afa      	ldrb	r2, [r7, #11]
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fe62 	bl	8005a88 <strchr>
 8001dc4:	6178      	str	r0, [r7, #20]
	ptr2 = strchr(ptr1+1,chr);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	7afa      	ldrb	r2, [r7, #11]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fe5a 	bl	8005a88 <strchr>
 8001dd4:	6138      	str	r0, [r7, #16]
	memcpy(strRes, ptr1+1, ptr2-ptr1-2);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	3b02      	subs	r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f003 fe3c 	bl	8005a62 <memcpy>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <takeTime>:

void takeTime(uint8_t *sv_time){
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	 sTime2.Seconds = *(sv_time+0);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <takeTime+0x44>)
 8001e02:	709a      	strb	r2, [r3, #2]
	 sTime2.Minutes = *(sv_time+1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	785a      	ldrb	r2, [r3, #1]
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <takeTime+0x44>)
 8001e0a:	705a      	strb	r2, [r3, #1]
	 sTime2.Hours = *(sv_time+2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	789a      	ldrb	r2, [r3, #2]
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <takeTime+0x44>)
 8001e12:	701a      	strb	r2, [r3, #0]
	 sDate2.Date = *(sv_time+3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	78da      	ldrb	r2, [r3, #3]
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <takeTime+0x48>)
 8001e1a:	709a      	strb	r2, [r3, #2]
	 sDate2.Month = *(sv_time+4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	791a      	ldrb	r2, [r3, #4]
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <takeTime+0x48>)
 8001e22:	705a      	strb	r2, [r3, #1]
	 sDate2.Year = *(sv_time+5);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	795a      	ldrb	r2, [r3, #5]
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <takeTime+0x48>)
 8001e2a:	70da      	strb	r2, [r3, #3]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	2000016c 	.word	0x2000016c
 8001e3c:	20000180 	.word	0x20000180

08001e40 <convertTime>:

void convertTime(uint8_t *p_time, uint16_t index){
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
  		*(p_time+0) = (sTime.Hours/16)+48;
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <convertTime+0x204>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3330      	adds	r3, #48	; 0x30
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	701a      	strb	r2, [r3, #0]
  		*(p_time+1) = (sTime.Hours%16)+48;
 8001e5c:	4b79      	ldr	r3, [pc, #484]	; (8002044 <convertTime+0x204>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	3230      	adds	r2, #48	; 0x30
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
  		*(p_time+2) = '-';
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3302      	adds	r3, #2
 8001e74:	222d      	movs	r2, #45	; 0x2d
 8001e76:	701a      	strb	r2, [r3, #0]
  		*(p_time+3) = (sTime.Minutes/16)+48;
 8001e78:	4b72      	ldr	r3, [pc, #456]	; (8002044 <convertTime+0x204>)
 8001e7a:	785b      	ldrb	r3, [r3, #1]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3303      	adds	r3, #3
 8001e84:	3230      	adds	r2, #48	; 0x30
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
  		*(p_time+4) = (sTime.Minutes%16)+48;
 8001e8a:	4b6e      	ldr	r3, [pc, #440]	; (8002044 <convertTime+0x204>)
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	3230      	adds	r2, #48	; 0x30
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
  		*(p_time+5) = '-';
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3305      	adds	r3, #5
 8001ea2:	222d      	movs	r2, #45	; 0x2d
 8001ea4:	701a      	strb	r2, [r3, #0]
	  	*(p_time+6) = (sTime.Seconds/16)+48;
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <convertTime+0x204>)
 8001ea8:	789b      	ldrb	r3, [r3, #2]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3306      	adds	r3, #6
 8001eb2:	3230      	adds	r2, #48	; 0x30
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
	  	*(p_time+7) = (sTime.Seconds%16)+48;
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <convertTime+0x204>)
 8001eba:	789b      	ldrb	r3, [r3, #2]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3307      	adds	r3, #7
 8001ec6:	3230      	adds	r2, #48	; 0x30
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
	  	*(p_time+8) = ' ';
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	701a      	strb	r2, [r3, #0]
	  	*(p_time+9) = (sDate.Date/16)+48;
 8001ed4:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <convertTime+0x208>)
 8001ed6:	789b      	ldrb	r3, [r3, #2]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3309      	adds	r3, #9
 8001ee0:	3230      	adds	r2, #48	; 0x30
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
	  	*(p_time+10) = (sDate.Date%16)+48;
 8001ee6:	4b58      	ldr	r3, [pc, #352]	; (8002048 <convertTime+0x208>)
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	330a      	adds	r3, #10
 8001ef4:	3230      	adds	r2, #48	; 0x30
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
	  	*(p_time+11) = '/';
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	330b      	adds	r3, #11
 8001efe:	222f      	movs	r2, #47	; 0x2f
 8001f00:	701a      	strb	r2, [r3, #0]
	  	*(p_time+12) = (sDate.Month/16)+48;
 8001f02:	4b51      	ldr	r3, [pc, #324]	; (8002048 <convertTime+0x208>)
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	3230      	adds	r2, #48	; 0x30
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	701a      	strb	r2, [r3, #0]
	  	*(p_time+13) = (sDate.Month%16)+48;
 8001f14:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <convertTime+0x208>)
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	330d      	adds	r3, #13
 8001f22:	3230      	adds	r2, #48	; 0x30
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
	  	*(p_time+14) = '/';
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	330e      	adds	r3, #14
 8001f2c:	222f      	movs	r2, #47	; 0x2f
 8001f2e:	701a      	strb	r2, [r3, #0]
	  	*(p_time+15) = (sDate.Year/16)+48;
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <convertTime+0x208>)
 8001f32:	78db      	ldrb	r3, [r3, #3]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	330f      	adds	r3, #15
 8001f3c:	3230      	adds	r2, #48	; 0x30
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]
	  	*(p_time+16) = (sDate.Year%16)+48;
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <convertTime+0x208>)
 8001f44:	78db      	ldrb	r3, [r3, #3]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3310      	adds	r3, #16
 8001f50:	3230      	adds	r2, #48	; 0x30
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
	  	*(p_time+17) = ' ';
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3311      	adds	r3, #17
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	701a      	strb	r2, [r3, #0]
	  	*(p_time+18) = (index/1000)+48;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	4a3a      	ldr	r2, [pc, #232]	; (800204c <convertTime+0x20c>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3312      	adds	r3, #18
 8001f70:	3230      	adds	r2, #48	; 0x30
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]
		*(p_time+19) = ((index%1000)/100)+48;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <convertTime+0x20c>)
 8001f7a:	fba2 1203 	umull	r1, r2, r2, r3
 8001f7e:	0992      	lsrs	r2, r2, #6
 8001f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f84:	fb01 f202 	mul.w	r2, r1, r2
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4a30      	ldr	r2, [pc, #192]	; (8002050 <convertTime+0x210>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3313      	adds	r3, #19
 8001f9c:	3230      	adds	r2, #48	; 0x30
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
		*(p_time+20) = (((index%1000)%100)/10)+48;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	4a29      	ldr	r2, [pc, #164]	; (800204c <convertTime+0x20c>)
 8001fa6:	fba2 1203 	umull	r1, r2, r2, r3
 8001faa:	0992      	lsrs	r2, r2, #6
 8001fac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fb0:	fb01 f202 	mul.w	r2, r1, r2
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <convertTime+0x210>)
 8001fba:	fba2 1203 	umull	r1, r2, r2, r3
 8001fbe:	0952      	lsrs	r2, r2, #5
 8001fc0:	2164      	movs	r1, #100	; 0x64
 8001fc2:	fb01 f202 	mul.w	r2, r1, r2
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <convertTime+0x214>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3314      	adds	r3, #20
 8001fda:	3230      	adds	r2, #48	; 0x30
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	701a      	strb	r2, [r3, #0]
		*(p_time+21) = (((index%1000)%100)%10)+48;
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <convertTime+0x20c>)
 8001fe4:	fba2 1203 	umull	r1, r2, r2, r3
 8001fe8:	0992      	lsrs	r2, r2, #6
 8001fea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fee:	fb01 f202 	mul.w	r2, r1, r2
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <convertTime+0x210>)
 8001ff8:	fba2 1203 	umull	r1, r2, r2, r3
 8001ffc:	0952      	lsrs	r2, r2, #5
 8001ffe:	2164      	movs	r1, #100	; 0x64
 8002000:	fb01 f202 	mul.w	r2, r1, r2
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <convertTime+0x214>)
 800200a:	fba3 1302 	umull	r1, r3, r3, r2
 800200e:	08d9      	lsrs	r1, r3, #3
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3315      	adds	r3, #21
 8002022:	3230      	adds	r2, #48	; 0x30
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	701a      	strb	r2, [r3, #0]
	  	*(p_time+22) = '\r';
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3316      	adds	r3, #22
 800202c:	220d      	movs	r2, #13
 800202e:	701a      	strb	r2, [r3, #0]
		*(p_time+23) = '\n';
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3317      	adds	r3, #23
 8002034:	220a      	movs	r2, #10
 8002036:	701a      	strb	r2, [r3, #0]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20000154 	.word	0x20000154
 8002048:	20000168 	.word	0x20000168
 800204c:	10624dd3 	.word	0x10624dd3
 8002050:	51eb851f 	.word	0x51eb851f
 8002054:	cccccccd 	.word	0xcccccccd

08002058 <convertTimeSendSV>:

uint8_t convertTimeSendSV(uint8_t vrBCD){
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
		uint8_t lowByte = (vrBCD & 0x0F);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	73fb      	strb	r3, [r7, #15]
		uint8_t highByte = ((vrBCD >> 4) & 0x0F);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	73bb      	strb	r3, [r7, #14]
		return 	(10*highByte + lowByte);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	461a      	mov	r2, r3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4413      	add	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	4413      	add	r3, r2
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002094:	f7ff fdfc 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002098:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800209a:	e003      	b.n	80020a4 <LoopCopyDataInit>

0800209c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800209e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020a2:	3104      	adds	r1, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020a4:	480a      	ldr	r0, [pc, #40]	; (80020d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020ac:	d3f6      	bcc.n	800209c <CopyDataInit>
	ldr	r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020b0:	e002      	b.n	80020b8 <LoopFillZerobss>

080020b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020b4:	f842 3b04 	str.w	r3, [r2], #4

080020b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <LoopForever+0x16>)
	cmp	r2, r3
 80020ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020bc:	d3f9      	bcc.n	80020b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020be:	f003 fc9d 	bl	80059fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c2:	f7ff f845 	bl	8001150 <main>

080020c6 <LoopForever>:

LoopForever:
    b LoopForever
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80020cc:	08005d6c 	.word	0x08005d6c
	ldr	r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020d4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80020d8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80020dc:	2000063c 	.word	0x2000063c

080020e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC1_IRQHandler>

080020e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 f95f 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 f80e 	bl	8002114 <HAL_InitTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	71fb      	strb	r3, [r7, #7]
 8002102:	e001      	b.n	8002108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002104:	f7ff fc8e 	bl	8001a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002108:	79fb      	ldrb	r3, [r7, #7]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_InitTick+0x6c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_InitTick+0x70>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_InitTick+0x6c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f96b 	bl	800241a <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d809      	bhi.n	8002164 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f000 f935 	bl	80023c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_InitTick+0x74>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e007      	b.n	8002174 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e004      	b.n	8002174 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
 800216e:	e001      	b.n	8002174 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000010 	.word	0x20000010
 8002184:	20000008 	.word	0x20000008
 8002188:	2000000c 	.word	0x2000000c

0800218c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x20>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x24>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4413      	add	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_IncTick+0x24>)
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000010 	.word	0x20000010
 80021b0:	20000638 	.word	0x20000638

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000638 	.word	0x20000638

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_Delay+0x40>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000010 	.word	0x20000010

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d005      	beq.n	8002456 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e029      	b.n	80024aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020e 	bic.w	r2, r2, #14
 8002464:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f003 021c 	and.w	r2, r3, #28
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2101      	movs	r1, #1
 8002484:	fa01 f202 	lsl.w	r2, r1, r2
 8002488:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
    }
  }
  return status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e154      	b.n	800276e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8146 	beq.w	8002768 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d00b      	beq.n	80024fc <HAL_GPIO_Init+0x48>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b12      	cmp	r3, #18
 80024fa:	d130      	bne.n	800255e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002532:	2201      	movs	r2, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0201 	and.w	r2, r3, #1
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0xea>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b12      	cmp	r3, #18
 800259c:	d123      	bne.n	80025e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	6939      	ldr	r1, [r7, #16]
 80025e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80a0 	beq.w	8002768 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <HAL_GPIO_Init+0x2d8>)
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	4a57      	ldr	r2, [pc, #348]	; (800278c <HAL_GPIO_Init+0x2d8>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6613      	str	r3, [r2, #96]	; 0x60
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_GPIO_Init+0x2d8>)
 8002636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002640:	4a53      	ldr	r2, [pc, #332]	; (8002790 <HAL_GPIO_Init+0x2dc>)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3302      	adds	r3, #2
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800266a:	d019      	beq.n	80026a0 <HAL_GPIO_Init+0x1ec>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a49      	ldr	r2, [pc, #292]	; (8002794 <HAL_GPIO_Init+0x2e0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <HAL_GPIO_Init+0x1e8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a48      	ldr	r2, [pc, #288]	; (8002798 <HAL_GPIO_Init+0x2e4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00d      	beq.n	8002698 <HAL_GPIO_Init+0x1e4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_GPIO_Init+0x2e8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0x1e0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a46      	ldr	r2, [pc, #280]	; (80027a0 <HAL_GPIO_Init+0x2ec>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_GPIO_Init+0x1dc>
 800268c:	2304      	movs	r3, #4
 800268e:	e008      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 8002690:	2307      	movs	r3, #7
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 8002694:	2303      	movs	r3, #3
 8002696:	e004      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 8002698:	2302      	movs	r3, #2
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 80026a0:	2300      	movs	r3, #0
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	f002 0203 	and.w	r2, r2, #3
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	4093      	lsls	r3, r2
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b2:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_GPIO_Init+0x2dc>)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026c0:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026e4:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800270e:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002738:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_GPIO_Init+0x2f0>)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f aea3 	bne.w	80024c4 <HAL_GPIO_Init+0x10>
  }
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	43d9      	mvns	r1, r3
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	400b      	ands	r3, r1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40007000 	.word	0x40007000

0800282c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_PWREx_GetVoltageRange+0x18>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002856:	d130      	bne.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002864:	d038      	beq.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286e:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2232      	movs	r2, #50	; 0x32
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0c9b      	lsrs	r3, r3, #18
 8002888:	3301      	adds	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288c:	e002      	b.n	8002894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b01      	subs	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a0:	d102      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f2      	bne.n	800288e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d110      	bne.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e00f      	b.n	80028da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d007      	beq.n	80028d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d0:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40007000 	.word	0x40007000
 80028ec:	20000008 	.word	0x20000008
 80028f0:	431bde83 	.word	0x431bde83

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	f000 bc11 	b.w	800312a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002908:	4ba0      	ldr	r3, [pc, #640]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002912:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80e4 	beq.w	8002af2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <HAL_RCC_OscConfig+0x4c>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	f040 808b 	bne.w	8002a4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 8087 	bne.w	8002a4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002940:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_OscConfig+0x64>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e3e8      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1a      	ldr	r2, [r3, #32]
 800295c:	4b8b      	ldr	r3, [pc, #556]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_RCC_OscConfig+0x7e>
 8002968:	4b88      	ldr	r3, [pc, #544]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	e005      	b.n	800297e <HAL_RCC_OscConfig+0x8a>
 8002972:	4b86      	ldr	r3, [pc, #536]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297e:	4293      	cmp	r3, r2
 8002980:	d223      	bcs.n	80029ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fd78 	bl	800347c <RCC_SetFlashLatencyFromMSIRange>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e3c9      	b.n	800312a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002996:	4b7d      	ldr	r3, [pc, #500]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7c      	ldr	r2, [pc, #496]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b7a      	ldr	r3, [pc, #488]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4977      	ldr	r1, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b4:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	4972      	ldr	r1, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e025      	b.n	8002a16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ca:	4b70      	ldr	r3, [pc, #448]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6f      	ldr	r2, [pc, #444]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029d0:	f043 0308 	orr.w	r3, r3, #8
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	496a      	ldr	r1, [pc, #424]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e8:	4b68      	ldr	r3, [pc, #416]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	4965      	ldr	r1, [pc, #404]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fd38 	bl	800347c <RCC_SetFlashLatencyFromMSIRange>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e389      	b.n	800312a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a16:	f000 fc6f 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	4a5a      	ldr	r2, [pc, #360]	; (8002b90 <HAL_RCC_OscConfig+0x29c>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a32:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <HAL_RCC_OscConfig+0x2a0>)
 8002a34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a36:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_OscConfig+0x2a4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fb6a 	bl	8002114 <HAL_InitTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d052      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	e36d      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d032      	beq.n	8002abc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a56:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a62:	f7ff fba7 	bl	80021b4 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6a:	f7ff fba3 	bl	80021b4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e356      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a88:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3f      	ldr	r2, [pc, #252]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a8e:	f043 0308 	orr.w	r3, r3, #8
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	493a      	ldr	r1, [pc, #232]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	604b      	str	r3, [r1, #4]
 8002aba:	e01a      	b.n	8002af2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002abc:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a32      	ldr	r2, [pc, #200]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fb74 	bl	80021b4 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fb70 	bl	80021b4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e323      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1dc>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d073      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_OscConfig+0x21c>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d10e      	bne.n	8002b28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d063      	beq.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d15f      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e300      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x24c>
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0x288>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x270>
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0x288>
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <HAL_RCC_OscConfig+0x298>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff fb16 	bl	80021b4 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8a:	e010      	b.n	8002bae <HAL_RCC_OscConfig+0x2ba>
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08005d14 	.word	0x08005d14
 8002b94:	20000008 	.word	0x20000008
 8002b98:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fb0a 	bl	80021b4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e2bd      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bae:	4baf      	ldr	r3, [pc, #700]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x2a8>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fafa 	bl	80021b4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff faf6 	bl	80021b4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e2a9      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bd6:	4ba5      	ldr	r3, [pc, #660]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2d0>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d060      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x310>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b0c      	cmp	r3, #12
 8002bfc:	d119      	bne.n	8002c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d116      	bne.n	8002c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	4b99      	ldr	r3, [pc, #612]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x328>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e286      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b93      	ldr	r3, [pc, #588]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	4990      	ldr	r1, [pc, #576]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c30:	e040      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d023      	beq.n	8002c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3a:	4b8c      	ldr	r3, [pc, #560]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a8b      	ldr	r2, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7ff fab5 	bl	80021b4 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7ff fab1 	bl	80021b4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e264      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c60:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b7f      	ldr	r3, [pc, #508]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	497c      	ldr	r1, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e018      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a79      	ldr	r2, [pc, #484]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7ff fa91 	bl	80021b4 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7ff fa8d 	bl	80021b4 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e240      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca8:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d03c      	beq.n	8002d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc8:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fa6c 	bl	80021b4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fa68 	bl	80021b4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e21b      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf2:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x3ec>
 8002d00:	e01b      	b.n	8002d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d02:	4b5a      	ldr	r3, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7ff fa4f 	bl	80021b4 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7ff fa4b 	bl	80021b4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1fe      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ef      	bne.n	8002d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a6 	beq.w	8002e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d4c:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	; 0x58
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d118      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d80:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a3a      	ldr	r2, [pc, #232]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8c:	f7ff fa12 	bl	80021b4 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7ff fa0e 	bl	80021b4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1c1      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da6:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <HAL_RCC_OscConfig+0x57c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4d8>
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dca:	e024      	b.n	8002e16 <HAL_RCC_OscConfig+0x522>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d110      	bne.n	8002df6 <HAL_RCC_OscConfig+0x502>
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a24      	ldr	r2, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df4:	e00f      	b.n	8002e16 <HAL_RCC_OscConfig+0x522>
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f023 0304 	bic.w	r3, r3, #4
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7ff f9c9 	bl	80021b4 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7ff f9c5 	bl	80021b4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e176      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x578>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ed      	beq.n	8002e26 <HAL_RCC_OscConfig+0x532>
 8002e4a:	e01a      	b.n	8002e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7ff f9b2 	bl	80021b4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e52:	e00f      	b.n	8002e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7ff f9ae 	bl	80021b4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d906      	bls.n	8002e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e15f      	b.n	800312a <HAL_RCC_OscConfig+0x836>
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e74:	4baa      	ldr	r3, [pc, #680]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e8      	bne.n	8002e54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e88:	4ba5      	ldr	r3, [pc, #660]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	4aa4      	ldr	r2, [pc, #656]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d03c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ea8:	4b9d      	ldr	r3, [pc, #628]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eae:	4a9c      	ldr	r2, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7ff f97c 	bl	80021b4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec0:	f7ff f978 	bl	80021b4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e12b      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed2:	4b93      	ldr	r3, [pc, #588]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ef      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x5cc>
 8002ee0:	e01b      	b.n	8002f1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ee2:	4b8f      	ldr	r3, [pc, #572]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee8:	4a8d      	ldr	r2, [pc, #564]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f95f 	bl	80021b4 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002efa:	f7ff f95b 	bl	80021b4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e10e      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f0c:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ef      	bne.n	8002efa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8102 	beq.w	8003128 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	f040 80c5 	bne.w	80030b8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d12c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d123      	bne.n	8002f9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d11b      	bne.n	8002f9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d113      	bne.n	8002f9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	3b01      	subs	r3, #1
 8002f82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d109      	bne.n	8002f9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d067      	beq.n	800306c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d062      	beq.n	8003068 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fa2:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0bb      	b.n	800312a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fbe:	f7ff f8f9 	bl	80021b4 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7ff f8f5 	bl	80021b4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0a8      	b.n	800312a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd8:	4b51      	ldr	r3, [pc, #324]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <HAL_RCC_OscConfig+0x830>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ffe:	0212      	lsls	r2, r2, #8
 8003000:	4311      	orrs	r1, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003006:	0852      	lsrs	r2, r2, #1
 8003008:	3a01      	subs	r2, #1
 800300a:	0552      	lsls	r2, r2, #21
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0652      	lsls	r2, r2, #25
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800301e:	06d2      	lsls	r2, r2, #27
 8003020:	430a      	orrs	r2, r1
 8003022:	493f      	ldr	r1, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8003024:	4313      	orrs	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800302e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a39      	ldr	r2, [pc, #228]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003040:	f7ff f8b8 	bl	80021b4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7ff f8b4 	bl	80021b4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e067      	b.n	800312a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003066:	e05f      	b.n	8003128 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e05e      	b.n	800312a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d157      	bne.n	8003128 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003078:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a28      	ldr	r2, [pc, #160]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003082:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003090:	f7ff f890 	bl	80021b4 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7ff f88c 	bl	80021b4 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e03f      	b.n	800312a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x7a4>
 80030b6:	e037      	b.n	8003128 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d02d      	beq.n	800311a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030dc:	f023 0303 	bic.w	r3, r3, #3
 80030e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 80030e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7ff f85f 	bl	80021b4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7ff f85b 	bl	80021b4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e00e      	b.n	800312a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_OscConfig+0x82c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x806>
 8003118:	e006      	b.n	8003128 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e005      	b.n	800312a <HAL_RCC_OscConfig+0x836>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0c8      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	4961      	ldr	r1, [pc, #388]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b5f      	ldr	r3, [pc, #380]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b0      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d04c      	beq.n	800321e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318c:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d121      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e09e      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e092      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031bc:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e086      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e07e      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	493f      	ldr	r1, [pc, #252]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ee:	f7fe ffe1 	bl	80021b4 <HAL_GetTick>
 80031f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	e00a      	b.n	800320c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f6:	f7fe ffdd 	bl	80021b4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e066      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 020c 	and.w	r2, r3, #12
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	429a      	cmp	r2, r3
 800321c:	d1eb      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322a:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	492c      	ldr	r1, [pc, #176]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d210      	bcs.n	800326c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4924      	ldr	r1, [pc, #144]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1b0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e036      	b.n	80032da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4910      	ldr	r1, [pc, #64]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032aa:	f000 f825 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032ae:	4601      	mov	r1, r0
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	5cd3      	ldrb	r3, [r2, r3]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	fa21 f303 	lsr.w	r3, r1, r3
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe ff20 	bl	8002114 <HAL_InitTick>
 80032d4:	4603      	mov	r3, r0
 80032d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80032d8:	7afb      	ldrb	r3, [r7, #11]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	08005d14 	.word	0x08005d14
 80032f0:	20000008 	.word	0x20000008
 80032f4:	2000000c 	.word	0x2000000c

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b3d      	ldr	r3, [pc, #244]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d121      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11e      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003338:	4b30      	ldr	r3, [pc, #192]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e005      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d102      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e004      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d101      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 800337e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d133      	bne.n	80033ee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d002      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0xa4>
 8003396:	2b03      	cmp	r3, #3
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800339a:	e005      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_GetSysClockFreq+0x10c>)
 800339e:	617b      	str	r3, [r7, #20]
      break;
 80033a0:	e005      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a4:	617b      	str	r3, [r7, #20]
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	617b      	str	r3, [r7, #20]
      break;
 80033ac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	3301      	adds	r3, #1
 80033ba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	fb02 f203 	mul.w	r2, r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_GetSysClockFreq+0x104>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0e5b      	lsrs	r3, r3, #25
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	3301      	adds	r3, #1
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033ee:	69bb      	ldr	r3, [r7, #24]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3724      	adds	r7, #36	; 0x24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000
 8003400:	08005d2c 	.word	0x08005d2c
 8003404:	00f42400 	.word	0x00f42400
 8003408:	007a1200 	.word	0x007a1200

0800340c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000008 	.word	0x20000008

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003428:	f7ff fff0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800342c:	4601      	mov	r1, r0
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_RCC_GetPCLK1Freq+0x28>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	08005d24 	.word	0x08005d24

08003450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003454:	f7ff ffda 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003458:	4601      	mov	r1, r0
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	0adb      	lsrs	r3, r3, #11
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	08005d24 	.word	0x08005d24

0800347c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003494:	f7ff f9ca 	bl	800282c <HAL_PWREx_GetVoltageRange>
 8003498:	6178      	str	r0, [r7, #20]
 800349a:	e014      	b.n	80034c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	4a24      	ldr	r2, [pc, #144]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a6:	6593      	str	r3, [r2, #88]	; 0x58
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b4:	f7ff f9ba 	bl	800282c <HAL_PWREx_GetVoltageRange>
 80034b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d10b      	bne.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d919      	bls.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2ba0      	cmp	r3, #160	; 0xa0
 80034d8:	d902      	bls.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034da:	2302      	movs	r3, #2
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e013      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e0:	2301      	movs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e010      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d902      	bls.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034ec:	2303      	movs	r3, #3
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	e00a      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d102      	bne.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f8:	2302      	movs	r3, #2
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e004      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b70      	cmp	r3, #112	; 0x70
 8003502:	d101      	bne.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003504:	2301      	movs	r3, #1
 8003506:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 0207 	bic.w	r2, r3, #7
 8003510:	4909      	ldr	r1, [pc, #36]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d001      	beq.n	800352a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	40022000 	.word	0x40022000

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003544:	2300      	movs	r3, #0
 8003546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003548:	2300      	movs	r3, #0
 800354a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02f      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003560:	d005      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003562:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003566:	d015      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800356c:	e00f      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a5c      	ldr	r2, [pc, #368]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800357a:	e00c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa44 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	74fb      	strb	r3, [r7, #19]
      break;
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800359c:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035aa:	494e      	ldr	r1, [pc, #312]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035b2:	e001      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 809e 	beq.w	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	4a3f      	ldr	r2, [pc, #252]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6593      	str	r3, [r2, #88]	; 0x58
 80035ec:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a39      	ldr	r2, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003608:	f7fe fdd4 	bl	80021b4 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800360e:	e009      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003610:	f7fe fdd0 	bl	80021b4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	74fb      	strb	r3, [r7, #19]
        break;
 8003622:	e005      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d15a      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01e      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	429a      	cmp	r2, r3
 8003650:	d019      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800365e:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800367e:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d016      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe fd90 	bl	80021b4 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003696:	e00b      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe fd8c 	bl	80021b4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d902      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	74fb      	strb	r3, [r7, #19]
            break;
 80036ae:	e006      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ec      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d2:	4904      	ldr	r1, [pc, #16]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036da:	e009      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f0:	7c7b      	ldrb	r3, [r7, #17]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d105      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f6:	4b9e      	ldr	r3, [pc, #632]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	4a9d      	ldr	r2, [pc, #628]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003700:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370e:	4b98      	ldr	r3, [pc, #608]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f023 0203 	bic.w	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4994      	ldr	r1, [pc, #592]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003730:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 020c 	bic.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	498c      	ldr	r1, [pc, #560]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003752:	4b87      	ldr	r3, [pc, #540]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	4983      	ldr	r1, [pc, #524]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003774:	4b7e      	ldr	r3, [pc, #504]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	497b      	ldr	r1, [pc, #492]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4972      	ldr	r1, [pc, #456]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037b8:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	496a      	ldr	r1, [pc, #424]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	4961      	ldr	r1, [pc, #388]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4b5c      	ldr	r3, [pc, #368]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	4959      	ldr	r1, [pc, #356]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381e:	4b54      	ldr	r3, [pc, #336]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	4950      	ldr	r1, [pc, #320]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	4948      	ldr	r1, [pc, #288]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003862:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003868:	f023 0203 	bic.w	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	493f      	ldr	r1, [pc, #252]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d028      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003884:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ae:	60d3      	str	r3, [r2, #12]
 80038b0:	e011      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f8a4 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	491f      	ldr	r1, [pc, #124]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003900:	d106      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390c:	60d3      	str	r3, [r2, #12]
 800390e:	e011      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f875 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	4908      	ldr	r1, [pc, #32]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800395e:	d109      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4a02      	ldr	r2, [pc, #8]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800396a:	60d3      	str	r3, [r2, #12]
 800396c:	e014      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800397c:	d10c      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f843 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d10c      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f820 	bl	8003a10 <RCCEx_PLLSAI1_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	4904      	ldr	r1, [pc, #16]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1e:	4b73      	ldr	r3, [pc, #460]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a2a:	4b70      	ldr	r3, [pc, #448]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a42:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
       ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d044      	beq.n	8003ae0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e041      	b.n	8003ae0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d00c      	beq.n	8003a7e <RCCEx_PLLSAI1_Config+0x6e>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d013      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0x80>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d120      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a6c:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11d      	bne.n	8003ab4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7c:	e01a      	b.n	8003ab4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8e:	e013      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a90:	4b56      	ldr	r3, [pc, #344]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10f      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aac:	e006      	b.n	8003abc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab2:	e004      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ab4:	bf00      	nop
 8003ab6:	e002      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003ab8:	bf00      	nop
 8003aba:	e000      	b.n	8003abe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003abc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ac4:	4b49      	ldr	r3, [pc, #292]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	4944      	ldr	r1, [pc, #272]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d17c      	bne.n	8003be0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a40      	ldr	r2, [pc, #256]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af2:	f7fe fb5f 	bl	80021b4 <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003af8:	e009      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003afa:	f7fe fb5b 	bl	80021b4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d902      	bls.n	8003b0e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b0c:	e005      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1ef      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d15f      	bne.n	8003be0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d110      	bne.n	8003b48 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b26:	4b31      	ldr	r3, [pc, #196]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	0211      	lsls	r1, r2, #8
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	06d2      	lsls	r2, r2, #27
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	492a      	ldr	r1, [pc, #168]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	610b      	str	r3, [r1, #16]
 8003b46:	e027      	b.n	8003b98 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d112      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6892      	ldr	r2, [r2, #8]
 8003b5e:	0211      	lsls	r1, r2, #8
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6912      	ldr	r2, [r2, #16]
 8003b64:	0852      	lsrs	r2, r2, #1
 8003b66:	3a01      	subs	r2, #1
 8003b68:	0552      	lsls	r2, r2, #21
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	491f      	ldr	r1, [pc, #124]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	610b      	str	r3, [r1, #16]
 8003b72:	e011      	b.n	8003b98 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6892      	ldr	r2, [r2, #8]
 8003b84:	0211      	lsls	r1, r2, #8
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6952      	ldr	r2, [r2, #20]
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	0652      	lsls	r2, r2, #25
 8003b90:	430a      	orrs	r2, r1
 8003b92:	4916      	ldr	r1, [pc, #88]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a13      	ldr	r2, [pc, #76]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fe fb06 	bl	80021b4 <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003baa:	e009      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bac:	f7fe fb02 	bl	80021b4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d902      	bls.n	8003bc0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003bbe:	e005      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ef      	beq.n	8003bac <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	4904      	ldr	r1, [pc, #16]	; (8003bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d06c      	beq.n	8003cdc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd ff28 	bl	8001a6c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	22ca      	movs	r2, #202	; 0xca
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2253      	movs	r2, #83	; 0x53
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa49 	bl	80040cc <RTC_EnterInitMode>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d14b      	bne.n	8003cdc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c56:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d2      	ldr	r2, [r2, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6919      	ldr	r1, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	041a      	lsls	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa4d 	bl	8004134 <RTC_ExitInitMode>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11b      	bne.n	8003cdc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0203 	bic.w	r2, r2, #3
 8003cb2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	22ff      	movs	r2, #255	; 0xff
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ce6:	b590      	push	{r4, r7, lr}
 8003ce8:	b087      	sub	sp, #28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	60b9      	str	r1, [r7, #8]
 8003cf0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_RTC_SetTime+0x1a>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e08b      	b.n	8003e18 <HAL_RTC_SetTime+0x132>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	22ca      	movs	r2, #202	; 0xca
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2253      	movs	r2, #83	; 0x53
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f9d3 	bl	80040cc <RTC_EnterInitMode>
 8003d26:	4603      	mov	r3, r0
 8003d28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d163      	bne.n	8003df8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d126      	bne.n	8003d84 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fa2e 	bl	80041b0 <RTC_ByteToBcd2>
 8003d54:	4603      	mov	r3, r0
 8003d56:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fa27 	bl	80041b0 <RTC_ByteToBcd2>
 8003d62:	4603      	mov	r3, r0
 8003d64:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d66:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	789b      	ldrb	r3, [r3, #2]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fa1f 	bl	80041b0 <RTC_ByteToBcd2>
 8003d72:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d74:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	78db      	ldrb	r3, [r3, #3]
 8003d7c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e018      	b.n	8003db6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2200      	movs	r2, #0
 8003d96:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003da4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003daa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	78db      	ldrb	r3, [r3, #3]
 8003db0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003dc0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003dc4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f9a0 	bl	8004134 <RTC_ExitInitMode>
 8003df4:	4603      	mov	r3, r0
 8003df6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	22ff      	movs	r2, #255	; 0xff
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003e16:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}

08003e20 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	0d9b      	lsrs	r3, r3, #22
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11a      	bne.n	8003ece <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 f9a7 	bl	80041f0 <RTC_Bcd2ToByte>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f99e 	bl	80041f0 <RTC_Bcd2ToByte>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	789b      	ldrb	r3, [r3, #2]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f995 	bl	80041f0 <RTC_Bcd2ToByte>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_RTC_SetDate+0x1a>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e075      	b.n	8003fde <HAL_RTC_SetDate+0x106>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10e      	bne.n	8003f26 <HAL_RTC_SetDate+0x4e>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	f023 0310 	bic.w	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	330a      	adds	r3, #10
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11c      	bne.n	8003f66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f93d 	bl	80041b0 <RTC_ByteToBcd2>
 8003f36:	4603      	mov	r3, r0
 8003f38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f936 	bl	80041b0 <RTC_ByteToBcd2>
 8003f44:	4603      	mov	r3, r0
 8003f46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	789b      	ldrb	r3, [r3, #2]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f92e 	bl	80041b0 <RTC_ByteToBcd2>
 8003f54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003f56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e00e      	b.n	8003f84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	78db      	ldrb	r3, [r3, #3]
 8003f6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003f78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	22ca      	movs	r2, #202	; 0xca
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2253      	movs	r2, #83	; 0x53
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f899 	bl	80040cc <RTC_EnterInitMode>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fb2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8bd 	bl	8004134 <RTC_ExitInitMode>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003fc6:	7cfb      	ldrb	r3, [r7, #19]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd90      	pop	{r4, r7, pc}

08003fe6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ffc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004000:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	0b5b      	lsrs	r3, r3, #13
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11a      	bne.n	8004076 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	78db      	ldrb	r3, [r3, #3]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 f8d3 	bl	80041f0 <RTC_Bcd2ToByte>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f8ca 	bl	80041f0 <RTC_Bcd2ToByte>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	789b      	ldrb	r3, [r3, #2]
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f8c1 	bl	80041f0 <RTC_Bcd2ToByte>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004096:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004098:	f7fe f88c 	bl	80021b4 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800409e:	e009      	b.n	80040b4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040a0:	f7fe f888 	bl	80021b4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ae:	d901      	bls.n	80040b4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e007      	b.n	80040c4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0ee      	beq.n	80040a0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d120      	bne.n	8004128 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295
 80040ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040f0:	f7fe f860 	bl	80021b4 <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80040f6:	e00d      	b.n	8004114 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80040f8:	f7fe f85c 	bl	80021b4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004106:	d905      	bls.n	8004114 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <RTC_EnterInitMode+0x5c>
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d1e7      	bne.n	80040f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <RTC_ExitInitMode+0x78>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <RTC_ExitInitMode+0x78>)
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800414c:	4b17      	ldr	r3, [pc, #92]	; (80041ac <RTC_ExitInitMode+0x78>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10c      	bne.n	8004172 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff91 	bl	8004080 <HAL_RTC_WaitForSynchro>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01e      	beq.n	80041a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e017      	b.n	80041a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <RTC_ExitInitMode+0x78>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <RTC_ExitInitMode+0x78>)
 8004178:	f023 0320 	bic.w	r3, r3, #32
 800417c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ff7e 	bl	8004080 <HAL_RTC_WaitForSynchro>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <RTC_ExitInitMode+0x78>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4a04      	ldr	r2, [pc, #16]	; (80041ac <RTC_ExitInitMode+0x78>)
 800419c:	f043 0320 	orr.w	r3, r3, #32
 80041a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40002800 	.word	0x40002800

080041b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80041c2:	e005      	b.n	80041d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	3b0a      	subs	r3, #10
 80041ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80041d0:	7afb      	ldrb	r3, [r7, #11]
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	d8f6      	bhi.n	80041c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	b2db      	uxtb	r3, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	4413      	add	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	b2da      	uxtb	r2, r3
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	4413      	add	r3, r2
 8004216:	b2db      	uxtb	r3, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e049      	b.n	80042ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd fc2a 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f000 fa92 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e040      	b.n	800436e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	; (800437c <HAL_TIM_Base_Start_IT+0xa8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x58>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004316:	d009      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x58>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <HAL_TIM_Base_Start_IT+0xac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_Base_Start_IT+0x58>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a17      	ldr	r2, [pc, #92]	; (8004384 <HAL_TIM_Base_Start_IT+0xb0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d115      	bne.n	8004358 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <HAL_TIM_Base_Start_IT+0xb4>)
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b06      	cmp	r3, #6
 800433c:	d015      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x96>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d011      	beq.n	800436a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004356:	e008      	b.n	800436a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e000      	b.n	800436c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40012c00 	.word	0x40012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	40014000 	.word	0x40014000
 8004388:	00010007 	.word	0x00010007

0800438c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0202 	mvn.w	r2, #2
 80043b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9be 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9b0 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f9c1 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b04      	cmp	r3, #4
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0204 	mvn.w	r2, #4
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f994 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f986 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f997 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b08      	cmp	r3, #8
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b08      	cmp	r3, #8
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0208 	mvn.w	r2, #8
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2204      	movs	r2, #4
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f96a 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f95c 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f96d 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b10      	cmp	r3, #16
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0210 	mvn.w	r2, #16
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2208      	movs	r2, #8
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f940 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f932 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f943 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0201 	mvn.w	r2, #1
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc fd8a 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 faa8 	bl	8004a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	d10e      	bne.n	800456a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d107      	bne.n	800456a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fa9b 	bl	8004aa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d10e      	bne.n	8004596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d107      	bne.n	8004596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800458e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8f1 	bl	8004778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d10e      	bne.n	80045c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d107      	bne.n	80045c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f06f 0220 	mvn.w	r2, #32
 80045ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa5b 	bl	8004a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_ConfigClockSource+0x18>
 80045de:	2302      	movs	r3, #2
 80045e0:	e0a8      	b.n	8004734 <HAL_TIM_ConfigClockSource+0x16a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004600:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004604:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d067      	beq.n	80046ee <HAL_TIM_ConfigClockSource+0x124>
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d80b      	bhi.n	800463a <HAL_TIM_ConfigClockSource+0x70>
 8004622:	2b10      	cmp	r3, #16
 8004624:	d073      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
 8004626:	2b10      	cmp	r3, #16
 8004628:	d802      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x66>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06f      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800462e:	e078      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004630:	2b20      	cmp	r3, #32
 8004632:	d06c      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d06a      	beq.n	800470e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004638:	e073      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800463a:	2b70      	cmp	r3, #112	; 0x70
 800463c:	d00d      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x90>
 800463e:	2b70      	cmp	r3, #112	; 0x70
 8004640:	d804      	bhi.n	800464c <HAL_TIM_ConfigClockSource+0x82>
 8004642:	2b50      	cmp	r3, #80	; 0x50
 8004644:	d033      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xe4>
 8004646:	2b60      	cmp	r3, #96	; 0x60
 8004648:	d041      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0x104>
      break;
 800464a:	e06a      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d066      	beq.n	8004720 <HAL_TIM_ConfigClockSource+0x156>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	d017      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004658:	e063      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6899      	ldr	r1, [r3, #8]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f000 f977 	bl	800495c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800467c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	609a      	str	r2, [r3, #8]
      break;
 8004686:	e04c      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f000 f960 	bl	800495c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046aa:	609a      	str	r2, [r3, #8]
      break;
 80046ac:	e039      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f000 f8d4 	bl	8004868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2150      	movs	r1, #80	; 0x50
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f92d 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 80046cc:	e029      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	461a      	mov	r2, r3
 80046dc:	f000 f8f3 	bl	80048c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2160      	movs	r1, #96	; 0x60
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f91d 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 80046ec:	e019      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6859      	ldr	r1, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f000 f8b4 	bl	8004868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f90d 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 800470c:	e009      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f000 f904 	bl	8004926 <TIM_ITRx_SetConfig>
        break;
 800471e:	e000      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004720:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2e      	ldr	r2, [pc, #184]	; (8004858 <TIM_Base_SetConfig+0xcc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0x28>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x28>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a2b      	ldr	r2, [pc, #172]	; (800485c <TIM_Base_SetConfig+0xd0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a23      	ldr	r2, [pc, #140]	; (8004858 <TIM_Base_SetConfig+0xcc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00f      	beq.n	80047ee <TIM_Base_SetConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d4:	d00b      	beq.n	80047ee <TIM_Base_SetConfig+0x62>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a20      	ldr	r2, [pc, #128]	; (800485c <TIM_Base_SetConfig+0xd0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <TIM_Base_SetConfig+0x62>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <TIM_Base_SetConfig+0xd4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <TIM_Base_SetConfig+0x62>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <TIM_Base_SetConfig+0xd8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d108      	bne.n	8004800 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a0c      	ldr	r2, [pc, #48]	; (8004858 <TIM_Base_SetConfig+0xcc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <TIM_Base_SetConfig+0xb0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <TIM_Base_SetConfig+0xd4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0xb0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <TIM_Base_SetConfig+0xd8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	615a      	str	r2, [r3, #20]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40000400 	.word	0x40000400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400

08004868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0201 	bic.w	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 030a 	bic.w	r3, r3, #10
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	031b      	lsls	r3, r3, #12
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	f043 0307 	orr.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	431a      	orrs	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e054      	b.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00e      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d009      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10c      	bne.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40014000 	.word	0x40014000

08004a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e040      	b.n	8004b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd f808 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	; 0x24
 8004ae0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fabe 	bl	8005074 <UART_SetConfig>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e022      	b.n	8004b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fd10 	bl	8005530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fd97 	bl	8005674 <UART_CheckIdleState>
 8004b46:	4603      	mov	r3, r0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	f040 8081 	bne.w	8004c6c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_UART_Transmit+0x26>
 8004b70:	88fb      	ldrh	r3, [r7, #6]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e079      	b.n	8004c6e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_UART_Transmit+0x38>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e072      	b.n	8004c6e <HAL_UART_Transmit+0x11e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2221      	movs	r2, #33	; 0x21
 8004b9a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004b9c:	f7fd fb0a 	bl	80021b4 <HAL_GetTick>
 8004ba0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d108      	bne.n	8004bce <HAL_UART_Transmit+0x7e>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e003      	b.n	8004bd6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004bde:	e02d      	b.n	8004c3c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fd87 	bl	80056fe <UART_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e039      	b.n	8004c6e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	881a      	ldrh	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	3302      	adds	r3, #2
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e008      	b.n	8004c2a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	781a      	ldrb	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	b292      	uxth	r2, r2
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1cb      	bne.n	8004be0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fd53 	bl	80056fe <UART_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e005      	b.n	8004c6e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004c6c:	2302      	movs	r3, #2
  }
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	f040 808a 	bne.w	8004da4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_UART_Receive_IT+0x24>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e082      	b.n	8004da6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Receive_IT+0x36>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e07b      	b.n	8004da6 <HAL_UART_Receive_IT+0x12e>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	d10e      	bne.n	8004cfa <HAL_UART_Receive_IT+0x82>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <HAL_UART_Receive_IT+0x78>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cee:	e02d      	b.n	8004d4c <HAL_UART_Receive_IT+0xd4>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	22ff      	movs	r2, #255	; 0xff
 8004cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cf8:	e028      	b.n	8004d4c <HAL_UART_Receive_IT+0xd4>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_UART_Receive_IT+0xa6>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_UART_Receive_IT+0x9c>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d12:	e01b      	b.n	8004d4c <HAL_UART_Receive_IT+0xd4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	227f      	movs	r2, #127	; 0x7f
 8004d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d1c:	e016      	b.n	8004d4c <HAL_UART_Receive_IT+0xd4>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d26:	d10d      	bne.n	8004d44 <HAL_UART_Receive_IT+0xcc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <HAL_UART_Receive_IT+0xc2>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	227f      	movs	r2, #127	; 0x7f
 8004d34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d38:	e008      	b.n	8004d4c <HAL_UART_Receive_IT+0xd4>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	223f      	movs	r2, #63	; 0x3f
 8004d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d42:	e003      	b.n	8004d4c <HAL_UART_Receive_IT+0xd4>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2222      	movs	r2, #34	; 0x22
 8004d56:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d107      	bne.n	8004d82 <HAL_UART_Receive_IT+0x10a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <HAL_UART_Receive_IT+0x13c>)
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
 8004d80:	e002      	b.n	8004d88 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <HAL_UART_Receive_IT+0x140>)
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004d9e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	0800593d 	.word	0x0800593d
 8004db8:	08005893 	.word	0x08005893

08004dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	f640 030f 	movw	r3, #2063	; 0x80f
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d113      	bne.n	8004e14 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00e      	beq.n	8004e14 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d009      	beq.n	8004e14 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8114 	beq.w	8005032 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
      }
      return;
 8004e12:	e10e      	b.n	8005032 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80d6 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4b86      	ldr	r3, [pc, #536]	; (8005044 <HAL_UART_IRQHandler+0x288>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80cb 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00e      	beq.n	8004e5a <HAL_UART_IRQHandler+0x9e>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e52:	f043 0201 	orr.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <HAL_UART_IRQHandler+0xc6>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2202      	movs	r2, #2
 8004e74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7a:	f043 0204 	orr.w	r2, r3, #4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00e      	beq.n	8004eaa <HAL_UART_IRQHandler+0xee>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d013      	beq.n	8004edc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed4:	f043 0208 	orr.w	r2, r3, #8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00f      	beq.n	8004f06 <HAL_UART_IRQHandler+0x14a>
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8093 	beq.w	8005036 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00c      	beq.n	8004f34 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d004      	beq.n	8004f52 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d031      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc4e 	bl	80057f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d123      	bne.n	8004fae <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d013      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f82:	4a31      	ldr	r2, [pc, #196]	; (8005048 <HAL_UART_IRQHandler+0x28c>)
 8004f84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd fa51 	bl	8002432 <HAL_DMA_Abort_IT>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	e00e      	b.n	8004fc4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f85a 	bl	8005060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e00a      	b.n	8004fc4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f856 	bl	8005060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e006      	b.n	8004fc4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f852 	bl	8005060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004fc2:	e038      	b.n	8005036 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	bf00      	nop
    return;
 8004fc6:	e036      	b.n	8005036 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00d      	beq.n	8004fee <HAL_UART_IRQHandler+0x232>
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fcfd 	bl	80059e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fec:	e026      	b.n	800503c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005006:	2b00      	cmp	r3, #0
 8005008:	d017      	beq.n	800503a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
    }
    return;
 8005012:	e012      	b.n	800503a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <HAL_UART_IRQHandler+0x280>
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d009      	beq.n	800503c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fc19 	bl	8005860 <UART_EndTransmit_IT>
    return;
 800502e:	bf00      	nop
 8005030:	e004      	b.n	800503c <HAL_UART_IRQHandler+0x280>
      return;
 8005032:	bf00      	nop
 8005034:	e002      	b.n	800503c <HAL_UART_IRQHandler+0x280>
    return;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <HAL_UART_IRQHandler+0x280>
    return;
 800503a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800503c:	3720      	adds	r7, #32
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	04000120 	.word	0x04000120
 8005048:	08005835 	.word	0x08005835

0800504c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005074:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005078:	b088      	sub	sp, #32
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4313      	orrs	r3, r2
 8005098:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4ba4      	ldr	r3, [pc, #656]	; (8005334 <UART_SetConfig+0x2c0>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	69f9      	ldr	r1, [r7, #28]
 80050aa:	430b      	orrs	r3, r1
 80050ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a9a      	ldr	r2, [pc, #616]	; (8005338 <UART_SetConfig+0x2c4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a91      	ldr	r2, [pc, #580]	; (800533c <UART_SetConfig+0x2c8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d121      	bne.n	8005140 <UART_SetConfig+0xcc>
 80050fc:	4b90      	ldr	r3, [pc, #576]	; (8005340 <UART_SetConfig+0x2cc>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b03      	cmp	r3, #3
 8005108:	d816      	bhi.n	8005138 <UART_SetConfig+0xc4>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x9c>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005121 	.word	0x08005121
 8005114:	0800512d 	.word	0x0800512d
 8005118:	08005127 	.word	0x08005127
 800511c:	08005133 	.word	0x08005133
 8005120:	2301      	movs	r3, #1
 8005122:	76fb      	strb	r3, [r7, #27]
 8005124:	e0be      	b.n	80052a4 <UART_SetConfig+0x230>
 8005126:	2302      	movs	r3, #2
 8005128:	76fb      	strb	r3, [r7, #27]
 800512a:	e0bb      	b.n	80052a4 <UART_SetConfig+0x230>
 800512c:	2304      	movs	r3, #4
 800512e:	76fb      	strb	r3, [r7, #27]
 8005130:	e0b8      	b.n	80052a4 <UART_SetConfig+0x230>
 8005132:	2308      	movs	r3, #8
 8005134:	76fb      	strb	r3, [r7, #27]
 8005136:	e0b5      	b.n	80052a4 <UART_SetConfig+0x230>
 8005138:	2310      	movs	r3, #16
 800513a:	76fb      	strb	r3, [r7, #27]
 800513c:	bf00      	nop
 800513e:	e0b1      	b.n	80052a4 <UART_SetConfig+0x230>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a7f      	ldr	r2, [pc, #508]	; (8005344 <UART_SetConfig+0x2d0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d134      	bne.n	80051b4 <UART_SetConfig+0x140>
 800514a:	4b7d      	ldr	r3, [pc, #500]	; (8005340 <UART_SetConfig+0x2cc>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d829      	bhi.n	80051ac <UART_SetConfig+0x138>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <UART_SetConfig+0xec>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005195 	.word	0x08005195
 8005164:	080051ad 	.word	0x080051ad
 8005168:	080051ad 	.word	0x080051ad
 800516c:	080051ad 	.word	0x080051ad
 8005170:	080051a1 	.word	0x080051a1
 8005174:	080051ad 	.word	0x080051ad
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051ad 	.word	0x080051ad
 8005180:	0800519b 	.word	0x0800519b
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051ad 	.word	0x080051ad
 8005190:	080051a7 	.word	0x080051a7
 8005194:	2300      	movs	r3, #0
 8005196:	76fb      	strb	r3, [r7, #27]
 8005198:	e084      	b.n	80052a4 <UART_SetConfig+0x230>
 800519a:	2302      	movs	r3, #2
 800519c:	76fb      	strb	r3, [r7, #27]
 800519e:	e081      	b.n	80052a4 <UART_SetConfig+0x230>
 80051a0:	2304      	movs	r3, #4
 80051a2:	76fb      	strb	r3, [r7, #27]
 80051a4:	e07e      	b.n	80052a4 <UART_SetConfig+0x230>
 80051a6:	2308      	movs	r3, #8
 80051a8:	76fb      	strb	r3, [r7, #27]
 80051aa:	e07b      	b.n	80052a4 <UART_SetConfig+0x230>
 80051ac:	2310      	movs	r3, #16
 80051ae:	76fb      	strb	r3, [r7, #27]
 80051b0:	bf00      	nop
 80051b2:	e077      	b.n	80052a4 <UART_SetConfig+0x230>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a63      	ldr	r2, [pc, #396]	; (8005348 <UART_SetConfig+0x2d4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d120      	bne.n	8005200 <UART_SetConfig+0x18c>
 80051be:	4b60      	ldr	r3, [pc, #384]	; (8005340 <UART_SetConfig+0x2cc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d00f      	beq.n	80051ec <UART_SetConfig+0x178>
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d802      	bhi.n	80051d6 <UART_SetConfig+0x162>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d005      	beq.n	80051e0 <UART_SetConfig+0x16c>
 80051d4:	e010      	b.n	80051f8 <UART_SetConfig+0x184>
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d005      	beq.n	80051e6 <UART_SetConfig+0x172>
 80051da:	2b30      	cmp	r3, #48	; 0x30
 80051dc:	d009      	beq.n	80051f2 <UART_SetConfig+0x17e>
 80051de:	e00b      	b.n	80051f8 <UART_SetConfig+0x184>
 80051e0:	2300      	movs	r3, #0
 80051e2:	76fb      	strb	r3, [r7, #27]
 80051e4:	e05e      	b.n	80052a4 <UART_SetConfig+0x230>
 80051e6:	2302      	movs	r3, #2
 80051e8:	76fb      	strb	r3, [r7, #27]
 80051ea:	e05b      	b.n	80052a4 <UART_SetConfig+0x230>
 80051ec:	2304      	movs	r3, #4
 80051ee:	76fb      	strb	r3, [r7, #27]
 80051f0:	e058      	b.n	80052a4 <UART_SetConfig+0x230>
 80051f2:	2308      	movs	r3, #8
 80051f4:	76fb      	strb	r3, [r7, #27]
 80051f6:	e055      	b.n	80052a4 <UART_SetConfig+0x230>
 80051f8:	2310      	movs	r3, #16
 80051fa:	76fb      	strb	r3, [r7, #27]
 80051fc:	bf00      	nop
 80051fe:	e051      	b.n	80052a4 <UART_SetConfig+0x230>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a51      	ldr	r2, [pc, #324]	; (800534c <UART_SetConfig+0x2d8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d120      	bne.n	800524c <UART_SetConfig+0x1d8>
 800520a:	4b4d      	ldr	r3, [pc, #308]	; (8005340 <UART_SetConfig+0x2cc>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d00f      	beq.n	8005238 <UART_SetConfig+0x1c4>
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d802      	bhi.n	8005222 <UART_SetConfig+0x1ae>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <UART_SetConfig+0x1b8>
 8005220:	e010      	b.n	8005244 <UART_SetConfig+0x1d0>
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d005      	beq.n	8005232 <UART_SetConfig+0x1be>
 8005226:	2bc0      	cmp	r3, #192	; 0xc0
 8005228:	d009      	beq.n	800523e <UART_SetConfig+0x1ca>
 800522a:	e00b      	b.n	8005244 <UART_SetConfig+0x1d0>
 800522c:	2300      	movs	r3, #0
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e038      	b.n	80052a4 <UART_SetConfig+0x230>
 8005232:	2302      	movs	r3, #2
 8005234:	76fb      	strb	r3, [r7, #27]
 8005236:	e035      	b.n	80052a4 <UART_SetConfig+0x230>
 8005238:	2304      	movs	r3, #4
 800523a:	76fb      	strb	r3, [r7, #27]
 800523c:	e032      	b.n	80052a4 <UART_SetConfig+0x230>
 800523e:	2308      	movs	r3, #8
 8005240:	76fb      	strb	r3, [r7, #27]
 8005242:	e02f      	b.n	80052a4 <UART_SetConfig+0x230>
 8005244:	2310      	movs	r3, #16
 8005246:	76fb      	strb	r3, [r7, #27]
 8005248:	bf00      	nop
 800524a:	e02b      	b.n	80052a4 <UART_SetConfig+0x230>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a39      	ldr	r2, [pc, #228]	; (8005338 <UART_SetConfig+0x2c4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d124      	bne.n	80052a0 <UART_SetConfig+0x22c>
 8005256:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <UART_SetConfig+0x2cc>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005264:	d012      	beq.n	800528c <UART_SetConfig+0x218>
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526a:	d802      	bhi.n	8005272 <UART_SetConfig+0x1fe>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <UART_SetConfig+0x20c>
 8005270:	e012      	b.n	8005298 <UART_SetConfig+0x224>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d006      	beq.n	8005286 <UART_SetConfig+0x212>
 8005278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527c:	d009      	beq.n	8005292 <UART_SetConfig+0x21e>
 800527e:	e00b      	b.n	8005298 <UART_SetConfig+0x224>
 8005280:	2300      	movs	r3, #0
 8005282:	76fb      	strb	r3, [r7, #27]
 8005284:	e00e      	b.n	80052a4 <UART_SetConfig+0x230>
 8005286:	2302      	movs	r3, #2
 8005288:	76fb      	strb	r3, [r7, #27]
 800528a:	e00b      	b.n	80052a4 <UART_SetConfig+0x230>
 800528c:	2304      	movs	r3, #4
 800528e:	76fb      	strb	r3, [r7, #27]
 8005290:	e008      	b.n	80052a4 <UART_SetConfig+0x230>
 8005292:	2308      	movs	r3, #8
 8005294:	76fb      	strb	r3, [r7, #27]
 8005296:	e005      	b.n	80052a4 <UART_SetConfig+0x230>
 8005298:	2310      	movs	r3, #16
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	bf00      	nop
 800529e:	e001      	b.n	80052a4 <UART_SetConfig+0x230>
 80052a0:	2310      	movs	r3, #16
 80052a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a23      	ldr	r2, [pc, #140]	; (8005338 <UART_SetConfig+0x2c4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 8085 	bne.w	80053ba <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052b0:	7efb      	ldrb	r3, [r7, #27]
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d823      	bhi.n	80052fe <UART_SetConfig+0x28a>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x248>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ef 	.word	0x080052ef
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	080052ff 	.word	0x080052ff
 80052dc:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe f8a0 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80052e4:	6178      	str	r0, [r7, #20]
        break;
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <UART_SetConfig+0x2dc>)
 80052ea:	617b      	str	r3, [r7, #20]
        break;
 80052ec:	e00c      	b.n	8005308 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fe f803 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80052f2:	6178      	str	r0, [r7, #20]
        break;
 80052f4:	e008      	b.n	8005308 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	617b      	str	r3, [r7, #20]
        break;
 80052fc:	e004      	b.n	8005308 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	76bb      	strb	r3, [r7, #26]
        break;
 8005306:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8102 	beq.w	8005514 <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	429a      	cmp	r2, r3
 800531e:	d305      	bcc.n	800532c <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	429a      	cmp	r2, r3
 800532a:	d913      	bls.n	8005354 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	76bb      	strb	r3, [r7, #26]
 8005330:	e0f0      	b.n	8005514 <UART_SetConfig+0x4a0>
 8005332:	bf00      	nop
 8005334:	efff69f3 	.word	0xefff69f3
 8005338:	40008000 	.word	0x40008000
 800533c:	40013800 	.word	0x40013800
 8005340:	40021000 	.word	0x40021000
 8005344:	40004400 	.word	0x40004400
 8005348:	40004800 	.word	0x40004800
 800534c:	40004c00 	.word	0x40004c00
 8005350:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4619      	mov	r1, r3
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	0214      	lsls	r4, r2, #8
 8005366:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800536a:	020b      	lsls	r3, r1, #8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6852      	ldr	r2, [r2, #4]
 8005370:	0852      	lsrs	r2, r2, #1
 8005372:	4611      	mov	r1, r2
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	eb13 0b01 	adds.w	fp, r3, r1
 800537c:	eb44 0c02 	adc.w	ip, r4, r2
 8005380:	4658      	mov	r0, fp
 8005382:	4661      	mov	r1, ip
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f04f 0400 	mov.w	r4, #0
 800538c:	461a      	mov	r2, r3
 800538e:	4623      	mov	r3, r4
 8005390:	f7fb fb18 	bl	80009c4 <__aeabi_uldivmod>
 8005394:	4603      	mov	r3, r0
 8005396:	460c      	mov	r4, r1
 8005398:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a0:	d308      	bcc.n	80053b4 <UART_SetConfig+0x340>
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a8:	d204      	bcs.n	80053b4 <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	e0af      	b.n	8005514 <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	76bb      	strb	r3, [r7, #26]
 80053b8:	e0ac      	b.n	8005514 <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c2:	d15b      	bne.n	800547c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80053c4:	7efb      	ldrb	r3, [r7, #27]
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d827      	bhi.n	800541a <UART_SetConfig+0x3a6>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x35c>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005405 	.word	0x08005405
 80053dc:	0800541b 	.word	0x0800541b
 80053e0:	0800540b 	.word	0x0800540b
 80053e4:	0800541b 	.word	0x0800541b
 80053e8:	0800541b 	.word	0x0800541b
 80053ec:	0800541b 	.word	0x0800541b
 80053f0:	08005413 	.word	0x08005413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f4:	f7fe f816 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80053f8:	6178      	str	r0, [r7, #20]
        break;
 80053fa:	e013      	b.n	8005424 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053fc:	f7fe f828 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 8005400:	6178      	str	r0, [r7, #20]
        break;
 8005402:	e00f      	b.n	8005424 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005404:	4b49      	ldr	r3, [pc, #292]	; (800552c <UART_SetConfig+0x4b8>)
 8005406:	617b      	str	r3, [r7, #20]
        break;
 8005408:	e00c      	b.n	8005424 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540a:	f7fd ff75 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 800540e:	6178      	str	r0, [r7, #20]
        break;
 8005410:	e008      	b.n	8005424 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005416:	617b      	str	r3, [r7, #20]
        break;
 8005418:	e004      	b.n	8005424 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	76bb      	strb	r3, [r7, #26]
        break;
 8005422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d074      	beq.n	8005514 <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	005a      	lsls	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d916      	bls.n	8005476 <UART_SetConfig+0x402>
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544e:	d212      	bcs.n	8005476 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f023 030f 	bic.w	r3, r3, #15
 8005458:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	b29b      	uxth	r3, r3
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	b29a      	uxth	r2, r3
 8005466:	89fb      	ldrh	r3, [r7, #14]
 8005468:	4313      	orrs	r3, r2
 800546a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	89fa      	ldrh	r2, [r7, #14]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	e04e      	b.n	8005514 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	76bb      	strb	r3, [r7, #26]
 800547a:	e04b      	b.n	8005514 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800547c:	7efb      	ldrb	r3, [r7, #27]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d827      	bhi.n	80054d2 <UART_SetConfig+0x45e>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x414>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054d3 	.word	0x080054d3
 8005498:	080054c3 	.word	0x080054c3
 800549c:	080054d3 	.word	0x080054d3
 80054a0:	080054d3 	.word	0x080054d3
 80054a4:	080054d3 	.word	0x080054d3
 80054a8:	080054cb 	.word	0x080054cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fd ffba 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80054b0:	6178      	str	r0, [r7, #20]
        break;
 80054b2:	e013      	b.n	80054dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7fd ffcc 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 80054b8:	6178      	str	r0, [r7, #20]
        break;
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <UART_SetConfig+0x4b8>)
 80054be:	617b      	str	r3, [r7, #20]
        break;
 80054c0:	e00c      	b.n	80054dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fd ff19 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80054c6:	6178      	str	r0, [r7, #20]
        break;
 80054c8:	e008      	b.n	80054dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ce:	617b      	str	r3, [r7, #20]
        break;
 80054d0:	e004      	b.n	80054dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	76bb      	strb	r3, [r7, #26]
        break;
 80054da:	bf00      	nop
    }

    if (pclk != 0U)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085a      	lsrs	r2, r3, #1
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	441a      	add	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b0f      	cmp	r3, #15
 80054fc:	d908      	bls.n	8005510 <UART_SetConfig+0x49c>
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005504:	d204      	bcs.n	8005510 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	e001      	b.n	8005514 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005520:	7ebb      	ldrb	r3, [r7, #26]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800552c:	00f42400 	.word	0x00f42400

08005530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562e:	d10a      	bne.n	8005646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005682:	f7fc fd97 	bl	80021b4 <HAL_GetTick>
 8005686:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b08      	cmp	r3, #8
 8005694:	d10e      	bne.n	80056b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005696:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f82a 	bl	80056fe <UART_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e020      	b.n	80056f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d10e      	bne.n	80056e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f814 	bl	80056fe <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e00a      	b.n	80056f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4613      	mov	r3, r2
 800570c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570e:	e05d      	b.n	80057cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d059      	beq.n	80057cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005718:	f7fc fd4c 	bl	80021b4 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	429a      	cmp	r2, r3
 8005726:	d302      	bcc.n	800572e <UART_WaitOnFlagUntilTimeout+0x30>
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d11b      	bne.n	8005766 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800573c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e042      	b.n	80057ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02b      	beq.n	80057cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005782:	d123      	bne.n	80057cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800578c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800579c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e00f      	b.n	80057ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4013      	ands	r3, r2
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d092      	beq.n	8005710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800580a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fc04 	bl	8005060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005876:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fbe1 	bl	800504c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058a0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a6:	2b22      	cmp	r3, #34	; 0x22
 80058a8:	d13a      	bne.n	8005920 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058b0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058b2:	89bb      	ldrh	r3, [r7, #12]
 80058b4:	b2d9      	uxtb	r1, r3
 80058b6:	89fb      	ldrh	r3, [r7, #14]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	400a      	ands	r2, r1
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d123      	bne.n	8005934 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058fa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fb fbe9 	bl	80010f0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800591e:	e009      	b.n	8005934 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	8b1b      	ldrh	r3, [r3, #24]
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0208 	orr.w	r2, r2, #8
 8005930:	b292      	uxth	r2, r2
 8005932:	831a      	strh	r2, [r3, #24]
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800594a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005950:	2b22      	cmp	r3, #34	; 0x22
 8005952:	d13a      	bne.n	80059ca <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800595a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005962:	89ba      	ldrh	r2, [r7, #12]
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	4013      	ands	r3, r2
 8005968:	b29a      	uxth	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d123      	bne.n	80059de <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb fb94 	bl	80010f0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059c8:	e009      	b.n	80059de <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	8b1b      	ldrh	r3, [r3, #24]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	b292      	uxth	r2, r2
 80059dc:	831a      	strh	r2, [r3, #24]
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	4e0d      	ldr	r6, [pc, #52]	; (8005a34 <__libc_init_array+0x38>)
 8005a00:	4c0d      	ldr	r4, [pc, #52]	; (8005a38 <__libc_init_array+0x3c>)
 8005a02:	1ba4      	subs	r4, r4, r6
 8005a04:	10a4      	asrs	r4, r4, #2
 8005a06:	2500      	movs	r5, #0
 8005a08:	42a5      	cmp	r5, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	4e0b      	ldr	r6, [pc, #44]	; (8005a3c <__libc_init_array+0x40>)
 8005a0e:	4c0c      	ldr	r4, [pc, #48]	; (8005a40 <__libc_init_array+0x44>)
 8005a10:	f000 f848 	bl	8005aa4 <_init>
 8005a14:	1ba4      	subs	r4, r4, r6
 8005a16:	10a4      	asrs	r4, r4, #2
 8005a18:	2500      	movs	r5, #0
 8005a1a:	42a5      	cmp	r5, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a24:	4798      	blx	r3
 8005a26:	3501      	adds	r5, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a2e:	4798      	blx	r3
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	08005d64 	.word	0x08005d64
 8005a38:	08005d64 	.word	0x08005d64
 8005a3c:	08005d64 	.word	0x08005d64
 8005a40:	08005d68 	.word	0x08005d68

08005a44 <memcmp>:
 8005a44:	b530      	push	{r4, r5, lr}
 8005a46:	2400      	movs	r4, #0
 8005a48:	42a2      	cmp	r2, r4
 8005a4a:	d101      	bne.n	8005a50 <memcmp+0xc>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e007      	b.n	8005a60 <memcmp+0x1c>
 8005a50:	5d03      	ldrb	r3, [r0, r4]
 8005a52:	3401      	adds	r4, #1
 8005a54:	190d      	adds	r5, r1, r4
 8005a56:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005a5a:	42ab      	cmp	r3, r5
 8005a5c:	d0f4      	beq.n	8005a48 <memcmp+0x4>
 8005a5e:	1b58      	subs	r0, r3, r5
 8005a60:	bd30      	pop	{r4, r5, pc}

08005a62 <memcpy>:
 8005a62:	b510      	push	{r4, lr}
 8005a64:	1e43      	subs	r3, r0, #1
 8005a66:	440a      	add	r2, r1
 8005a68:	4291      	cmp	r1, r2
 8005a6a:	d100      	bne.n	8005a6e <memcpy+0xc>
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a76:	e7f7      	b.n	8005a68 <memcpy+0x6>

08005a78 <memset>:
 8005a78:	4402      	add	r2, r0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d100      	bne.n	8005a82 <memset+0xa>
 8005a80:	4770      	bx	lr
 8005a82:	f803 1b01 	strb.w	r1, [r3], #1
 8005a86:	e7f9      	b.n	8005a7c <memset+0x4>

08005a88 <strchr>:
 8005a88:	b2c9      	uxtb	r1, r1
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a90:	b11a      	cbz	r2, 8005a9a <strchr+0x12>
 8005a92:	428a      	cmp	r2, r1
 8005a94:	d1f9      	bne.n	8005a8a <strchr+0x2>
 8005a96:	4618      	mov	r0, r3
 8005a98:	4770      	bx	lr
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	bf18      	it	ne
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	e7f9      	b.n	8005a96 <strchr+0xe>
	...

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr
